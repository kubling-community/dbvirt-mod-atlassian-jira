/**
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Associations from './Associations';
import IncidentSeverity from './IncidentSeverity';

/**
 * The Incident model module.
 * @module model/Incident
 * @version 1001.0.0
 */
class Incident {
    /**
     * Constructs a new <code>Incident</code>.
     * Data related to a specific incident in a specific container that the incident is present in. Must specify at least one association to a component. 
     * @alias module:model/Incident
     * @param schemaVersion {module:model/Incident.SchemaVersionEnum} The IncidentData schema version used for this incident data.  Placeholder to support potential schema changes in the future. 
     * @param id {String} The identifier for the Incident. Must be unique for a given Provider. 
     * @param updateSequenceNumber {Number} An ID used to apply an ordering to updates for this Incident in the case of out-of-order receipt of update requests.  This can be any monotonically increasing number. A suggested implementation is to use epoch millis from the Provider system, but other alternatives are valid (e.g. a Provider could store a counter against each Incident and increment that on each update to Jira).  Updates for a Incident that are received with an updateSqeuenceId lower than what is currently stored will be ignored. 
     * @param affectedComponents {Array.<String>} The IDs of the Components impacted by this Incident. Must be unique for a given Provider. 
     * @param summary {String} The human-readable summary for the Incident. Will be shown in the UI.  If not provided, will use the ID for display. 
     * @param description {String} A description of the issue in Markdown format. Will be shown in the UI and used when creating Jira Issues. 
     * @param url {String} A URL users can use to link to a summary view of this incident, if appropriate.  This could be any location that makes sense in the Provider system (e.g. if the summary information comes from a specific project, it might make sense to link the user to the incident in that project). 
     * @param createdDate {Date} The timestamp to present to the user that shows when the Incident was raised.  Expected format is an RFC3339 formatted string. 
     * @param lastUpdated {Date} The last-updated timestamp to present to the user the last time the Incident was updated.  Expected format is an RFC3339 formatted string. 
     * @param status {module:model/Incident.StatusEnum} The current status of the Incident. 
     */
    constructor(schemaVersion, id, updateSequenceNumber, affectedComponents, summary, description, url, createdDate, lastUpdated, status) { 
        
        Incident.initialize(this, schemaVersion, id, updateSequenceNumber, affectedComponents, summary, description, url, createdDate, lastUpdated, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, schemaVersion, id, updateSequenceNumber, affectedComponents, summary, description, url, createdDate, lastUpdated, status) { 
        obj['schemaVersion'] = schemaVersion || '1.0';
        obj['id'] = id;
        obj['updateSequenceNumber'] = updateSequenceNumber;
        obj['affectedComponents'] = affectedComponents;
        obj['summary'] = summary;
        obj['description'] = description;
        obj['url'] = url;
        obj['createdDate'] = createdDate;
        obj['lastUpdated'] = lastUpdated;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>Incident</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Incident} obj Optional instance to populate.
     * @return {module:model/Incident} The populated <code>Incident</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Incident();

            if (data.hasOwnProperty('schemaVersion')) {
                obj['schemaVersion'] = ApiClient.convertToType(data['schemaVersion'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('updateSequenceNumber')) {
                obj['updateSequenceNumber'] = ApiClient.convertToType(data['updateSequenceNumber'], 'Number');
            }
            if (data.hasOwnProperty('affectedComponents')) {
                obj['affectedComponents'] = ApiClient.convertToType(data['affectedComponents'], ['String']);
            }
            if (data.hasOwnProperty('summary')) {
                obj['summary'] = ApiClient.convertToType(data['summary'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('createdDate')) {
                obj['createdDate'] = ApiClient.convertToType(data['createdDate'], 'Date');
            }
            if (data.hasOwnProperty('lastUpdated')) {
                obj['lastUpdated'] = ApiClient.convertToType(data['lastUpdated'], 'Date');
            }
            if (data.hasOwnProperty('severity')) {
                obj['severity'] = IncidentSeverity.constructFromObject(data['severity']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('associations')) {
                obj['associations'] = ApiClient.convertToType(data['associations'], [Associations]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Incident</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Incident</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Incident.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['schemaVersion'] && !(typeof data['schemaVersion'] === 'string' || data['schemaVersion'] instanceof String)) {
            throw new Error("Expected the field `schemaVersion` to be a primitive type in the JSON string but got " + data['schemaVersion']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['affectedComponents'])) {
            throw new Error("Expected the field `affectedComponents` to be an array in the JSON data but got " + data['affectedComponents']);
        }
        // ensure the json data is a string
        if (data['summary'] && !(typeof data['summary'] === 'string' || data['summary'] instanceof String)) {
            throw new Error("Expected the field `summary` to be a primitive type in the JSON string but got " + data['summary']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // validate the optional field `severity`
        if (data['severity']) { // data not null
          IncidentSeverity.validateJSON(data['severity']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        if (data['associations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['associations'])) {
                throw new Error("Expected the field `associations` to be an array in the JSON data but got " + data['associations']);
            }
            // validate the optional field `associations` (array)
            for (const item of data['associations']) {
                Associations.validateJSON(item);
            };
        }

        return true;
    }


}

Incident.RequiredProperties = ["schemaVersion", "id", "updateSequenceNumber", "affectedComponents", "summary", "description", "url", "createdDate", "lastUpdated", "status"];

/**
 * The IncidentData schema version used for this incident data.  Placeholder to support potential schema changes in the future. 
 * @member {module:model/Incident.SchemaVersionEnum} schemaVersion
 * @default '1.0'
 */
Incident.prototype['schemaVersion'] = '1.0';

/**
 * The identifier for the Incident. Must be unique for a given Provider. 
 * @member {String} id
 */
Incident.prototype['id'] = undefined;

/**
 * An ID used to apply an ordering to updates for this Incident in the case of out-of-order receipt of update requests.  This can be any monotonically increasing number. A suggested implementation is to use epoch millis from the Provider system, but other alternatives are valid (e.g. a Provider could store a counter against each Incident and increment that on each update to Jira).  Updates for a Incident that are received with an updateSqeuenceId lower than what is currently stored will be ignored. 
 * @member {Number} updateSequenceNumber
 */
Incident.prototype['updateSequenceNumber'] = undefined;

/**
 * The IDs of the Components impacted by this Incident. Must be unique for a given Provider. 
 * @member {Array.<String>} affectedComponents
 */
Incident.prototype['affectedComponents'] = undefined;

/**
 * The human-readable summary for the Incident. Will be shown in the UI.  If not provided, will use the ID for display. 
 * @member {String} summary
 */
Incident.prototype['summary'] = undefined;

/**
 * A description of the issue in Markdown format. Will be shown in the UI and used when creating Jira Issues. 
 * @member {String} description
 */
Incident.prototype['description'] = undefined;

/**
 * A URL users can use to link to a summary view of this incident, if appropriate.  This could be any location that makes sense in the Provider system (e.g. if the summary information comes from a specific project, it might make sense to link the user to the incident in that project). 
 * @member {String} url
 */
Incident.prototype['url'] = undefined;

/**
 * The timestamp to present to the user that shows when the Incident was raised.  Expected format is an RFC3339 formatted string. 
 * @member {Date} createdDate
 */
Incident.prototype['createdDate'] = undefined;

/**
 * The last-updated timestamp to present to the user the last time the Incident was updated.  Expected format is an RFC3339 formatted string. 
 * @member {Date} lastUpdated
 */
Incident.prototype['lastUpdated'] = undefined;

/**
 * @member {module:model/IncidentSeverity} severity
 */
Incident.prototype['severity'] = undefined;

/**
 * The current status of the Incident. 
 * @member {module:model/Incident.StatusEnum} status
 */
Incident.prototype['status'] = undefined;

/**
 * The IDs of the Jira issues related to this Incident. Must be unique for a given Provider. 
 * @member {Array.<module:model/Associations>} associations
 */
Incident.prototype['associations'] = undefined;





/**
 * Allowed values for the <code>schemaVersion</code> property.
 * @enum {String}
 * @readonly
 */
Incident['SchemaVersionEnum'] = {

    /**
     * value: "1.0"
     * @const
     */
    "1.0": "1.0"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Incident['StatusEnum'] = {

    /**
     * value: "open"
     * @const
     */
    "open": "open",

    /**
     * value: "resolved"
     * @const
     */
    "resolved": "resolved",

    /**
     * value: "unknown"
     * @const
     */
    "unknown": "unknown"
};



export default Incident;

