/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-122db9bd6b089919e6465ce52fdce319d5a9dfb4
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import WorkflowElementReference from './WorkflowElementReference';

/**
 * The WorkflowValidationError model module.
 * @module model/WorkflowValidationError
 * @version 1001.0.0-SNAPSHOT-122db9bd6b089919e6465ce52fdce319d5a9dfb4
 */
class WorkflowValidationError {
    /**
     * Constructs a new <code>WorkflowValidationError</code>.
     * The details about a workflow validation error.
     * @alias module:model/WorkflowValidationError
     */
    constructor() { 
        
        WorkflowValidationError.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>WorkflowValidationError</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WorkflowValidationError} obj Optional instance to populate.
     * @return {module:model/WorkflowValidationError} The populated <code>WorkflowValidationError</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WorkflowValidationError();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('elementReference')) {
                obj['elementReference'] = WorkflowElementReference.constructFromObject(data['elementReference']);
            }
            if (data.hasOwnProperty('level')) {
                obj['level'] = ApiClient.convertToType(data['level'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WorkflowValidationError</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WorkflowValidationError</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // validate the optional field `elementReference`
        if (data['elementReference']) { // data not null
          WorkflowElementReference.validateJSON(data['elementReference']);
        }
        // ensure the json data is a string
        if (data['level'] && !(typeof data['level'] === 'string' || data['level'] instanceof String)) {
            throw new Error("Expected the field `level` to be a primitive type in the JSON string but got " + data['level']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * An error code.
 * @member {String} code
 */
WorkflowValidationError.prototype['code'] = undefined;

/**
 * @member {module:model/WorkflowElementReference} elementReference
 */
WorkflowValidationError.prototype['elementReference'] = undefined;

/**
 * The validation error level.
 * @member {module:model/WorkflowValidationError.LevelEnum} level
 */
WorkflowValidationError.prototype['level'] = undefined;

/**
 * An error message.
 * @member {String} message
 */
WorkflowValidationError.prototype['message'] = undefined;

/**
 * The type of element the error or warning references.
 * @member {module:model/WorkflowValidationError.TypeEnum} type
 */
WorkflowValidationError.prototype['type'] = undefined;





/**
 * Allowed values for the <code>level</code> property.
 * @enum {String}
 * @readonly
 */
WorkflowValidationError['LevelEnum'] = {

    /**
     * value: "WARNING"
     * @const
     */
    "WARNING": "WARNING",

    /**
     * value: "ERROR"
     * @const
     */
    "ERROR": "ERROR"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
WorkflowValidationError['TypeEnum'] = {

    /**
     * value: "RULE"
     * @const
     */
    "RULE": "RULE",

    /**
     * value: "STATUS"
     * @const
     */
    "STATUS": "STATUS",

    /**
     * value: "STATUS_LAYOUT"
     * @const
     */
    "STATUS_LAYOUT": "STATUS_LAYOUT",

    /**
     * value: "STATUS_PROPERTY"
     * @const
     */
    "STATUS_PROPERTY": "STATUS_PROPERTY",

    /**
     * value: "WORKFLOW"
     * @const
     */
    "WORKFLOW": "WORKFLOW",

    /**
     * value: "TRANSITION"
     * @const
     */
    "TRANSITION": "TRANSITION",

    /**
     * value: "TRANSITION_PROPERTY"
     * @const
     */
    "TRANSITION_PROPERTY": "TRANSITION_PROPERTY",

    /**
     * value: "SCOPE"
     * @const
     */
    "SCOPE": "SCOPE",

    /**
     * value: "STATUS_MAPPING"
     * @const
     */
    "STATUS_MAPPING": "STATUS_MAPPING",

    /**
     * value: "TRIGGER"
     * @const
     */
    "TRIGGER": "TRIGGER"
};



export default WorkflowValidationError;

