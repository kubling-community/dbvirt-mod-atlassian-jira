/**
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Commit from './Commit';

/**
 * The Branch model module.
 * @module model/Branch
 * @version 1001.0.0
 */
class Branch {
    /**
     * Constructs a new <code>Branch</code>.
     * Represents a branch in the version control system
     * @alias module:model/Branch
     * @param id {String} The ID of this entity. Will be used for cross entity linking. Must be unique by entity type within a repository, i.e., only one commit can have ID 'X' in repository 'Y'. But adding, e.g., a branch with ID 'X' to repository 'Y' is acceptable. Only alphanumeric characters, and '~.-_', are allowed. Max length is 1024 characters.
     * @param issueKeys {Array.<String>} List of issues keys that this entity is associated with. They must be valid Jira issue keys.
     * @param updateSequenceId {Number} An ID used to apply an ordering to updates for this entity in the case of out-of-order receipt of update requests. This can be any monotonically increasing number. A suggested implementation is to use epoch millis from the provider system, but other alternatives are valid (e.g. a provider could store a counter against each entity and increment that on each update to Jira). Updates for an entity that are received with an updateSqeuenceId lower than what is currently stored will be ignored.
     * @param name {String} The name of the branch. Max length is 512 characters.
     * @param lastCommit {module:model/Commit} 
     * @param url {String} The URL of the branch. Max length is 2000 characters.
     */
    constructor(id, issueKeys, updateSequenceId, name, lastCommit, url) { 
        
        Branch.initialize(this, id, issueKeys, updateSequenceId, name, lastCommit, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, issueKeys, updateSequenceId, name, lastCommit, url) { 
        obj['id'] = id;
        obj['issueKeys'] = issueKeys;
        obj['updateSequenceId'] = updateSequenceId;
        obj['name'] = name;
        obj['lastCommit'] = lastCommit;
        obj['url'] = url;
    }

    /**
     * Constructs a <code>Branch</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Branch} obj Optional instance to populate.
     * @return {module:model/Branch} The populated <code>Branch</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Branch();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('issueKeys')) {
                obj['issueKeys'] = ApiClient.convertToType(data['issueKeys'], ['String']);
            }
            if (data.hasOwnProperty('updateSequenceId')) {
                obj['updateSequenceId'] = ApiClient.convertToType(data['updateSequenceId'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('lastCommit')) {
                obj['lastCommit'] = Commit.constructFromObject(data['lastCommit']);
            }
            if (data.hasOwnProperty('createPullRequestUrl')) {
                obj['createPullRequestUrl'] = ApiClient.convertToType(data['createPullRequestUrl'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Branch</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Branch</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Branch.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['issueKeys'])) {
            throw new Error("Expected the field `issueKeys` to be an array in the JSON data but got " + data['issueKeys']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `lastCommit`
        if (data['lastCommit']) { // data not null
          Commit.validateJSON(data['lastCommit']);
        }
        // ensure the json data is a string
        if (data['createPullRequestUrl'] && !(typeof data['createPullRequestUrl'] === 'string' || data['createPullRequestUrl'] instanceof String)) {
            throw new Error("Expected the field `createPullRequestUrl` to be a primitive type in the JSON string but got " + data['createPullRequestUrl']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

Branch.RequiredProperties = ["id", "issueKeys", "updateSequenceId", "name", "lastCommit", "url"];

/**
 * The ID of this entity. Will be used for cross entity linking. Must be unique by entity type within a repository, i.e., only one commit can have ID 'X' in repository 'Y'. But adding, e.g., a branch with ID 'X' to repository 'Y' is acceptable. Only alphanumeric characters, and '~.-_', are allowed. Max length is 1024 characters.
 * @member {String} id
 */
Branch.prototype['id'] = undefined;

/**
 * List of issues keys that this entity is associated with. They must be valid Jira issue keys.
 * @member {Array.<String>} issueKeys
 */
Branch.prototype['issueKeys'] = undefined;

/**
 * An ID used to apply an ordering to updates for this entity in the case of out-of-order receipt of update requests. This can be any monotonically increasing number. A suggested implementation is to use epoch millis from the provider system, but other alternatives are valid (e.g. a provider could store a counter against each entity and increment that on each update to Jira). Updates for an entity that are received with an updateSqeuenceId lower than what is currently stored will be ignored.
 * @member {Number} updateSequenceId
 */
Branch.prototype['updateSequenceId'] = undefined;

/**
 * The name of the branch. Max length is 512 characters.
 * @member {String} name
 */
Branch.prototype['name'] = undefined;

/**
 * @member {module:model/Commit} lastCommit
 */
Branch.prototype['lastCommit'] = undefined;

/**
 * The URL of the page for creating a pull request from this branch. Max length is 2000 characters.
 * @member {String} createPullRequestUrl
 */
Branch.prototype['createPullRequestUrl'] = undefined;

/**
 * The URL of the branch. Max length is 2000 characters.
 * @member {String} url
 */
Branch.prototype['url'] = undefined;






export default Branch;

