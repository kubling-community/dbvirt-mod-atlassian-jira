/**
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IssueBeanTransitionsInnerToAllOfScopeAllOfProjectAllOfAvatarUrls from './IssueBeanTransitionsInnerToAllOfScopeAllOfProjectAllOfAvatarUrls';
import IssueBeanTransitionsInnerToAllOfScopeAllOfProjectAllOfProjectCategory from './IssueBeanTransitionsInnerToAllOfScopeAllOfProjectAllOfProjectCategory';

/**
 * The IssueBeanTransitionsInnerToAllOfScopeAllOfProject model module.
 * @module model/IssueBeanTransitionsInnerToAllOfScopeAllOfProject
 * @version 1001.0.0
 */
class IssueBeanTransitionsInnerToAllOfScopeAllOfProject {
    /**
     * Constructs a new <code>IssueBeanTransitionsInnerToAllOfScopeAllOfProject</code>.
     * The project the item has scope in.
     * @alias module:model/IssueBeanTransitionsInnerToAllOfScopeAllOfProject
     */
    constructor() { 
        
        IssueBeanTransitionsInnerToAllOfScopeAllOfProject.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IssueBeanTransitionsInnerToAllOfScopeAllOfProject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IssueBeanTransitionsInnerToAllOfScopeAllOfProject} obj Optional instance to populate.
     * @return {module:model/IssueBeanTransitionsInnerToAllOfScopeAllOfProject} The populated <code>IssueBeanTransitionsInnerToAllOfScopeAllOfProject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IssueBeanTransitionsInnerToAllOfScopeAllOfProject();

            if (data.hasOwnProperty('avatarUrls')) {
                obj['avatarUrls'] = IssueBeanTransitionsInnerToAllOfScopeAllOfProjectAllOfAvatarUrls.constructFromObject(data['avatarUrls']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('projectCategory')) {
                obj['projectCategory'] = IssueBeanTransitionsInnerToAllOfScopeAllOfProjectAllOfProjectCategory.constructFromObject(data['projectCategory']);
            }
            if (data.hasOwnProperty('projectTypeKey')) {
                obj['projectTypeKey'] = ApiClient.convertToType(data['projectTypeKey'], 'String');
            }
            if (data.hasOwnProperty('self')) {
                obj['self'] = ApiClient.convertToType(data['self'], 'String');
            }
            if (data.hasOwnProperty('simplified')) {
                obj['simplified'] = ApiClient.convertToType(data['simplified'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IssueBeanTransitionsInnerToAllOfScopeAllOfProject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IssueBeanTransitionsInnerToAllOfScopeAllOfProject</code>.
     */
    static validateJSON(data) {
        // validate the optional field `avatarUrls`
        if (data['avatarUrls']) { // data not null
          IssueBeanTransitionsInnerToAllOfScopeAllOfProjectAllOfAvatarUrls.validateJSON(data['avatarUrls']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `projectCategory`
        if (data['projectCategory']) { // data not null
          IssueBeanTransitionsInnerToAllOfScopeAllOfProjectAllOfProjectCategory.validateJSON(data['projectCategory']);
        }
        // ensure the json data is a string
        if (data['projectTypeKey'] && !(typeof data['projectTypeKey'] === 'string' || data['projectTypeKey'] instanceof String)) {
            throw new Error("Expected the field `projectTypeKey` to be a primitive type in the JSON string but got " + data['projectTypeKey']);
        }
        // ensure the json data is a string
        if (data['self'] && !(typeof data['self'] === 'string' || data['self'] instanceof String)) {
            throw new Error("Expected the field `self` to be a primitive type in the JSON string but got " + data['self']);
        }

        return true;
    }


}



/**
 * @member {module:model/IssueBeanTransitionsInnerToAllOfScopeAllOfProjectAllOfAvatarUrls} avatarUrls
 */
IssueBeanTransitionsInnerToAllOfScopeAllOfProject.prototype['avatarUrls'] = undefined;

/**
 * The ID of the project.
 * @member {String} id
 */
IssueBeanTransitionsInnerToAllOfScopeAllOfProject.prototype['id'] = undefined;

/**
 * The key of the project.
 * @member {String} key
 */
IssueBeanTransitionsInnerToAllOfScopeAllOfProject.prototype['key'] = undefined;

/**
 * The name of the project.
 * @member {String} name
 */
IssueBeanTransitionsInnerToAllOfScopeAllOfProject.prototype['name'] = undefined;

/**
 * @member {module:model/IssueBeanTransitionsInnerToAllOfScopeAllOfProjectAllOfProjectCategory} projectCategory
 */
IssueBeanTransitionsInnerToAllOfScopeAllOfProject.prototype['projectCategory'] = undefined;

/**
 * The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes) of the project.
 * @member {module:model/IssueBeanTransitionsInnerToAllOfScopeAllOfProject.ProjectTypeKeyEnum} projectTypeKey
 */
IssueBeanTransitionsInnerToAllOfScopeAllOfProject.prototype['projectTypeKey'] = undefined;

/**
 * The URL of the project details.
 * @member {String} self
 */
IssueBeanTransitionsInnerToAllOfScopeAllOfProject.prototype['self'] = undefined;

/**
 * Whether or not the project is simplified.
 * @member {Boolean} simplified
 */
IssueBeanTransitionsInnerToAllOfScopeAllOfProject.prototype['simplified'] = undefined;





/**
 * Allowed values for the <code>projectTypeKey</code> property.
 * @enum {String}
 * @readonly
 */
IssueBeanTransitionsInnerToAllOfScopeAllOfProject['ProjectTypeKeyEnum'] = {

    /**
     * value: "software"
     * @const
     */
    "software": "software",

    /**
     * value: "service_desk"
     * @const
     */
    "service_desk": "service_desk",

    /**
     * value: "business"
     * @const
     */
    "business": "business"
};



export default IssueBeanTransitionsInnerToAllOfScopeAllOfProject;

