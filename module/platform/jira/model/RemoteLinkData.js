/**
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RemoteLinkDataAssociationsInner from './RemoteLinkDataAssociationsInner';
import RemoteLinkStatus from './RemoteLinkStatus';

/**
 * The RemoteLinkData model module.
 * @module model/RemoteLinkData
 * @version 1001.0.0
 */
class RemoteLinkData {
    /**
     * Constructs a new <code>RemoteLinkData</code>.
     * Data related to a single Remote Link. 
     * @alias module:model/RemoteLinkData
     * @param id {String} The identifier for the Remote Link. Must be unique for a given Provider. 
     * @param updateSequenceNumber {Number} An ID used to apply an ordering to updates for this Remote Link in the case of out-of-order receipt of update requests.  It must be a monotonically increasing number. For example, epoch time could be one way to generate the `updateSequenceNumber`.  Updates for a Remote Link that is received with an `updateSqeuenceNumber` less than or equal to what is currently stored will be ignored. 
     * @param displayName {String} The human-readable name for the Remote Link.  Will be shown in the UI. 
     * @param url {String} The URL to this Remote Link in your system. 
     * @param type {module:model/RemoteLinkData.TypeEnum} The type of the Remote Link. The current supported types are 'document', 'alert', 'test', 'security', 'logFile', 'prototype', 'coverage', 'bugReport' and 'other' 
     * @param lastUpdated {Date} The last-updated timestamp to present to the user as a summary of when Remote Link was last updated. 
     */
    constructor(id, updateSequenceNumber, displayName, url, type, lastUpdated) { 
        
        RemoteLinkData.initialize(this, id, updateSequenceNumber, displayName, url, type, lastUpdated);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, updateSequenceNumber, displayName, url, type, lastUpdated) { 
        obj['id'] = id;
        obj['updateSequenceNumber'] = updateSequenceNumber;
        obj['displayName'] = displayName;
        obj['url'] = url;
        obj['type'] = type;
        obj['lastUpdated'] = lastUpdated;
    }

    /**
     * Constructs a <code>RemoteLinkData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RemoteLinkData} obj Optional instance to populate.
     * @return {module:model/RemoteLinkData} The populated <code>RemoteLinkData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RemoteLinkData();

            if (data.hasOwnProperty('schemaVersion')) {
                obj['schemaVersion'] = ApiClient.convertToType(data['schemaVersion'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('updateSequenceNumber')) {
                obj['updateSequenceNumber'] = ApiClient.convertToType(data['updateSequenceNumber'], 'Number');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('lastUpdated')) {
                obj['lastUpdated'] = ApiClient.convertToType(data['lastUpdated'], 'Date');
            }
            if (data.hasOwnProperty('associations')) {
                obj['associations'] = ApiClient.convertToType(data['associations'], [RemoteLinkDataAssociationsInner]);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = RemoteLinkStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('actionIds')) {
                obj['actionIds'] = ApiClient.convertToType(data['actionIds'], ['String']);
            }
            if (data.hasOwnProperty('attributeMap')) {
                obj['attributeMap'] = ApiClient.convertToType(data['attributeMap'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RemoteLinkData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RemoteLinkData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RemoteLinkData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['schemaVersion'] && !(typeof data['schemaVersion'] === 'string' || data['schemaVersion'] instanceof String)) {
            throw new Error("Expected the field `schemaVersion` to be a primitive type in the JSON string but got " + data['schemaVersion']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['associations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['associations'])) {
                throw new Error("Expected the field `associations` to be an array in the JSON data but got " + data['associations']);
            }
            // validate the optional field `associations` (array)
            for (const item of data['associations']) {
                RemoteLinkDataAssociationsInner.validateJSON(item);
            };
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          RemoteLinkStatus.validateJSON(data['status']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['actionIds'])) {
            throw new Error("Expected the field `actionIds` to be an array in the JSON data but got " + data['actionIds']);
        }

        return true;
    }


}

RemoteLinkData.RequiredProperties = ["id", "updateSequenceNumber", "displayName", "url", "type", "lastUpdated"];

/**
 * The schema version used for this data.  Placeholder to support potential schema changes in the future. 
 * @member {module:model/RemoteLinkData.SchemaVersionEnum} schemaVersion
 * @default '1.0'
 */
RemoteLinkData.prototype['schemaVersion'] = '1.0';

/**
 * The identifier for the Remote Link. Must be unique for a given Provider. 
 * @member {String} id
 */
RemoteLinkData.prototype['id'] = undefined;

/**
 * An ID used to apply an ordering to updates for this Remote Link in the case of out-of-order receipt of update requests.  It must be a monotonically increasing number. For example, epoch time could be one way to generate the `updateSequenceNumber`.  Updates for a Remote Link that is received with an `updateSqeuenceNumber` less than or equal to what is currently stored will be ignored. 
 * @member {Number} updateSequenceNumber
 */
RemoteLinkData.prototype['updateSequenceNumber'] = undefined;

/**
 * The human-readable name for the Remote Link.  Will be shown in the UI. 
 * @member {String} displayName
 */
RemoteLinkData.prototype['displayName'] = undefined;

/**
 * The URL to this Remote Link in your system. 
 * @member {String} url
 */
RemoteLinkData.prototype['url'] = undefined;

/**
 * The type of the Remote Link. The current supported types are 'document', 'alert', 'test', 'security', 'logFile', 'prototype', 'coverage', 'bugReport' and 'other' 
 * @member {module:model/RemoteLinkData.TypeEnum} type
 */
RemoteLinkData.prototype['type'] = undefined;

/**
 * An optional description to attach to this Remote Link.  This may be anything that makes sense in your system. 
 * @member {String} description
 */
RemoteLinkData.prototype['description'] = undefined;

/**
 * The last-updated timestamp to present to the user as a summary of when Remote Link was last updated. 
 * @member {Date} lastUpdated
 */
RemoteLinkData.prototype['lastUpdated'] = undefined;

/**
 * The entities to associate the Remote Link information with. 
 * @member {Array.<module:model/RemoteLinkDataAssociationsInner>} associations
 */
RemoteLinkData.prototype['associations'] = undefined;

/**
 * @member {module:model/RemoteLinkStatus} status
 */
RemoteLinkData.prototype['status'] = undefined;

/**
 * Optional list of actionIds. They are associated with the actions the provider is able to provide when they registered. Indicates which actions this Remote Link has.  If any actions have a templateUrl that requires string substitution, then `attributeMap` must be passed in. 
 * @member {Array.<String>} actionIds
 */
RemoteLinkData.prototype['actionIds'] = undefined;

/**
 * Map of key/values (string to string mapping). This is used to build the urls for actions from the templateUrl the provider registered their available actions with. 
 * @member {Object.<String, String>} attributeMap
 */
RemoteLinkData.prototype['attributeMap'] = undefined;





/**
 * Allowed values for the <code>schemaVersion</code> property.
 * @enum {String}
 * @readonly
 */
RemoteLinkData['SchemaVersionEnum'] = {

    /**
     * value: "1.0"
     * @const
     */
    "1.0": "1.0"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
RemoteLinkData['TypeEnum'] = {

    /**
     * value: "document"
     * @const
     */
    "document": "document",

    /**
     * value: "alert"
     * @const
     */
    "alert": "alert",

    /**
     * value: "test"
     * @const
     */
    "test": "test",

    /**
     * value: "security"
     * @const
     */
    "security": "security",

    /**
     * value: "logFile"
     * @const
     */
    "logFile": "logFile",

    /**
     * value: "prototype"
     * @const
     */
    "prototype": "prototype",

    /**
     * value: "coverage"
     * @const
     */
    "coverage": "coverage",

    /**
     * value: "bugReport"
     * @const
     */
    "bugReport": "bugReport",

    /**
     * value: "other"
     * @const
     */
    "other": "other"
};



export default RemoteLinkData;

