/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-122db9bd6b089919e6465ce52fdce319d5a9dfb4
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Error from './Error';

/**
 * The Errors model module.
 * @module model/Errors
 * @version 1001.0.0-SNAPSHOT-122db9bd6b089919e6465ce52fdce319d5a9dfb4
 */
class Errors {
    /**
     * Constructs a new <code>Errors</code>.
     * @alias module:model/Errors
     */
    constructor() { 
        
        Errors.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Errors</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Errors} obj Optional instance to populate.
     * @return {module:model/Errors} The populated <code>Errors</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Errors();

            if (data.hasOwnProperty('issueIsSubtask')) {
                obj['issueIsSubtask'] = Error.constructFromObject(data['issueIsSubtask']);
            }
            if (data.hasOwnProperty('issuesInArchivedProjects')) {
                obj['issuesInArchivedProjects'] = Error.constructFromObject(data['issuesInArchivedProjects']);
            }
            if (data.hasOwnProperty('issuesInUnlicensedProjects')) {
                obj['issuesInUnlicensedProjects'] = Error.constructFromObject(data['issuesInUnlicensedProjects']);
            }
            if (data.hasOwnProperty('issuesNotFound')) {
                obj['issuesNotFound'] = Error.constructFromObject(data['issuesNotFound']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Errors</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Errors</code>.
     */
    static validateJSON(data) {
        // validate the optional field `issueIsSubtask`
        if (data['issueIsSubtask']) { // data not null
          Error.validateJSON(data['issueIsSubtask']);
        }
        // validate the optional field `issuesInArchivedProjects`
        if (data['issuesInArchivedProjects']) { // data not null
          Error.validateJSON(data['issuesInArchivedProjects']);
        }
        // validate the optional field `issuesInUnlicensedProjects`
        if (data['issuesInUnlicensedProjects']) { // data not null
          Error.validateJSON(data['issuesInUnlicensedProjects']);
        }
        // validate the optional field `issuesNotFound`
        if (data['issuesNotFound']) { // data not null
          Error.validateJSON(data['issuesNotFound']);
        }

        return true;
    }


}



/**
 * @member {module:model/Error} issueIsSubtask
 */
Errors.prototype['issueIsSubtask'] = undefined;

/**
 * @member {module:model/Error} issuesInArchivedProjects
 */
Errors.prototype['issuesInArchivedProjects'] = undefined;

/**
 * @member {module:model/Error} issuesInUnlicensedProjects
 */
Errors.prototype['issuesInUnlicensedProjects'] = undefined;

/**
 * @member {module:model/Error} issuesNotFound
 */
Errors.prototype['issuesNotFound'] = undefined;






export default Errors;

