/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-122db9bd6b089919e6465ce52fdce319d5a9dfb4
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DocumentVersion from './DocumentVersion';
import MappingsByIssueTypeOverride from './MappingsByIssueTypeOverride';
import MappingsByWorkflow from './MappingsByWorkflow';
import WorkflowSchemeAssociation from './WorkflowSchemeAssociation';

/**
 * The WorkflowSchemeUpdateRequest model module.
 * @module model/WorkflowSchemeUpdateRequest
 * @version 1001.0.0-SNAPSHOT-122db9bd6b089919e6465ce52fdce319d5a9dfb4
 */
class WorkflowSchemeUpdateRequest {
    /**
     * Constructs a new <code>WorkflowSchemeUpdateRequest</code>.
     * The update workflow scheme payload.
     * @alias module:model/WorkflowSchemeUpdateRequest
     * @extends Object
     * @param description {String} The new description for this workflow scheme.
     * @param id {String} The ID of this workflow scheme.
     * @param name {String} The new name for this workflow scheme.
     * @param version {module:model/DocumentVersion} 
     */
    constructor(description, id, name, version) { 
        
        WorkflowSchemeUpdateRequest.initialize(this, description, id, name, version);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, description, id, name, version) { 
        obj['description'] = description;
        obj['id'] = id;
        obj['name'] = name;
        obj['version'] = version;
    }

    /**
     * Constructs a <code>WorkflowSchemeUpdateRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WorkflowSchemeUpdateRequest} obj Optional instance to populate.
     * @return {module:model/WorkflowSchemeUpdateRequest} The populated <code>WorkflowSchemeUpdateRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WorkflowSchemeUpdateRequest();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('defaultWorkflowId')) {
                obj['defaultWorkflowId'] = ApiClient.convertToType(data['defaultWorkflowId'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('statusMappingsByIssueTypeOverride')) {
                obj['statusMappingsByIssueTypeOverride'] = ApiClient.convertToType(data['statusMappingsByIssueTypeOverride'], [MappingsByIssueTypeOverride]);
            }
            if (data.hasOwnProperty('statusMappingsByWorkflows')) {
                obj['statusMappingsByWorkflows'] = ApiClient.convertToType(data['statusMappingsByWorkflows'], [MappingsByWorkflow]);
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = DocumentVersion.constructFromObject(data['version']);
            }
            if (data.hasOwnProperty('workflowsForIssueTypes')) {
                obj['workflowsForIssueTypes'] = ApiClient.convertToType(data['workflowsForIssueTypes'], [WorkflowSchemeAssociation]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WorkflowSchemeUpdateRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WorkflowSchemeUpdateRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WorkflowSchemeUpdateRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['defaultWorkflowId'] && !(typeof data['defaultWorkflowId'] === 'string' || data['defaultWorkflowId'] instanceof String)) {
            throw new Error("Expected the field `defaultWorkflowId` to be a primitive type in the JSON string but got " + data['defaultWorkflowId']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['statusMappingsByIssueTypeOverride']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['statusMappingsByIssueTypeOverride'])) {
                throw new Error("Expected the field `statusMappingsByIssueTypeOverride` to be an array in the JSON data but got " + data['statusMappingsByIssueTypeOverride']);
            }
            // validate the optional field `statusMappingsByIssueTypeOverride` (array)
            for (const item of data['statusMappingsByIssueTypeOverride']) {
                MappingsByIssueTypeOverride.validateJSON(item);
            };
        }
        if (data['statusMappingsByWorkflows']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['statusMappingsByWorkflows'])) {
                throw new Error("Expected the field `statusMappingsByWorkflows` to be an array in the JSON data but got " + data['statusMappingsByWorkflows']);
            }
            // validate the optional field `statusMappingsByWorkflows` (array)
            for (const item of data['statusMappingsByWorkflows']) {
                MappingsByWorkflow.validateJSON(item);
            };
        }
        // validate the optional field `version`
        if (data['version']) { // data not null
          DocumentVersion.validateJSON(data['version']);
        }
        if (data['workflowsForIssueTypes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['workflowsForIssueTypes'])) {
                throw new Error("Expected the field `workflowsForIssueTypes` to be an array in the JSON data but got " + data['workflowsForIssueTypes']);
            }
            // validate the optional field `workflowsForIssueTypes` (array)
            for (const item of data['workflowsForIssueTypes']) {
                WorkflowSchemeAssociation.validateJSON(item);
            };
        }

        return true;
    }


}

WorkflowSchemeUpdateRequest.RequiredProperties = ["description", "id", "name", "version"];

/**
 * The ID of the workflow for issue types without having a mapping defined in this workflow scheme. Only used in global-scoped workflow schemes. If the `defaultWorkflowId` isn't specified, this is set to *Jira Workflow (jira)*.
 * @member {String} defaultWorkflowId
 */
WorkflowSchemeUpdateRequest.prototype['defaultWorkflowId'] = undefined;

/**
 * The new description for this workflow scheme.
 * @member {String} description
 */
WorkflowSchemeUpdateRequest.prototype['description'] = undefined;

/**
 * The ID of this workflow scheme.
 * @member {String} id
 */
WorkflowSchemeUpdateRequest.prototype['id'] = undefined;

/**
 * The new name for this workflow scheme.
 * @member {String} name
 */
WorkflowSchemeUpdateRequest.prototype['name'] = undefined;

/**
 * Overrides, for the selected issue types, any status mappings provided in `statusMappingsByWorkflows`. Status mappings are required when the new workflow for an issue type doesn't contain all statuses that the old workflow has. Status mappings can be provided by a combination of `statusMappingsByWorkflows` and `statusMappingsByIssueTypeOverride`.
 * @member {Array.<module:model/MappingsByIssueTypeOverride>} statusMappingsByIssueTypeOverride
 */
WorkflowSchemeUpdateRequest.prototype['statusMappingsByIssueTypeOverride'] = undefined;

/**
 * The status mappings by workflows. Status mappings are required when the new workflow for an issue type doesn't contain all statuses that the old workflow has. Status mappings can be provided by a combination of `statusMappingsByWorkflows` and `statusMappingsByIssueTypeOverride`.
 * @member {Array.<module:model/MappingsByWorkflow>} statusMappingsByWorkflows
 */
WorkflowSchemeUpdateRequest.prototype['statusMappingsByWorkflows'] = undefined;

/**
 * @member {module:model/DocumentVersion} version
 */
WorkflowSchemeUpdateRequest.prototype['version'] = undefined;

/**
 * Mappings from workflows to issue types.
 * @member {Array.<module:model/WorkflowSchemeAssociation>} workflowsForIssueTypes
 */
WorkflowSchemeUpdateRequest.prototype['workflowsForIssueTypes'] = undefined;






export default WorkflowSchemeUpdateRequest;

