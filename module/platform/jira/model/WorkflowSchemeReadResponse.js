/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-122db9bd6b089919e6465ce52fdce319d5a9dfb4
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DocumentVersion from './DocumentVersion';
import WorkflowMetadataAndIssueTypeRestModel from './WorkflowMetadataAndIssueTypeRestModel';
import WorkflowMetadataRestModel from './WorkflowMetadataRestModel';
import WorkflowScope from './WorkflowScope';

/**
 * The WorkflowSchemeReadResponse model module.
 * @module model/WorkflowSchemeReadResponse
 * @version 1001.0.0-SNAPSHOT-122db9bd6b089919e6465ce52fdce319d5a9dfb4
 */
class WorkflowSchemeReadResponse {
    /**
     * Constructs a new <code>WorkflowSchemeReadResponse</code>.
     * @alias module:model/WorkflowSchemeReadResponse
     * @param id {String} The ID of the workflow scheme.
     * @param name {String} The name of the workflow scheme.
     * @param projectIdsUsingScheme {Array.<String>} The IDs of projects using the workflow scheme.
     * @param scope {module:model/WorkflowScope} 
     * @param version {module:model/DocumentVersion} 
     * @param workflowsForIssueTypes {Array.<module:model/WorkflowMetadataAndIssueTypeRestModel>} Mappings from workflows to issue types.
     */
    constructor(id, name, projectIdsUsingScheme, scope, version, workflowsForIssueTypes) { 
        
        WorkflowSchemeReadResponse.initialize(this, id, name, projectIdsUsingScheme, scope, version, workflowsForIssueTypes);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, name, projectIdsUsingScheme, scope, version, workflowsForIssueTypes) { 
        obj['id'] = id;
        obj['name'] = name;
        obj['projectIdsUsingScheme'] = projectIdsUsingScheme;
        obj['scope'] = scope;
        obj['version'] = version;
        obj['workflowsForIssueTypes'] = workflowsForIssueTypes;
    }

    /**
     * Constructs a <code>WorkflowSchemeReadResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WorkflowSchemeReadResponse} obj Optional instance to populate.
     * @return {module:model/WorkflowSchemeReadResponse} The populated <code>WorkflowSchemeReadResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WorkflowSchemeReadResponse();

            if (data.hasOwnProperty('defaultWorkflow')) {
                obj['defaultWorkflow'] = WorkflowMetadataRestModel.constructFromObject(data['defaultWorkflow']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('projectIdsUsingScheme')) {
                obj['projectIdsUsingScheme'] = ApiClient.convertToType(data['projectIdsUsingScheme'], ['String']);
            }
            if (data.hasOwnProperty('scope')) {
                obj['scope'] = WorkflowScope.constructFromObject(data['scope']);
            }
            if (data.hasOwnProperty('taskId')) {
                obj['taskId'] = ApiClient.convertToType(data['taskId'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = DocumentVersion.constructFromObject(data['version']);
            }
            if (data.hasOwnProperty('workflowsForIssueTypes')) {
                obj['workflowsForIssueTypes'] = ApiClient.convertToType(data['workflowsForIssueTypes'], [WorkflowMetadataAndIssueTypeRestModel]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WorkflowSchemeReadResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WorkflowSchemeReadResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WorkflowSchemeReadResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `defaultWorkflow`
        if (data['defaultWorkflow']) { // data not null
          WorkflowMetadataRestModel.validateJSON(data['defaultWorkflow']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['projectIdsUsingScheme'])) {
            throw new Error("Expected the field `projectIdsUsingScheme` to be an array in the JSON data but got " + data['projectIdsUsingScheme']);
        }
        // validate the optional field `scope`
        if (data['scope']) { // data not null
          WorkflowScope.validateJSON(data['scope']);
        }
        // ensure the json data is a string
        if (data['taskId'] && !(typeof data['taskId'] === 'string' || data['taskId'] instanceof String)) {
            throw new Error("Expected the field `taskId` to be a primitive type in the JSON string but got " + data['taskId']);
        }
        // validate the optional field `version`
        if (data['version']) { // data not null
          DocumentVersion.validateJSON(data['version']);
        }
        if (data['workflowsForIssueTypes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['workflowsForIssueTypes'])) {
                throw new Error("Expected the field `workflowsForIssueTypes` to be an array in the JSON data but got " + data['workflowsForIssueTypes']);
            }
            // validate the optional field `workflowsForIssueTypes` (array)
            for (const item of data['workflowsForIssueTypes']) {
                WorkflowMetadataAndIssueTypeRestModel.validateJSON(item);
            };
        }

        return true;
    }


}

WorkflowSchemeReadResponse.RequiredProperties = ["id", "name", "projectIdsUsingScheme", "scope", "version", "workflowsForIssueTypes"];

/**
 * @member {module:model/WorkflowMetadataRestModel} defaultWorkflow
 */
WorkflowSchemeReadResponse.prototype['defaultWorkflow'] = undefined;

/**
 * The description of the workflow scheme.
 * @member {String} description
 */
WorkflowSchemeReadResponse.prototype['description'] = undefined;

/**
 * The ID of the workflow scheme.
 * @member {String} id
 */
WorkflowSchemeReadResponse.prototype['id'] = undefined;

/**
 * The name of the workflow scheme.
 * @member {String} name
 */
WorkflowSchemeReadResponse.prototype['name'] = undefined;

/**
 * The IDs of projects using the workflow scheme.
 * @member {Array.<String>} projectIdsUsingScheme
 */
WorkflowSchemeReadResponse.prototype['projectIdsUsingScheme'] = undefined;

/**
 * @member {module:model/WorkflowScope} scope
 */
WorkflowSchemeReadResponse.prototype['scope'] = undefined;

/**
 * Indicates if there's an [asynchronous task](#async-operations) for this workflow scheme.
 * @member {String} taskId
 */
WorkflowSchemeReadResponse.prototype['taskId'] = undefined;

/**
 * @member {module:model/DocumentVersion} version
 */
WorkflowSchemeReadResponse.prototype['version'] = undefined;

/**
 * Mappings from workflows to issue types.
 * @member {Array.<module:model/WorkflowMetadataAndIssueTypeRestModel>} workflowsForIssueTypes
 */
WorkflowSchemeReadResponse.prototype['workflowsForIssueTypes'] = undefined;






export default WorkflowSchemeReadResponse;

