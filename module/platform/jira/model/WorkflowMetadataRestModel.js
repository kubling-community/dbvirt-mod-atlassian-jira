/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-122db9bd6b089919e6465ce52fdce319d5a9dfb4
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DocumentVersion from './DocumentVersion';
import SimpleUsage from './SimpleUsage';

/**
 * The WorkflowMetadataRestModel model module.
 * @module model/WorkflowMetadataRestModel
 * @version 1001.0.0-SNAPSHOT-122db9bd6b089919e6465ce52fdce319d5a9dfb4
 */
class WorkflowMetadataRestModel {
    /**
     * Constructs a new <code>WorkflowMetadataRestModel</code>.
     * Workflow metadata and usage detail.
     * @alias module:model/WorkflowMetadataRestModel
     * @param description {String} The description of the workflow.
     * @param id {String} The ID of the workflow.
     * @param name {String} The name of the workflow.
     * @param usage {Array.<module:model/SimpleUsage>} Use the optional `workflows.usages` expand to get additional information about the projects and issue types associated with the workflows in the workflow scheme.
     * @param version {module:model/DocumentVersion} 
     */
    constructor(description, id, name, usage, version) { 
        
        WorkflowMetadataRestModel.initialize(this, description, id, name, usage, version);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, description, id, name, usage, version) { 
        obj['description'] = description;
        obj['id'] = id;
        obj['name'] = name;
        obj['usage'] = usage;
        obj['version'] = version;
    }

    /**
     * Constructs a <code>WorkflowMetadataRestModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WorkflowMetadataRestModel} obj Optional instance to populate.
     * @return {module:model/WorkflowMetadataRestModel} The populated <code>WorkflowMetadataRestModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WorkflowMetadataRestModel();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('usage')) {
                obj['usage'] = ApiClient.convertToType(data['usage'], [SimpleUsage]);
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = DocumentVersion.constructFromObject(data['version']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WorkflowMetadataRestModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WorkflowMetadataRestModel</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WorkflowMetadataRestModel.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['usage']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['usage'])) {
                throw new Error("Expected the field `usage` to be an array in the JSON data but got " + data['usage']);
            }
            // validate the optional field `usage` (array)
            for (const item of data['usage']) {
                SimpleUsage.validateJSON(item);
            };
        }
        // validate the optional field `version`
        if (data['version']) { // data not null
          DocumentVersion.validateJSON(data['version']);
        }

        return true;
    }


}

WorkflowMetadataRestModel.RequiredProperties = ["description", "id", "name", "usage", "version"];

/**
 * The description of the workflow.
 * @member {String} description
 */
WorkflowMetadataRestModel.prototype['description'] = undefined;

/**
 * The ID of the workflow.
 * @member {String} id
 */
WorkflowMetadataRestModel.prototype['id'] = undefined;

/**
 * The name of the workflow.
 * @member {String} name
 */
WorkflowMetadataRestModel.prototype['name'] = undefined;

/**
 * Use the optional `workflows.usages` expand to get additional information about the projects and issue types associated with the workflows in the workflow scheme.
 * @member {Array.<module:model/SimpleUsage>} usage
 */
WorkflowMetadataRestModel.prototype['usage'] = undefined;

/**
 * @member {module:model/DocumentVersion} version
 */
WorkflowMetadataRestModel.prototype['version'] = undefined;






export default WorkflowMetadataRestModel;

