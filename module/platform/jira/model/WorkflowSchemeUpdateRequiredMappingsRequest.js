/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-122db9bd6b089919e6465ce52fdce319d5a9dfb4
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import WorkflowSchemeAssociation from './WorkflowSchemeAssociation';

/**
 * The WorkflowSchemeUpdateRequiredMappingsRequest model module.
 * @module model/WorkflowSchemeUpdateRequiredMappingsRequest
 * @version 1001.0.0-SNAPSHOT-122db9bd6b089919e6465ce52fdce319d5a9dfb4
 */
class WorkflowSchemeUpdateRequiredMappingsRequest {
    /**
     * Constructs a new <code>WorkflowSchemeUpdateRequiredMappingsRequest</code>.
     * The request payload to get the required mappings for updating a workflow scheme.
     * @alias module:model/WorkflowSchemeUpdateRequiredMappingsRequest
     * @param id {String} The ID of the workflow scheme.
     * @param workflowsForIssueTypes {Array.<module:model/WorkflowSchemeAssociation>} The new workflow to issue type mappings for this workflow scheme.
     */
    constructor(id, workflowsForIssueTypes) { 
        
        WorkflowSchemeUpdateRequiredMappingsRequest.initialize(this, id, workflowsForIssueTypes);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, workflowsForIssueTypes) { 
        obj['id'] = id;
        obj['workflowsForIssueTypes'] = workflowsForIssueTypes;
    }

    /**
     * Constructs a <code>WorkflowSchemeUpdateRequiredMappingsRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WorkflowSchemeUpdateRequiredMappingsRequest} obj Optional instance to populate.
     * @return {module:model/WorkflowSchemeUpdateRequiredMappingsRequest} The populated <code>WorkflowSchemeUpdateRequiredMappingsRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WorkflowSchemeUpdateRequiredMappingsRequest();

            if (data.hasOwnProperty('defaultWorkflowId')) {
                obj['defaultWorkflowId'] = ApiClient.convertToType(data['defaultWorkflowId'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('workflowsForIssueTypes')) {
                obj['workflowsForIssueTypes'] = ApiClient.convertToType(data['workflowsForIssueTypes'], [WorkflowSchemeAssociation]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WorkflowSchemeUpdateRequiredMappingsRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WorkflowSchemeUpdateRequiredMappingsRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WorkflowSchemeUpdateRequiredMappingsRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['defaultWorkflowId'] && !(typeof data['defaultWorkflowId'] === 'string' || data['defaultWorkflowId'] instanceof String)) {
            throw new Error("Expected the field `defaultWorkflowId` to be a primitive type in the JSON string but got " + data['defaultWorkflowId']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['workflowsForIssueTypes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['workflowsForIssueTypes'])) {
                throw new Error("Expected the field `workflowsForIssueTypes` to be an array in the JSON data but got " + data['workflowsForIssueTypes']);
            }
            // validate the optional field `workflowsForIssueTypes` (array)
            for (const item of data['workflowsForIssueTypes']) {
                WorkflowSchemeAssociation.validateJSON(item);
            };
        }

        return true;
    }


}

WorkflowSchemeUpdateRequiredMappingsRequest.RequiredProperties = ["id", "workflowsForIssueTypes"];

/**
 * The ID of the new default workflow for this workflow scheme. Only used in global-scoped workflow schemes. If it isn't specified, is set to *Jira Workflow (jira)*.
 * @member {String} defaultWorkflowId
 */
WorkflowSchemeUpdateRequiredMappingsRequest.prototype['defaultWorkflowId'] = undefined;

/**
 * The ID of the workflow scheme.
 * @member {String} id
 */
WorkflowSchemeUpdateRequiredMappingsRequest.prototype['id'] = undefined;

/**
 * The new workflow to issue type mappings for this workflow scheme.
 * @member {Array.<module:model/WorkflowSchemeAssociation>} workflowsForIssueTypes
 */
WorkflowSchemeUpdateRequiredMappingsRequest.prototype['workflowsForIssueTypes'] = undefined;






export default WorkflowSchemeUpdateRequiredMappingsRequest;

