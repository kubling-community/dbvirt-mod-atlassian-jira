/**
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TestInfo model module.
 * @module model/TestInfo
 * @version 1001.0.0
 */
class TestInfo {
    /**
     * Constructs a new <code>TestInfo</code>.
     * Information about tests that were executed during a build. 
     * @alias module:model/TestInfo
     * @param totalNumber {Number} The total number of tests considered during a build. 
     * @param numberPassed {Number} The number of tests that passed during a build. 
     * @param numberFailed {Number} The number of tests that failed during a build. 
     */
    constructor(totalNumber, numberPassed, numberFailed) { 
        
        TestInfo.initialize(this, totalNumber, numberPassed, numberFailed);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, totalNumber, numberPassed, numberFailed) { 
        obj['totalNumber'] = totalNumber;
        obj['numberPassed'] = numberPassed;
        obj['numberFailed'] = numberFailed;
    }

    /**
     * Constructs a <code>TestInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TestInfo} obj Optional instance to populate.
     * @return {module:model/TestInfo} The populated <code>TestInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TestInfo();

            if (data.hasOwnProperty('totalNumber')) {
                obj['totalNumber'] = ApiClient.convertToType(data['totalNumber'], 'Number');
            }
            if (data.hasOwnProperty('numberPassed')) {
                obj['numberPassed'] = ApiClient.convertToType(data['numberPassed'], 'Number');
            }
            if (data.hasOwnProperty('numberFailed')) {
                obj['numberFailed'] = ApiClient.convertToType(data['numberFailed'], 'Number');
            }
            if (data.hasOwnProperty('numberSkipped')) {
                obj['numberSkipped'] = ApiClient.convertToType(data['numberSkipped'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TestInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TestInfo</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TestInfo.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

TestInfo.RequiredProperties = ["totalNumber", "numberPassed", "numberFailed"];

/**
 * The total number of tests considered during a build. 
 * @member {Number} totalNumber
 */
TestInfo.prototype['totalNumber'] = undefined;

/**
 * The number of tests that passed during a build. 
 * @member {Number} numberPassed
 */
TestInfo.prototype['numberPassed'] = undefined;

/**
 * The number of tests that failed during a build. 
 * @member {Number} numberFailed
 */
TestInfo.prototype['numberFailed'] = undefined;

/**
 * The number of tests that were skipped during a build. 
 * @member {Number} numberSkipped
 * @default 0
 */
TestInfo.prototype['numberSkipped'] = 0;






export default TestInfo;

