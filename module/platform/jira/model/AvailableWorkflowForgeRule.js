/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-122db9bd6b089919e6465ce52fdce319d5a9dfb4
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AvailableWorkflowForgeRule model module.
 * @module model/AvailableWorkflowForgeRule
 * @version 1001.0.0-SNAPSHOT-122db9bd6b089919e6465ce52fdce319d5a9dfb4
 */
class AvailableWorkflowForgeRule {
    /**
     * Constructs a new <code>AvailableWorkflowForgeRule</code>.
     * The Forge provided ecosystem rules available.
     * @alias module:model/AvailableWorkflowForgeRule
     */
    constructor() { 
        
        AvailableWorkflowForgeRule.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AvailableWorkflowForgeRule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AvailableWorkflowForgeRule} obj Optional instance to populate.
     * @return {module:model/AvailableWorkflowForgeRule} The populated <code>AvailableWorkflowForgeRule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AvailableWorkflowForgeRule();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('ruleKey')) {
                obj['ruleKey'] = ApiClient.convertToType(data['ruleKey'], 'String');
            }
            if (data.hasOwnProperty('ruleType')) {
                obj['ruleType'] = ApiClient.convertToType(data['ruleType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AvailableWorkflowForgeRule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AvailableWorkflowForgeRule</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['ruleKey'] && !(typeof data['ruleKey'] === 'string' || data['ruleKey'] instanceof String)) {
            throw new Error("Expected the field `ruleKey` to be a primitive type in the JSON string but got " + data['ruleKey']);
        }
        // ensure the json data is a string
        if (data['ruleType'] && !(typeof data['ruleType'] === 'string' || data['ruleType'] instanceof String)) {
            throw new Error("Expected the field `ruleType` to be a primitive type in the JSON string but got " + data['ruleType']);
        }

        return true;
    }


}



/**
 * The rule description.
 * @member {String} description
 */
AvailableWorkflowForgeRule.prototype['description'] = undefined;

/**
 * The unique ARI of the forge rule type.
 * @member {String} id
 */
AvailableWorkflowForgeRule.prototype['id'] = undefined;

/**
 * The rule name.
 * @member {String} name
 */
AvailableWorkflowForgeRule.prototype['name'] = undefined;

/**
 * The rule key.
 * @member {String} ruleKey
 */
AvailableWorkflowForgeRule.prototype['ruleKey'] = undefined;

/**
 * The rule type.
 * @member {module:model/AvailableWorkflowForgeRule.RuleTypeEnum} ruleType
 */
AvailableWorkflowForgeRule.prototype['ruleType'] = undefined;





/**
 * Allowed values for the <code>ruleType</code> property.
 * @enum {String}
 * @readonly
 */
AvailableWorkflowForgeRule['RuleTypeEnum'] = {

    /**
     * value: "Condition"
     * @const
     */
    "Condition": "Condition",

    /**
     * value: "Validator"
     * @const
     */
    "Validator": "Validator",

    /**
     * value: "Function"
     * @const
     */
    "Function": "Function",

    /**
     * value: "Screen"
     * @const
     */
    "Screen": "Screen"
};



export default AvailableWorkflowForgeRule;

