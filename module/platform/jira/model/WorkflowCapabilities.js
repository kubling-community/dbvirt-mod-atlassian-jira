/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-122db9bd6b089919e6465ce52fdce319d5a9dfb4
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AvailableWorkflowConnectRule from './AvailableWorkflowConnectRule';
import AvailableWorkflowForgeRule from './AvailableWorkflowForgeRule';
import AvailableWorkflowSystemRule from './AvailableWorkflowSystemRule';
import AvailableWorkflowTriggers from './AvailableWorkflowTriggers';

/**
 * The WorkflowCapabilities model module.
 * @module model/WorkflowCapabilities
 * @version 1001.0.0-SNAPSHOT-122db9bd6b089919e6465ce52fdce319d5a9dfb4
 */
class WorkflowCapabilities {
    /**
     * Constructs a new <code>WorkflowCapabilities</code>.
     * @alias module:model/WorkflowCapabilities
     */
    constructor() { 
        
        WorkflowCapabilities.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>WorkflowCapabilities</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WorkflowCapabilities} obj Optional instance to populate.
     * @return {module:model/WorkflowCapabilities} The populated <code>WorkflowCapabilities</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WorkflowCapabilities();

            if (data.hasOwnProperty('connectRules')) {
                obj['connectRules'] = ApiClient.convertToType(data['connectRules'], [AvailableWorkflowConnectRule]);
            }
            if (data.hasOwnProperty('editorScope')) {
                obj['editorScope'] = ApiClient.convertToType(data['editorScope'], 'String');
            }
            if (data.hasOwnProperty('forgeRules')) {
                obj['forgeRules'] = ApiClient.convertToType(data['forgeRules'], [AvailableWorkflowForgeRule]);
            }
            if (data.hasOwnProperty('projectTypes')) {
                obj['projectTypes'] = ApiClient.convertToType(data['projectTypes'], ['String']);
            }
            if (data.hasOwnProperty('systemRules')) {
                obj['systemRules'] = ApiClient.convertToType(data['systemRules'], [AvailableWorkflowSystemRule]);
            }
            if (data.hasOwnProperty('triggerRules')) {
                obj['triggerRules'] = ApiClient.convertToType(data['triggerRules'], [AvailableWorkflowTriggers]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WorkflowCapabilities</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WorkflowCapabilities</code>.
     */
    static validateJSON(data) {
        if (data['connectRules']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['connectRules'])) {
                throw new Error("Expected the field `connectRules` to be an array in the JSON data but got " + data['connectRules']);
            }
            // validate the optional field `connectRules` (array)
            for (const item of data['connectRules']) {
                AvailableWorkflowConnectRule.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['editorScope'] && !(typeof data['editorScope'] === 'string' || data['editorScope'] instanceof String)) {
            throw new Error("Expected the field `editorScope` to be a primitive type in the JSON string but got " + data['editorScope']);
        }
        if (data['forgeRules']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['forgeRules'])) {
                throw new Error("Expected the field `forgeRules` to be an array in the JSON data but got " + data['forgeRules']);
            }
            // validate the optional field `forgeRules` (array)
            for (const item of data['forgeRules']) {
                AvailableWorkflowForgeRule.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['projectTypes'])) {
            throw new Error("Expected the field `projectTypes` to be an array in the JSON data but got " + data['projectTypes']);
        }
        if (data['systemRules']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['systemRules'])) {
                throw new Error("Expected the field `systemRules` to be an array in the JSON data but got " + data['systemRules']);
            }
            // validate the optional field `systemRules` (array)
            for (const item of data['systemRules']) {
                AvailableWorkflowSystemRule.validateJSON(item);
            };
        }
        if (data['triggerRules']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['triggerRules'])) {
                throw new Error("Expected the field `triggerRules` to be an array in the JSON data but got " + data['triggerRules']);
            }
            // validate the optional field `triggerRules` (array)
            for (const item of data['triggerRules']) {
                AvailableWorkflowTriggers.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The Connect provided ecosystem rules available.
 * @member {Array.<module:model/AvailableWorkflowConnectRule>} connectRules
 */
WorkflowCapabilities.prototype['connectRules'] = undefined;

/**
 * The scope of the workflow capabilities. `GLOBAL` for company-managed projects and `PROJECT` for team-managed projects.
 * @member {module:model/WorkflowCapabilities.EditorScopeEnum} editorScope
 */
WorkflowCapabilities.prototype['editorScope'] = undefined;

/**
 * The Forge provided ecosystem rules available.
 * @member {Array.<module:model/AvailableWorkflowForgeRule>} forgeRules
 */
WorkflowCapabilities.prototype['forgeRules'] = undefined;

/**
 * The types of projects that this capability set is available for.
 * @member {Array.<module:model/WorkflowCapabilities.ProjectTypesEnum>} projectTypes
 */
WorkflowCapabilities.prototype['projectTypes'] = undefined;

/**
 * The Atlassian provided system rules available.
 * @member {Array.<module:model/AvailableWorkflowSystemRule>} systemRules
 */
WorkflowCapabilities.prototype['systemRules'] = undefined;

/**
 * The trigger rules available.
 * @member {Array.<module:model/AvailableWorkflowTriggers>} triggerRules
 */
WorkflowCapabilities.prototype['triggerRules'] = undefined;





/**
 * Allowed values for the <code>editorScope</code> property.
 * @enum {String}
 * @readonly
 */
WorkflowCapabilities['EditorScopeEnum'] = {

    /**
     * value: "PROJECT"
     * @const
     */
    "PROJECT": "PROJECT",

    /**
     * value: "GLOBAL"
     * @const
     */
    "GLOBAL": "GLOBAL"
};


/**
 * Allowed values for the <code>projectTypes</code> property.
 * @enum {String}
 * @readonly
 */
WorkflowCapabilities['ProjectTypesEnum'] = {

    /**
     * value: "software"
     * @const
     */
    "software": "software",

    /**
     * value: "service_desk"
     * @const
     */
    "service_desk": "service_desk",

    /**
     * value: "product_discovery"
     * @const
     */
    "product_discovery": "product_discovery",

    /**
     * value: "business"
     * @const
     */
    "business": "business",

    /**
     * value: "unknown"
     * @const
     */
    "unknown": "unknown"
};



export default WorkflowCapabilities;

