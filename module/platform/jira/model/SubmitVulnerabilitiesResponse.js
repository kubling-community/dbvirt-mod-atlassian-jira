/**
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ErrorMessage1 from './ErrorMessage1';
import VulnerabilityDetailsAddAssociationsInner from './VulnerabilityDetailsAddAssociationsInner';

/**
 * The SubmitVulnerabilitiesResponse model module.
 * @module model/SubmitVulnerabilitiesResponse
 * @version 1001.0.0
 */
class SubmitVulnerabilitiesResponse {
    /**
     * Constructs a new <code>SubmitVulnerabilitiesResponse</code>.
     * The result of a successful submitVulnerabilities request. 
     * @alias module:model/SubmitVulnerabilitiesResponse
     */
    constructor() { 
        
        SubmitVulnerabilitiesResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SubmitVulnerabilitiesResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SubmitVulnerabilitiesResponse} obj Optional instance to populate.
     * @return {module:model/SubmitVulnerabilitiesResponse} The populated <code>SubmitVulnerabilitiesResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SubmitVulnerabilitiesResponse();

            if (data.hasOwnProperty('acceptedVulnerabilities')) {
                obj['acceptedVulnerabilities'] = ApiClient.convertToType(data['acceptedVulnerabilities'], ['String']);
            }
            if (data.hasOwnProperty('failedVulnerabilities')) {
                obj['failedVulnerabilities'] = ApiClient.convertToType(data['failedVulnerabilities'], {'String': [ErrorMessage1]});
            }
            if (data.hasOwnProperty('unknownAssociations')) {
                obj['unknownAssociations'] = ApiClient.convertToType(data['unknownAssociations'], [VulnerabilityDetailsAddAssociationsInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SubmitVulnerabilitiesResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SubmitVulnerabilitiesResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['acceptedVulnerabilities'])) {
            throw new Error("Expected the field `acceptedVulnerabilities` to be an array in the JSON data but got " + data['acceptedVulnerabilities']);
        }
        if (data['unknownAssociations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['unknownAssociations'])) {
                throw new Error("Expected the field `unknownAssociations` to be an array in the JSON data but got " + data['unknownAssociations']);
            }
            // validate the optional field `unknownAssociations` (array)
            for (const item of data['unknownAssociations']) {
                VulnerabilityDetailsAddAssociationsInner.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The IDs of Vulnerabilities that have been accepted for submission.  A Vulnerability may be rejected if it was only associated with unknown project keys.  Note that a Vulnerability that isn't updated due to it's updateSequenceNumber being out of order is not considered a failed submission. 
 * @member {Array.<String>} acceptedVulnerabilities
 */
SubmitVulnerabilitiesResponse.prototype['acceptedVulnerabilities'] = undefined;

/**
 * Details of Vulnerabilities that have not been accepted for submission, usually due to a problem with the request data.  The object (if present) will be keyed by Vulnerability ID and include any errors associated with that Vulnerability that have prevented it being submitted. 
 * @member {Object.<String, Array.<module:model/ErrorMessage1>>} failedVulnerabilities
 */
SubmitVulnerabilitiesResponse.prototype['failedVulnerabilities'] = undefined;

/**
 * Associations (e.g. Service IDs) that are not known on this Jira instance (if any).  If a Vulnerability has been associated with any other association other than those in this array it will still be stored against those valid associations. If a Vulnerability was only associated with the associations in this array, it is deemed to be invalid and it won't be persisted. 
 * @member {Array.<module:model/VulnerabilityDetailsAddAssociationsInner>} unknownAssociations
 */
SubmitVulnerabilitiesResponse.prototype['unknownAssociations'] = undefined;






export default SubmitVulnerabilitiesResponse;

