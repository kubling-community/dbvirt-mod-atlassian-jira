/**
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FeatureFlagStatus from './FeatureFlagStatus';

/**
 * The FeatureFlagSummary model module.
 * @module model/FeatureFlagSummary
 * @version 1001.0.0
 */
class FeatureFlagSummary {
    /**
     * Constructs a new <code>FeatureFlagSummary</code>.
     * Summary information for a single Feature Flag.  Providers may elect to provide information from a specific environment, or they may choose to &#39;roll up&#39; information from across multiple environments - whatever makes most sense in the Provider system.  This is the summary information that will be presented to the user on e.g. the Jira issue screen. 
     * @alias module:model/FeatureFlagSummary
     * @param status {module:model/FeatureFlagStatus} 
     * @param lastUpdated {Date} The last-updated timestamp to present to the user as a summary of the state of the Feature Flag.  Providers may choose to supply the last-updated timestamp from a specific environment, or the 'most recent' last-updated timestamp across all environments - whatever makes sense in the Provider system.  Expected format is an RFC3339 formatted string. 
     */
    constructor(status, lastUpdated) { 
        
        FeatureFlagSummary.initialize(this, status, lastUpdated);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, status, lastUpdated) { 
        obj['status'] = status;
        obj['lastUpdated'] = lastUpdated;
    }

    /**
     * Constructs a <code>FeatureFlagSummary</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FeatureFlagSummary} obj Optional instance to populate.
     * @return {module:model/FeatureFlagSummary} The populated <code>FeatureFlagSummary</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FeatureFlagSummary();

            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = FeatureFlagStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('lastUpdated')) {
                obj['lastUpdated'] = ApiClient.convertToType(data['lastUpdated'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FeatureFlagSummary</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FeatureFlagSummary</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FeatureFlagSummary.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          FeatureFlagStatus.validateJSON(data['status']);
        }

        return true;
    }


}

FeatureFlagSummary.RequiredProperties = ["status", "lastUpdated"];

/**
 * A URL users can use to link to a summary view of this flag, if appropriate.  This could be any location that makes sense in the Provider system (e.g. if the summary information comes from a specific environment, it might make sense to link the user to the flag in that environment). 
 * @member {String} url
 */
FeatureFlagSummary.prototype['url'] = undefined;

/**
 * @member {module:model/FeatureFlagStatus} status
 */
FeatureFlagSummary.prototype['status'] = undefined;

/**
 * The last-updated timestamp to present to the user as a summary of the state of the Feature Flag.  Providers may choose to supply the last-updated timestamp from a specific environment, or the 'most recent' last-updated timestamp across all environments - whatever makes sense in the Provider system.  Expected format is an RFC3339 formatted string. 
 * @member {Date} lastUpdated
 */
FeatureFlagSummary.prototype['lastUpdated'] = undefined;






export default FeatureFlagSummary;

