/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-122db9bd6b089919e6465ce52fdce319d5a9dfb4
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import WorkflowRuleConfiguration from './WorkflowRuleConfiguration';

/**
 * The ConditionGroupUpdate model module.
 * @module model/ConditionGroupUpdate
 * @version 1001.0.0-SNAPSHOT-122db9bd6b089919e6465ce52fdce319d5a9dfb4
 */
class ConditionGroupUpdate {
    /**
     * Constructs a new <code>ConditionGroupUpdate</code>.
     * The conditions group associated with the transition.
     * @alias module:model/ConditionGroupUpdate
     * @param operation {module:model/ConditionGroupUpdate.OperationEnum} Determines how the conditions in the group are evaluated. Accepts either `ANY` or `ALL`. If `ANY` is used, at least one condition in the group must be true for the group to evaluate to true. If `ALL` is used, all conditions in the group must be true for the group to evaluate to true.
     */
    constructor(operation) { 
        
        ConditionGroupUpdate.initialize(this, operation);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, operation) { 
        obj['operation'] = operation;
    }

    /**
     * Constructs a <code>ConditionGroupUpdate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConditionGroupUpdate} obj Optional instance to populate.
     * @return {module:model/ConditionGroupUpdate} The populated <code>ConditionGroupUpdate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConditionGroupUpdate();

            if (data.hasOwnProperty('conditionGroups')) {
                obj['conditionGroups'] = ApiClient.convertToType(data['conditionGroups'], [ConditionGroupUpdate]);
            }
            if (data.hasOwnProperty('conditions')) {
                obj['conditions'] = ApiClient.convertToType(data['conditions'], [WorkflowRuleConfiguration]);
            }
            if (data.hasOwnProperty('operation')) {
                obj['operation'] = ApiClient.convertToType(data['operation'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConditionGroupUpdate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConditionGroupUpdate</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ConditionGroupUpdate.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['conditionGroups']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['conditionGroups'])) {
                throw new Error("Expected the field `conditionGroups` to be an array in the JSON data but got " + data['conditionGroups']);
            }
            // validate the optional field `conditionGroups` (array)
            for (const item of data['conditionGroups']) {
                ConditionGroupUpdate.validateJSON(item);
            };
        }
        if (data['conditions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['conditions'])) {
                throw new Error("Expected the field `conditions` to be an array in the JSON data but got " + data['conditions']);
            }
            // validate the optional field `conditions` (array)
            for (const item of data['conditions']) {
                WorkflowRuleConfiguration.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['operation'] && !(typeof data['operation'] === 'string' || data['operation'] instanceof String)) {
            throw new Error("Expected the field `operation` to be a primitive type in the JSON string but got " + data['operation']);
        }

        return true;
    }


}

ConditionGroupUpdate.RequiredProperties = ["operation"];

/**
 * The nested conditions of the condition group.
 * @member {Array.<module:model/ConditionGroupUpdate>} conditionGroups
 */
ConditionGroupUpdate.prototype['conditionGroups'] = undefined;

/**
 * The rules for this condition.
 * @member {Array.<module:model/WorkflowRuleConfiguration>} conditions
 */
ConditionGroupUpdate.prototype['conditions'] = undefined;

/**
 * Determines how the conditions in the group are evaluated. Accepts either `ANY` or `ALL`. If `ANY` is used, at least one condition in the group must be true for the group to evaluate to true. If `ALL` is used, all conditions in the group must be true for the group to evaluate to true.
 * @member {module:model/ConditionGroupUpdate.OperationEnum} operation
 */
ConditionGroupUpdate.prototype['operation'] = undefined;





/**
 * Allowed values for the <code>operation</code> property.
 * @enum {String}
 * @readonly
 */
ConditionGroupUpdate['OperationEnum'] = {

    /**
     * value: "ANY"
     * @const
     */
    "ANY": "ANY",

    /**
     * value: "ALL"
     * @const
     */
    "ALL": "ALL"
};



export default ConditionGroupUpdate;

