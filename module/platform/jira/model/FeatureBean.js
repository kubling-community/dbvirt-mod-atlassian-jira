/**
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GetFeaturesForBoard200ResponseFeaturesInnerPermissibleEstimationTypesInner from './GetFeaturesForBoard200ResponseFeaturesInnerPermissibleEstimationTypesInner';

/**
 * The FeatureBean model module.
 * @module model/FeatureBean
 * @version 1001.0.0
 */
class FeatureBean {
    /**
     * Constructs a new <code>FeatureBean</code>.
     * @alias module:model/FeatureBean
     */
    constructor() { 
        
        FeatureBean.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FeatureBean</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FeatureBean} obj Optional instance to populate.
     * @return {module:model/FeatureBean} The populated <code>FeatureBean</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FeatureBean();

            if (data.hasOwnProperty('boardFeature')) {
                obj['boardFeature'] = ApiClient.convertToType(data['boardFeature'], 'String');
            }
            if (data.hasOwnProperty('boardId')) {
                obj['boardId'] = ApiClient.convertToType(data['boardId'], 'Number');
            }
            if (data.hasOwnProperty('featureId')) {
                obj['featureId'] = ApiClient.convertToType(data['featureId'], 'String');
            }
            if (data.hasOwnProperty('featureType')) {
                obj['featureType'] = ApiClient.convertToType(data['featureType'], 'String');
            }
            if (data.hasOwnProperty('imageUri')) {
                obj['imageUri'] = ApiClient.convertToType(data['imageUri'], 'String');
            }
            if (data.hasOwnProperty('learnMoreArticleId')) {
                obj['learnMoreArticleId'] = ApiClient.convertToType(data['learnMoreArticleId'], 'String');
            }
            if (data.hasOwnProperty('learnMoreLink')) {
                obj['learnMoreLink'] = ApiClient.convertToType(data['learnMoreLink'], 'String');
            }
            if (data.hasOwnProperty('localisedDescription')) {
                obj['localisedDescription'] = ApiClient.convertToType(data['localisedDescription'], 'String');
            }
            if (data.hasOwnProperty('localisedGroup')) {
                obj['localisedGroup'] = ApiClient.convertToType(data['localisedGroup'], 'String');
            }
            if (data.hasOwnProperty('localisedName')) {
                obj['localisedName'] = ApiClient.convertToType(data['localisedName'], 'String');
            }
            if (data.hasOwnProperty('permissibleEstimationTypes')) {
                obj['permissibleEstimationTypes'] = ApiClient.convertToType(data['permissibleEstimationTypes'], [GetFeaturesForBoard200ResponseFeaturesInnerPermissibleEstimationTypesInner]);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('toggleLocked')) {
                obj['toggleLocked'] = ApiClient.convertToType(data['toggleLocked'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FeatureBean</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FeatureBean</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['boardFeature'] && !(typeof data['boardFeature'] === 'string' || data['boardFeature'] instanceof String)) {
            throw new Error("Expected the field `boardFeature` to be a primitive type in the JSON string but got " + data['boardFeature']);
        }
        // ensure the json data is a string
        if (data['featureId'] && !(typeof data['featureId'] === 'string' || data['featureId'] instanceof String)) {
            throw new Error("Expected the field `featureId` to be a primitive type in the JSON string but got " + data['featureId']);
        }
        // ensure the json data is a string
        if (data['featureType'] && !(typeof data['featureType'] === 'string' || data['featureType'] instanceof String)) {
            throw new Error("Expected the field `featureType` to be a primitive type in the JSON string but got " + data['featureType']);
        }
        // ensure the json data is a string
        if (data['imageUri'] && !(typeof data['imageUri'] === 'string' || data['imageUri'] instanceof String)) {
            throw new Error("Expected the field `imageUri` to be a primitive type in the JSON string but got " + data['imageUri']);
        }
        // ensure the json data is a string
        if (data['learnMoreArticleId'] && !(typeof data['learnMoreArticleId'] === 'string' || data['learnMoreArticleId'] instanceof String)) {
            throw new Error("Expected the field `learnMoreArticleId` to be a primitive type in the JSON string but got " + data['learnMoreArticleId']);
        }
        // ensure the json data is a string
        if (data['learnMoreLink'] && !(typeof data['learnMoreLink'] === 'string' || data['learnMoreLink'] instanceof String)) {
            throw new Error("Expected the field `learnMoreLink` to be a primitive type in the JSON string but got " + data['learnMoreLink']);
        }
        // ensure the json data is a string
        if (data['localisedDescription'] && !(typeof data['localisedDescription'] === 'string' || data['localisedDescription'] instanceof String)) {
            throw new Error("Expected the field `localisedDescription` to be a primitive type in the JSON string but got " + data['localisedDescription']);
        }
        // ensure the json data is a string
        if (data['localisedGroup'] && !(typeof data['localisedGroup'] === 'string' || data['localisedGroup'] instanceof String)) {
            throw new Error("Expected the field `localisedGroup` to be a primitive type in the JSON string but got " + data['localisedGroup']);
        }
        // ensure the json data is a string
        if (data['localisedName'] && !(typeof data['localisedName'] === 'string' || data['localisedName'] instanceof String)) {
            throw new Error("Expected the field `localisedName` to be a primitive type in the JSON string but got " + data['localisedName']);
        }
        if (data['permissibleEstimationTypes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['permissibleEstimationTypes'])) {
                throw new Error("Expected the field `permissibleEstimationTypes` to be an array in the JSON data but got " + data['permissibleEstimationTypes']);
            }
            // validate the optional field `permissibleEstimationTypes` (array)
            for (const item of data['permissibleEstimationTypes']) {
                GetFeaturesForBoard200ResponseFeaturesInnerPermissibleEstimationTypesInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * @member {module:model/FeatureBean.BoardFeatureEnum} boardFeature
 */
FeatureBean.prototype['boardFeature'] = undefined;

/**
 * @member {Number} boardId
 */
FeatureBean.prototype['boardId'] = undefined;

/**
 * @member {String} featureId
 */
FeatureBean.prototype['featureId'] = undefined;

/**
 * @member {module:model/FeatureBean.FeatureTypeEnum} featureType
 */
FeatureBean.prototype['featureType'] = undefined;

/**
 * @member {String} imageUri
 */
FeatureBean.prototype['imageUri'] = undefined;

/**
 * @member {String} learnMoreArticleId
 */
FeatureBean.prototype['learnMoreArticleId'] = undefined;

/**
 * @member {String} learnMoreLink
 */
FeatureBean.prototype['learnMoreLink'] = undefined;

/**
 * @member {String} localisedDescription
 */
FeatureBean.prototype['localisedDescription'] = undefined;

/**
 * @member {String} localisedGroup
 */
FeatureBean.prototype['localisedGroup'] = undefined;

/**
 * @member {String} localisedName
 */
FeatureBean.prototype['localisedName'] = undefined;

/**
 * @member {Array.<module:model/GetFeaturesForBoard200ResponseFeaturesInnerPermissibleEstimationTypesInner>} permissibleEstimationTypes
 */
FeatureBean.prototype['permissibleEstimationTypes'] = undefined;

/**
 * @member {module:model/FeatureBean.StateEnum} state
 */
FeatureBean.prototype['state'] = undefined;

/**
 * @member {Boolean} toggleLocked
 */
FeatureBean.prototype['toggleLocked'] = undefined;





/**
 * Allowed values for the <code>boardFeature</code> property.
 * @enum {String}
 * @readonly
 */
FeatureBean['BoardFeatureEnum'] = {

    /**
     * value: "SIMPLE_ROADMAP"
     * @const
     */
    "SIMPLE_ROADMAP": "SIMPLE_ROADMAP",

    /**
     * value: "BACKLOG"
     * @const
     */
    "BACKLOG": "BACKLOG",

    /**
     * value: "SPRINTS"
     * @const
     */
    "SPRINTS": "SPRINTS",

    /**
     * value: "CALENDAR"
     * @const
     */
    "CALENDAR": "CALENDAR",

    /**
     * value: "DEVTOOLS"
     * @const
     */
    "DEVTOOLS": "DEVTOOLS",

    /**
     * value: "REPORTS"
     * @const
     */
    "REPORTS": "REPORTS",

    /**
     * value: "ESTIMATION"
     * @const
     */
    "ESTIMATION": "ESTIMATION",

    /**
     * value: "PAGES"
     * @const
     */
    "PAGES": "PAGES",

    /**
     * value: "CODE"
     * @const
     */
    "CODE": "CODE",

    /**
     * value: "SECURITY"
     * @const
     */
    "SECURITY": "SECURITY",

    /**
     * value: "REQUESTS"
     * @const
     */
    "REQUESTS": "REQUESTS",

    /**
     * value: "INCIDENTS"
     * @const
     */
    "INCIDENTS": "INCIDENTS",

    /**
     * value: "RELEASES"
     * @const
     */
    "RELEASES": "RELEASES",

    /**
     * value: "DEPLOYMENTS"
     * @const
     */
    "DEPLOYMENTS": "DEPLOYMENTS",

    /**
     * value: "ISSUE_NAVIGATOR"
     * @const
     */
    "ISSUE_NAVIGATOR": "ISSUE_NAVIGATOR",

    /**
     * value: "ON_CALL_SCHEDULE"
     * @const
     */
    "ON_CALL_SCHEDULE": "ON_CALL_SCHEDULE",

    /**
     * value: "BOARD"
     * @const
     */
    "BOARD": "BOARD",

    /**
     * value: "GOALS"
     * @const
     */
    "GOALS": "GOALS",

    /**
     * value: "LIST_VIEW"
     * @const
     */
    "LIST_VIEW": "LIST_VIEW"
};


/**
 * Allowed values for the <code>featureType</code> property.
 * @enum {String}
 * @readonly
 */
FeatureBean['FeatureTypeEnum'] = {

    /**
     * value: "BASIC"
     * @const
     */
    "BASIC": "BASIC",

    /**
     * value: "ESTIMATION"
     * @const
     */
    "ESTIMATION": "ESTIMATION"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
FeatureBean['StateEnum'] = {

    /**
     * value: "ENABLED"
     * @const
     */
    "ENABLED": "ENABLED",

    /**
     * value: "DISABLED"
     * @const
     */
    "DISABLED": "DISABLED",

    /**
     * value: "COMING_SOON"
     * @const
     */
    "COMING_SOON": "COMING_SOON"
};



export default FeatureBean;

