/**
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ProviderMetadata from './ProviderMetadata';
import Repository from './Repository';

/**
 * The DevInformation model module.
 * @module model/DevInformation
 * @version 1001.0.0
 */
class DevInformation {
    /**
     * Constructs a new <code>DevInformation</code>.
     * Request object for development information push operations, entities are grouped by repository
     * @alias module:model/DevInformation
     * @param repositories {Array.<module:model/Repository>} List of repositories containing development information. Must not contain duplicates. Maximum number of entities across all repositories is 1000.
     */
    constructor(repositories) { 
        
        DevInformation.initialize(this, repositories);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, repositories) { 
        obj['repositories'] = repositories;
    }

    /**
     * Constructs a <code>DevInformation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DevInformation} obj Optional instance to populate.
     * @return {module:model/DevInformation} The populated <code>DevInformation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DevInformation();

            if (data.hasOwnProperty('repositories')) {
                obj['repositories'] = ApiClient.convertToType(data['repositories'], [Repository]);
            }
            if (data.hasOwnProperty('preventTransitions')) {
                obj['preventTransitions'] = ApiClient.convertToType(data['preventTransitions'], 'Boolean');
            }
            if (data.hasOwnProperty('operationType')) {
                obj['operationType'] = ApiClient.convertToType(data['operationType'], 'String');
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = ApiClient.convertToType(data['properties'], {'String': 'String'});
            }
            if (data.hasOwnProperty('providerMetadata')) {
                obj['providerMetadata'] = ProviderMetadata.constructFromObject(data['providerMetadata']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DevInformation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DevInformation</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DevInformation.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['repositories']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['repositories'])) {
                throw new Error("Expected the field `repositories` to be an array in the JSON data but got " + data['repositories']);
            }
            // validate the optional field `repositories` (array)
            for (const item of data['repositories']) {
                Repository.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['operationType'] && !(typeof data['operationType'] === 'string' || data['operationType'] instanceof String)) {
            throw new Error("Expected the field `operationType` to be a primitive type in the JSON string but got " + data['operationType']);
        }
        // validate the optional field `providerMetadata`
        if (data['providerMetadata']) { // data not null
          ProviderMetadata.validateJSON(data['providerMetadata']);
        }

        return true;
    }


}

DevInformation.RequiredProperties = ["repositories"];

/**
 * List of repositories containing development information. Must not contain duplicates. Maximum number of entities across all repositories is 1000.
 * @member {Array.<module:model/Repository>} repositories
 */
DevInformation.prototype['repositories'] = undefined;

/**
 * Flag to prevent automatic issue transitions and smart commits being fired, default is false.
 * @member {Boolean} preventTransitions
 */
DevInformation.prototype['preventTransitions'] = undefined;

/**
 * Indicates the operation being performed by the provider system when sending this data. \"NORMAL\" - Data received during normal operation (e.g. a user pushing a branch). \"BACKFILL\" - Data received while backfilling existing data (e.g. indexing a newly connected account). Default is \"NORMAL\". Please note that \"BACKFILL\" operations have a much higher rate-limiting threshold but are also processed slower in comparison to \"NORMAL\" operations.
 * @member {module:model/DevInformation.OperationTypeEnum} operationType
 */
DevInformation.prototype['operationType'] = undefined;

/**
 * Arbitrary properties to tag the submitted repositories with. These properties can be used for delete operations to e.g. clean up all development information associated with an account in the event that the account is removed from the provider system. Note that these properties will never be returned with repository or entity data. They are not intended for use as metadata to associate with a repository. Maximum length of each key or value is 255 characters. Maximum allowed number of properties key/value pairs is 5. Properties keys cannot start with '_' character. Properties keys cannot contain ':' character. 
 * @member {Object.<String, String>} properties
 */
DevInformation.prototype['properties'] = undefined;

/**
 * @member {module:model/ProviderMetadata} providerMetadata
 */
DevInformation.prototype['providerMetadata'] = undefined;





/**
 * Allowed values for the <code>operationType</code> property.
 * @enum {String}
 * @readonly
 */
DevInformation['OperationTypeEnum'] = {

    /**
     * value: "NORMAL"
     * @const
     */
    "NORMAL": "NORMAL",

    /**
     * value: "BACKFILL"
     * @const
     */
    "BACKFILL": "BACKFILL"
};



export default DevInformation;

