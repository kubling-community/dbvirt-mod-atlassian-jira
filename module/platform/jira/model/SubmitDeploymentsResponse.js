/**
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DeploymentKey from './DeploymentKey';
import RejectedDeployment from './RejectedDeployment';
import SubmitDeploymentsResponseUnknownAssociationsInner from './SubmitDeploymentsResponseUnknownAssociationsInner';

/**
 * The SubmitDeploymentsResponse model module.
 * @module model/SubmitDeploymentsResponse
 * @version 1001.0.0
 */
class SubmitDeploymentsResponse {
    /**
     * Constructs a new <code>SubmitDeploymentsResponse</code>.
     * The result of a successful submitDeployments request. 
     * @alias module:model/SubmitDeploymentsResponse
     */
    constructor() { 
        
        SubmitDeploymentsResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SubmitDeploymentsResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SubmitDeploymentsResponse} obj Optional instance to populate.
     * @return {module:model/SubmitDeploymentsResponse} The populated <code>SubmitDeploymentsResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SubmitDeploymentsResponse();

            if (data.hasOwnProperty('acceptedDeployments')) {
                obj['acceptedDeployments'] = ApiClient.convertToType(data['acceptedDeployments'], [DeploymentKey]);
            }
            if (data.hasOwnProperty('rejectedDeployments')) {
                obj['rejectedDeployments'] = ApiClient.convertToType(data['rejectedDeployments'], [RejectedDeployment]);
            }
            if (data.hasOwnProperty('unknownIssueKeys')) {
                obj['unknownIssueKeys'] = ApiClient.convertToType(data['unknownIssueKeys'], ['String']);
            }
            if (data.hasOwnProperty('unknownAssociations')) {
                obj['unknownAssociations'] = ApiClient.convertToType(data['unknownAssociations'], [SubmitDeploymentsResponseUnknownAssociationsInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SubmitDeploymentsResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SubmitDeploymentsResponse</code>.
     */
    static validateJSON(data) {
        if (data['acceptedDeployments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['acceptedDeployments'])) {
                throw new Error("Expected the field `acceptedDeployments` to be an array in the JSON data but got " + data['acceptedDeployments']);
            }
            // validate the optional field `acceptedDeployments` (array)
            for (const item of data['acceptedDeployments']) {
                DeploymentKey.validateJSON(item);
            };
        }
        if (data['rejectedDeployments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['rejectedDeployments'])) {
                throw new Error("Expected the field `rejectedDeployments` to be an array in the JSON data but got " + data['rejectedDeployments']);
            }
            // validate the optional field `rejectedDeployments` (array)
            for (const item of data['rejectedDeployments']) {
                RejectedDeployment.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['unknownIssueKeys'])) {
            throw new Error("Expected the field `unknownIssueKeys` to be an array in the JSON data but got " + data['unknownIssueKeys']);
        }
        if (data['unknownAssociations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['unknownAssociations'])) {
                throw new Error("Expected the field `unknownAssociations` to be an array in the JSON data but got " + data['unknownAssociations']);
            }
            // validate the optional field `unknownAssociations` (array)
            for (const item of data['unknownAssociations']) {
                SubmitDeploymentsResponseUnknownAssociationsInner.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The keys of deployments that have been accepted for submission. A deployment key is a composite key that consists of `pipelineId`, `environmentId` and `deploymentSequenceNumber`.  A deployment may be rejected if it was only associated with unknown issue keys.  Note that a deployment that isn't updated due to it's updateSequenceNumber being out of order is not considered a failed submission. 
 * @member {Array.<module:model/DeploymentKey>} acceptedDeployments
 */
SubmitDeploymentsResponse.prototype['acceptedDeployments'] = undefined;

/**
 * Details of deployments that have not been accepted for submission, usually due to a problem with the request data.  The object will contain the deployment key and any errors associated with that deployment that have prevented it being submitted. 
 * @member {Array.<module:model/RejectedDeployment>} rejectedDeployments
 */
SubmitDeploymentsResponse.prototype['rejectedDeployments'] = undefined;

/**
 * Issue keys that are not known on this Jira instance (if any).  These may be invalid keys (e.g. `UTF-8` is sometimes incorrectly identified as a Jira issue key), or they may be for projects that no longer exist.  If a deployment has been associated with issue keys other than those in this array it will still be stored against those valid keys. If a deployment was only associated with issue keys deemed to be invalid it won't be persisted. 
 * @member {Array.<String>} unknownIssueKeys
 */
SubmitDeploymentsResponse.prototype['unknownIssueKeys'] = undefined;

/**
 * Associations (e.g. Issue Keys or Service IDs) that are not known on this Jira instance (if any).  These may be invalid keys (e.g. `UTF-8` is sometimes incorrectly identified as a Jira issue key), or they may be for projects that no longer exist.  If a deployment has been associated with any other association other than those in this array it will still be stored against those valid associations. If a deployment was only associated with the associations in this array, it is deemed to be invalid and it won't be persisted. 
 * @member {Array.<module:model/SubmitDeploymentsResponseUnknownAssociationsInner>} unknownAssociations
 */
SubmitDeploymentsResponse.prototype['unknownAssociations'] = undefined;






export default SubmitDeploymentsResponse;

