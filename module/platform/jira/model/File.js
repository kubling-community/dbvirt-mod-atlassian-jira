/**
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The File model module.
 * @module model/File
 * @version 1001.0.0
 */
class File {
    /**
     * Constructs a new <code>File</code>.
     * Describes changes to a file
     * @alias module:model/File
     * @param path {String} The path of the file. Max length is 1024 characters.
     * @param url {String} The URL of this file. Max length is 2000 characters.
     * @param changeType {module:model/File.ChangeTypeEnum} The operation performed on this file
     * @param linesAdded {Number} Number of lines added to the file
     * @param linesRemoved {Number} Number of lines removed from the file
     */
    constructor(path, url, changeType, linesAdded, linesRemoved) { 
        
        File.initialize(this, path, url, changeType, linesAdded, linesRemoved);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, path, url, changeType, linesAdded, linesRemoved) { 
        obj['path'] = path;
        obj['url'] = url;
        obj['changeType'] = changeType;
        obj['linesAdded'] = linesAdded;
        obj['linesRemoved'] = linesRemoved;
    }

    /**
     * Constructs a <code>File</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/File} obj Optional instance to populate.
     * @return {module:model/File} The populated <code>File</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new File();

            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('changeType')) {
                obj['changeType'] = ApiClient.convertToType(data['changeType'], 'String');
            }
            if (data.hasOwnProperty('linesAdded')) {
                obj['linesAdded'] = ApiClient.convertToType(data['linesAdded'], 'Number');
            }
            if (data.hasOwnProperty('linesRemoved')) {
                obj['linesRemoved'] = ApiClient.convertToType(data['linesRemoved'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>File</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>File</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of File.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['changeType'] && !(typeof data['changeType'] === 'string' || data['changeType'] instanceof String)) {
            throw new Error("Expected the field `changeType` to be a primitive type in the JSON string but got " + data['changeType']);
        }

        return true;
    }


}

File.RequiredProperties = ["path", "url", "changeType", "linesAdded", "linesRemoved"];

/**
 * The path of the file. Max length is 1024 characters.
 * @member {String} path
 */
File.prototype['path'] = undefined;

/**
 * The URL of this file. Max length is 2000 characters.
 * @member {String} url
 */
File.prototype['url'] = undefined;

/**
 * The operation performed on this file
 * @member {module:model/File.ChangeTypeEnum} changeType
 */
File.prototype['changeType'] = undefined;

/**
 * Number of lines added to the file
 * @member {Number} linesAdded
 */
File.prototype['linesAdded'] = undefined;

/**
 * Number of lines removed from the file
 * @member {Number} linesRemoved
 */
File.prototype['linesRemoved'] = undefined;





/**
 * Allowed values for the <code>changeType</code> property.
 * @enum {String}
 * @readonly
 */
File['ChangeTypeEnum'] = {

    /**
     * value: "ADDED"
     * @const
     */
    "ADDED": "ADDED",

    /**
     * value: "COPIED"
     * @const
     */
    "COPIED": "COPIED",

    /**
     * value: "DELETED"
     * @const
     */
    "DELETED": "DELETED",

    /**
     * value: "MODIFIED"
     * @const
     */
    "MODIFIED": "MODIFIED",

    /**
     * value: "MOVED"
     * @const
     */
    "MOVED": "MOVED",

    /**
     * value: "UNKNOWN"
     * @const
     */
    "UNKNOWN": "UNKNOWN"
};



export default File;

