/**
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Command from './Command';
import DeploymentDataAssociationsInner from './DeploymentDataAssociationsInner';
import Environment from './Environment';
import Pipeline from './Pipeline';

/**
 * The DeploymentData model module.
 * @module model/DeploymentData
 * @version 1001.0.0
 */
class DeploymentData {
    /**
     * Constructs a new <code>DeploymentData</code>.
     * Data related to a specific deployment in a specific environment that the deployment is present in. Must specify one of &#x60;issueKeys&#x60; or &#x60;associations&#x60;. 
     * @alias module:model/DeploymentData
     * @param deploymentSequenceNumber {Number} This is the identifier for the deployment. It must be unique for the specified pipeline and environment. It must be a monotonically increasing number, as this is used to sequence the deployments. 
     * @param updateSequenceNumber {Number} A number used to apply an order to the updates to the deployment, as identified by the deploymentSequenceNumber, in the case of out-of-order receipt of update requests. It must be a monotonically increasing number. For example, epoch time could be one way to generate the updateSequenceNumber. 
     * @param displayName {String} The human-readable name for the deployment. Will be shown in the UI. 
     * @param url {String} A URL users can use to link to this deployment, in this environment. 
     * @param description {String} A short description of the deployment 
     * @param lastUpdated {Date} The last-updated timestamp to present to the user as a summary of the state of the deployment. 
     * @param state {module:model/DeploymentData.StateEnum} The state of the deployment 
     * @param pipeline {module:model/Pipeline} 
     * @param environment {module:model/Environment} 
     */
    constructor(deploymentSequenceNumber, updateSequenceNumber, displayName, url, description, lastUpdated, state, pipeline, environment) { 
        
        DeploymentData.initialize(this, deploymentSequenceNumber, updateSequenceNumber, displayName, url, description, lastUpdated, state, pipeline, environment);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, deploymentSequenceNumber, updateSequenceNumber, displayName, url, description, lastUpdated, state, pipeline, environment) { 
        obj['deploymentSequenceNumber'] = deploymentSequenceNumber;
        obj['updateSequenceNumber'] = updateSequenceNumber;
        obj['displayName'] = displayName;
        obj['url'] = url;
        obj['description'] = description;
        obj['lastUpdated'] = lastUpdated;
        obj['state'] = state;
        obj['pipeline'] = pipeline;
        obj['environment'] = environment;
    }

    /**
     * Constructs a <code>DeploymentData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeploymentData} obj Optional instance to populate.
     * @return {module:model/DeploymentData} The populated <code>DeploymentData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeploymentData();

            if (data.hasOwnProperty('deploymentSequenceNumber')) {
                obj['deploymentSequenceNumber'] = ApiClient.convertToType(data['deploymentSequenceNumber'], 'Number');
            }
            if (data.hasOwnProperty('updateSequenceNumber')) {
                obj['updateSequenceNumber'] = ApiClient.convertToType(data['updateSequenceNumber'], 'Number');
            }
            if (data.hasOwnProperty('issueKeys')) {
                obj['issueKeys'] = ApiClient.convertToType(data['issueKeys'], ['String']);
            }
            if (data.hasOwnProperty('associations')) {
                obj['associations'] = ApiClient.convertToType(data['associations'], [DeploymentDataAssociationsInner]);
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('lastUpdated')) {
                obj['lastUpdated'] = ApiClient.convertToType(data['lastUpdated'], 'Date');
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'Number');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('pipeline')) {
                obj['pipeline'] = Pipeline.constructFromObject(data['pipeline']);
            }
            if (data.hasOwnProperty('environment')) {
                obj['environment'] = Environment.constructFromObject(data['environment']);
            }
            if (data.hasOwnProperty('commands')) {
                obj['commands'] = ApiClient.convertToType(data['commands'], [Command]);
            }
            if (data.hasOwnProperty('schemaVersion')) {
                obj['schemaVersion'] = ApiClient.convertToType(data['schemaVersion'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeploymentData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeploymentData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DeploymentData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['issueKeys'])) {
            throw new Error("Expected the field `issueKeys` to be an array in the JSON data but got " + data['issueKeys']);
        }
        if (data['associations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['associations'])) {
                throw new Error("Expected the field `associations` to be an array in the JSON data but got " + data['associations']);
            }
            // validate the optional field `associations` (array)
            for (const item of data['associations']) {
                DeploymentDataAssociationsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // validate the optional field `pipeline`
        if (data['pipeline']) { // data not null
          Pipeline.validateJSON(data['pipeline']);
        }
        // validate the optional field `environment`
        if (data['environment']) { // data not null
          Environment.validateJSON(data['environment']);
        }
        if (data['commands']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['commands'])) {
                throw new Error("Expected the field `commands` to be an array in the JSON data but got " + data['commands']);
            }
            // validate the optional field `commands` (array)
            for (const item of data['commands']) {
                Command.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['schemaVersion'] && !(typeof data['schemaVersion'] === 'string' || data['schemaVersion'] instanceof String)) {
            throw new Error("Expected the field `schemaVersion` to be a primitive type in the JSON string but got " + data['schemaVersion']);
        }

        return true;
    }


}

DeploymentData.RequiredProperties = ["deploymentSequenceNumber", "updateSequenceNumber", "displayName", "url", "description", "lastUpdated", "state", "pipeline", "environment"];

/**
 * This is the identifier for the deployment. It must be unique for the specified pipeline and environment. It must be a monotonically increasing number, as this is used to sequence the deployments. 
 * @member {Number} deploymentSequenceNumber
 */
DeploymentData.prototype['deploymentSequenceNumber'] = undefined;

/**
 * A number used to apply an order to the updates to the deployment, as identified by the deploymentSequenceNumber, in the case of out-of-order receipt of update requests. It must be a monotonically increasing number. For example, epoch time could be one way to generate the updateSequenceNumber. 
 * @member {Number} updateSequenceNumber
 */
DeploymentData.prototype['updateSequenceNumber'] = undefined;

/**
 * Deprecated. The Jira issue keys to associate the Deployment information with. Should replace this field with the \"associations\" field to associate Deployment information with issueKeys or other types of associations. 
 * @member {Array.<String>} issueKeys
 */
DeploymentData.prototype['issueKeys'] = undefined;

/**
 * The entities to associate the Deployment information with. It must contain at least one of IssueIdOrKeysAssociation or ServiceIdOrKeysAssociation. 
 * @member {Array.<module:model/DeploymentDataAssociationsInner>} associations
 */
DeploymentData.prototype['associations'] = undefined;

/**
 * The human-readable name for the deployment. Will be shown in the UI. 
 * @member {String} displayName
 */
DeploymentData.prototype['displayName'] = undefined;

/**
 * A URL users can use to link to this deployment, in this environment. 
 * @member {String} url
 */
DeploymentData.prototype['url'] = undefined;

/**
 * A short description of the deployment 
 * @member {String} description
 */
DeploymentData.prototype['description'] = undefined;

/**
 * The last-updated timestamp to present to the user as a summary of the state of the deployment. 
 * @member {Date} lastUpdated
 */
DeploymentData.prototype['lastUpdated'] = undefined;

/**
 * An (optional) additional label that may be displayed with deployment information. Can be used to display version information etc. for the deployment. 
 * @member {String} label
 */
DeploymentData.prototype['label'] = undefined;

/**
 * The duration of the deployment (in seconds). 
 * @member {Number} duration
 */
DeploymentData.prototype['duration'] = undefined;

/**
 * The state of the deployment 
 * @member {module:model/DeploymentData.StateEnum} state
 */
DeploymentData.prototype['state'] = undefined;

/**
 * @member {module:model/Pipeline} pipeline
 */
DeploymentData.prototype['pipeline'] = undefined;

/**
 * @member {module:model/Environment} environment
 */
DeploymentData.prototype['environment'] = undefined;

/**
 * A list of commands to be actioned for this Deployment 
 * @member {Array.<module:model/Command>} commands
 */
DeploymentData.prototype['commands'] = undefined;

/**
 * The DeploymentData schema version used for this deployment data.  Placeholder to support potential schema changes in the future. 
 * @member {module:model/DeploymentData.SchemaVersionEnum} schemaVersion
 * @default '1.0'
 */
DeploymentData.prototype['schemaVersion'] = '1.0';





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
DeploymentData['StateEnum'] = {

    /**
     * value: "unknown"
     * @const
     */
    "unknown": "unknown",

    /**
     * value: "pending"
     * @const
     */
    "pending": "pending",

    /**
     * value: "in_progress"
     * @const
     */
    "in_progress": "in_progress",

    /**
     * value: "cancelled"
     * @const
     */
    "cancelled": "cancelled",

    /**
     * value: "failed"
     * @const
     */
    "failed": "failed",

    /**
     * value: "rolled_back"
     * @const
     */
    "rolled_back": "rolled_back",

    /**
     * value: "successful"
     * @const
     */
    "successful": "successful"
};


/**
 * Allowed values for the <code>schemaVersion</code> property.
 * @enum {String}
 * @readonly
 */
DeploymentData['SchemaVersionEnum'] = {

    /**
     * value: "1.0"
     * @const
     */
    "1.0": "1.0"
};



export default DeploymentData;

