/**
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BuildKey from './BuildKey';
import RejectedBuild from './RejectedBuild';

/**
 * The SubmitBuildsResponse model module.
 * @module model/SubmitBuildsResponse
 * @version 1001.0.0
 */
class SubmitBuildsResponse {
    /**
     * Constructs a new <code>SubmitBuildsResponse</code>.
     * The result of a successful &#x60;submitBuilds&#x60; request. 
     * @alias module:model/SubmitBuildsResponse
     */
    constructor() { 
        
        SubmitBuildsResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SubmitBuildsResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SubmitBuildsResponse} obj Optional instance to populate.
     * @return {module:model/SubmitBuildsResponse} The populated <code>SubmitBuildsResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SubmitBuildsResponse();

            if (data.hasOwnProperty('acceptedBuilds')) {
                obj['acceptedBuilds'] = ApiClient.convertToType(data['acceptedBuilds'], [BuildKey]);
            }
            if (data.hasOwnProperty('rejectedBuilds')) {
                obj['rejectedBuilds'] = ApiClient.convertToType(data['rejectedBuilds'], [RejectedBuild]);
            }
            if (data.hasOwnProperty('unknownIssueKeys')) {
                obj['unknownIssueKeys'] = ApiClient.convertToType(data['unknownIssueKeys'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SubmitBuildsResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SubmitBuildsResponse</code>.
     */
    static validateJSON(data) {
        if (data['acceptedBuilds']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['acceptedBuilds'])) {
                throw new Error("Expected the field `acceptedBuilds` to be an array in the JSON data but got " + data['acceptedBuilds']);
            }
            // validate the optional field `acceptedBuilds` (array)
            for (const item of data['acceptedBuilds']) {
                BuildKey.validateJSON(item);
            };
        }
        if (data['rejectedBuilds']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['rejectedBuilds'])) {
                throw new Error("Expected the field `rejectedBuilds` to be an array in the JSON data but got " + data['rejectedBuilds']);
            }
            // validate the optional field `rejectedBuilds` (array)
            for (const item of data['rejectedBuilds']) {
                RejectedBuild.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['unknownIssueKeys'])) {
            throw new Error("Expected the field `unknownIssueKeys` to be an array in the JSON data but got " + data['unknownIssueKeys']);
        }

        return true;
    }


}



/**
 * The keys of builds that have been accepted for submission. A build key is a composite key that consists of `pipelineId` and `buildNumber`.  A build may be rejected if it was only associated with unknown issue keys, or if the submitted data for that build does not match the required schema.  Note that a build that isn't updated due to it's `updateSequenceNumber` being out of order is not considered a failed submission. 
 * @member {Array.<module:model/BuildKey>} acceptedBuilds
 */
SubmitBuildsResponse.prototype['acceptedBuilds'] = undefined;

/**
 * Details of builds that have not been accepted for submission.  A build may be rejected if it was only associated with unknown issue keys, or if the submitted data for the build does not match the required schema. 
 * @member {Array.<module:model/RejectedBuild>} rejectedBuilds
 */
SubmitBuildsResponse.prototype['rejectedBuilds'] = undefined;

/**
 * Issue keys that are not known on this Jira instance (if any).  These may be invalid keys (e.g. `UTF-8` is sometimes incorrectly identified as a Jira issue key), or they may be for projects that no longer exist.  If a build has been associated with issue keys other than those in this array it will still be stored against those valid keys. If a build was only associated with issue keys deemed to be invalid it won't be persisted. 
 * @member {Array.<String>} unknownIssueKeys
 */
SubmitBuildsResponse.prototype['unknownIssueKeys'] = undefined;






export default SubmitBuildsResponse;

