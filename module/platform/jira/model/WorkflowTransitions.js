/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-122db9bd6b089919e6465ce52fdce319d5a9dfb4
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConditionGroupConfiguration from './ConditionGroupConfiguration';
import WorkflowRuleConfiguration from './WorkflowRuleConfiguration';
import WorkflowStatusAndPort from './WorkflowStatusAndPort';
import WorkflowTransitionLinks from './WorkflowTransitionLinks';
import WorkflowTrigger from './WorkflowTrigger';

/**
 * The WorkflowTransitions model module.
 * @module model/WorkflowTransitions
 * @version 1001.0.0-SNAPSHOT-122db9bd6b089919e6465ce52fdce319d5a9dfb4
 */
class WorkflowTransitions {
    /**
     * Constructs a new <code>WorkflowTransitions</code>.
     * The transitions of the workflow. Note that a transition can have either the deprecated &#x60;to&#x60;/&#x60;from&#x60; fields or the &#x60;toStatusReference&#x60;/&#x60;links&#x60; fields, but never both nor a combination.
     * @alias module:model/WorkflowTransitions
     */
    constructor() { 
        
        WorkflowTransitions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>WorkflowTransitions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WorkflowTransitions} obj Optional instance to populate.
     * @return {module:model/WorkflowTransitions} The populated <code>WorkflowTransitions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WorkflowTransitions();

            if (data.hasOwnProperty('actions')) {
                obj['actions'] = ApiClient.convertToType(data['actions'], [WorkflowRuleConfiguration]);
            }
            if (data.hasOwnProperty('conditions')) {
                obj['conditions'] = ConditionGroupConfiguration.constructFromObject(data['conditions']);
            }
            if (data.hasOwnProperty('customIssueEventId')) {
                obj['customIssueEventId'] = ApiClient.convertToType(data['customIssueEventId'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('from')) {
                obj['from'] = ApiClient.convertToType(data['from'], [WorkflowStatusAndPort]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('links')) {
                obj['links'] = ApiClient.convertToType(data['links'], [WorkflowTransitionLinks]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = ApiClient.convertToType(data['properties'], {'String': 'String'});
            }
            if (data.hasOwnProperty('to')) {
                obj['to'] = WorkflowStatusAndPort.constructFromObject(data['to']);
            }
            if (data.hasOwnProperty('toStatusReference')) {
                obj['toStatusReference'] = ApiClient.convertToType(data['toStatusReference'], 'String');
            }
            if (data.hasOwnProperty('transitionScreen')) {
                obj['transitionScreen'] = WorkflowRuleConfiguration.constructFromObject(data['transitionScreen']);
            }
            if (data.hasOwnProperty('triggers')) {
                obj['triggers'] = ApiClient.convertToType(data['triggers'], [WorkflowTrigger]);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('validators')) {
                obj['validators'] = ApiClient.convertToType(data['validators'], [WorkflowRuleConfiguration]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WorkflowTransitions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WorkflowTransitions</code>.
     */
    static validateJSON(data) {
        if (data['actions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['actions'])) {
                throw new Error("Expected the field `actions` to be an array in the JSON data but got " + data['actions']);
            }
            // validate the optional field `actions` (array)
            for (const item of data['actions']) {
                WorkflowRuleConfiguration.validateJSON(item);
            };
        }
        // validate the optional field `conditions`
        if (data['conditions']) { // data not null
          ConditionGroupConfiguration.validateJSON(data['conditions']);
        }
        // ensure the json data is a string
        if (data['customIssueEventId'] && !(typeof data['customIssueEventId'] === 'string' || data['customIssueEventId'] instanceof String)) {
            throw new Error("Expected the field `customIssueEventId` to be a primitive type in the JSON string but got " + data['customIssueEventId']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['from']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['from'])) {
                throw new Error("Expected the field `from` to be an array in the JSON data but got " + data['from']);
            }
            // validate the optional field `from` (array)
            for (const item of data['from']) {
                WorkflowStatusAndPort.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['links']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['links'])) {
                throw new Error("Expected the field `links` to be an array in the JSON data but got " + data['links']);
            }
            // validate the optional field `links` (array)
            for (const item of data['links']) {
                WorkflowTransitionLinks.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `to`
        if (data['to']) { // data not null
          WorkflowStatusAndPort.validateJSON(data['to']);
        }
        // ensure the json data is a string
        if (data['toStatusReference'] && !(typeof data['toStatusReference'] === 'string' || data['toStatusReference'] instanceof String)) {
            throw new Error("Expected the field `toStatusReference` to be a primitive type in the JSON string but got " + data['toStatusReference']);
        }
        // validate the optional field `transitionScreen`
        if (data['transitionScreen']) { // data not null
          WorkflowRuleConfiguration.validateJSON(data['transitionScreen']);
        }
        if (data['triggers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['triggers'])) {
                throw new Error("Expected the field `triggers` to be an array in the JSON data but got " + data['triggers']);
            }
            // validate the optional field `triggers` (array)
            for (const item of data['triggers']) {
                WorkflowTrigger.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        if (data['validators']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['validators'])) {
                throw new Error("Expected the field `validators` to be an array in the JSON data but got " + data['validators']);
            }
            // validate the optional field `validators` (array)
            for (const item of data['validators']) {
                WorkflowRuleConfiguration.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The post-functions of the transition.
 * @member {Array.<module:model/WorkflowRuleConfiguration>} actions
 */
WorkflowTransitions.prototype['actions'] = undefined;

/**
 * @member {module:model/ConditionGroupConfiguration} conditions
 */
WorkflowTransitions.prototype['conditions'] = undefined;

/**
 * The custom event ID of the transition.
 * @member {String} customIssueEventId
 */
WorkflowTransitions.prototype['customIssueEventId'] = undefined;

/**
 * The description of the transition.
 * @member {String} description
 */
WorkflowTransitions.prototype['description'] = undefined;

/**
 * The statuses and ports that the transition can start from. This field is deprecated - use `toStatusReference`/`links` instead.
 * @member {Array.<module:model/WorkflowStatusAndPort>} from
 */
WorkflowTransitions.prototype['from'] = undefined;

/**
 * The ID of the transition.
 * @member {String} id
 */
WorkflowTransitions.prototype['id'] = undefined;

/**
 * The statuses the transition can start from, and the mapping of ports between the statuses.
 * @member {Array.<module:model/WorkflowTransitionLinks>} links
 */
WorkflowTransitions.prototype['links'] = undefined;

/**
 * The name of the transition.
 * @member {String} name
 */
WorkflowTransitions.prototype['name'] = undefined;

/**
 * The properties of the transition.
 * @member {Object.<String, String>} properties
 */
WorkflowTransitions.prototype['properties'] = undefined;

/**
 * @member {module:model/WorkflowStatusAndPort} to
 */
WorkflowTransitions.prototype['to'] = undefined;

/**
 * The status the transition goes to.
 * @member {String} toStatusReference
 */
WorkflowTransitions.prototype['toStatusReference'] = undefined;

/**
 * @member {module:model/WorkflowRuleConfiguration} transitionScreen
 */
WorkflowTransitions.prototype['transitionScreen'] = undefined;

/**
 * The triggers of the transition.
 * @member {Array.<module:model/WorkflowTrigger>} triggers
 */
WorkflowTransitions.prototype['triggers'] = undefined;

/**
 * The transition type.
 * @member {module:model/WorkflowTransitions.TypeEnum} type
 */
WorkflowTransitions.prototype['type'] = undefined;

/**
 * The validators of the transition.
 * @member {Array.<module:model/WorkflowRuleConfiguration>} validators
 */
WorkflowTransitions.prototype['validators'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
WorkflowTransitions['TypeEnum'] = {

    /**
     * value: "INITIAL"
     * @const
     */
    "INITIAL": "INITIAL",

    /**
     * value: "GLOBAL"
     * @const
     */
    "GLOBAL": "GLOBAL",

    /**
     * value: "DIRECTED"
     * @const
     */
    "DIRECTED": "DIRECTED"
};



export default WorkflowTransitions;

