/**
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ErrorMessage from './ErrorMessage';

/**
 * The ErrorMessages model module.
 * @module model/ErrorMessages
 * @version 1001.0.0
 */
class ErrorMessages {
    /**
     * Constructs a new <code>ErrorMessages</code>.
     * A response returned in the case of an error.
     * @alias module:model/ErrorMessages
     * @param errorMessages {Array.<module:model/ErrorMessage>} List of errors occurred.
     */
    constructor(errorMessages) { 
        
        ErrorMessages.initialize(this, errorMessages);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, errorMessages) { 
        obj['errorMessages'] = errorMessages;
    }

    /**
     * Constructs a <code>ErrorMessages</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ErrorMessages} obj Optional instance to populate.
     * @return {module:model/ErrorMessages} The populated <code>ErrorMessages</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ErrorMessages();

            if (data.hasOwnProperty('errorMessages')) {
                obj['errorMessages'] = ApiClient.convertToType(data['errorMessages'], [ErrorMessage]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ErrorMessages</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ErrorMessages</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ErrorMessages.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['errorMessages']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['errorMessages'])) {
                throw new Error("Expected the field `errorMessages` to be an array in the JSON data but got " + data['errorMessages']);
            }
            // validate the optional field `errorMessages` (array)
            for (const item of data['errorMessages']) {
                ErrorMessage.validateJSON(item);
            };
        }

        return true;
    }


}

ErrorMessages.RequiredProperties = ["errorMessages"];

/**
 * List of errors occurred.
 * @member {Array.<module:model/ErrorMessage>} errorMessages
 */
ErrorMessages.prototype['errorMessages'] = undefined;






export default ErrorMessages;

