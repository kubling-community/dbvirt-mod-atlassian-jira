/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-122db9bd6b089919e6465ce52fdce319d5a9dfb4
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ScreenTypes model module.
 * @module model/ScreenTypes
 * @version 1001.0.0-SNAPSHOT-122db9bd6b089919e6465ce52fdce319d5a9dfb4
 */
class ScreenTypes {
    /**
     * Constructs a new <code>ScreenTypes</code>.
     * The IDs of the screens for the screen types of the screen scheme.
     * @alias module:model/ScreenTypes
     * @param _default {Number} The ID of the default screen. Required when creating a screen scheme.
     */
    constructor(_default) { 
        
        ScreenTypes.initialize(this, _default);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, _default) { 
        obj['default'] = _default;
    }

    /**
     * Constructs a <code>ScreenTypes</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ScreenTypes} obj Optional instance to populate.
     * @return {module:model/ScreenTypes} The populated <code>ScreenTypes</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ScreenTypes();

            if (data.hasOwnProperty('create')) {
                obj['create'] = ApiClient.convertToType(data['create'], 'Number');
            }
            if (data.hasOwnProperty('default')) {
                obj['default'] = ApiClient.convertToType(data['default'], 'Number');
            }
            if (data.hasOwnProperty('edit')) {
                obj['edit'] = ApiClient.convertToType(data['edit'], 'Number');
            }
            if (data.hasOwnProperty('view')) {
                obj['view'] = ApiClient.convertToType(data['view'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ScreenTypes</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ScreenTypes</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ScreenTypes.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

ScreenTypes.RequiredProperties = ["default"];

/**
 * The ID of the create screen.
 * @member {Number} create
 */
ScreenTypes.prototype['create'] = undefined;

/**
 * The ID of the default screen. Required when creating a screen scheme.
 * @member {Number} default
 */
ScreenTypes.prototype['default'] = undefined;

/**
 * The ID of the edit screen.
 * @member {Number} edit
 */
ScreenTypes.prototype['edit'] = undefined;

/**
 * The ID of the view screen.
 * @member {Number} view
 */
ScreenTypes.prototype['view'] = undefined;






export default ScreenTypes;

