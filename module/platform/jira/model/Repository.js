/**
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Branch from './Branch';
import Commit from './Commit';
import PullRequest from './PullRequest';

/**
 * The Repository model module.
 * @module model/Repository
 * @version 1001.0.0
 */
class Repository {
    /**
     * Constructs a new <code>Repository</code>.
     * Represents a repository, containing development information such as commits, pull requests, and branches.
     * @alias module:model/Repository
     * @param name {String} The name of this repository. Max length is 255 characters.
     * @param url {String} The URL of this repository. Max length is 2000 characters.
     * @param id {String} The ID of this entity. Will be used for cross entity linking. Must be unique by entity type within a repository, i.e., only one commit can have ID 'X' in repository 'Y'. But adding, e.g., a branch with ID 'X' to repository 'Y' is acceptable. Only alphanumeric characters, and '~.-_', are allowed. Max length is 1024 characters.
     * @param updateSequenceId {Number}  An ID used to apply an ordering to updates for this entity in the case of out-of-order receipt of update requests. This can be any monotonically increasing number. A suggested implementation is to use epoch millis from the provider system, but other alternatives are valid (e.g. a provider could store a counter against each entity and increment that on each update to Jira). Updates for an entity that are received with an updateSqeuenceId lower than what is currently stored will be ignored.
     */
    constructor(name, url, id, updateSequenceId) { 
        
        Repository.initialize(this, name, url, id, updateSequenceId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, url, id, updateSequenceId) { 
        obj['name'] = name;
        obj['url'] = url;
        obj['id'] = id;
        obj['updateSequenceId'] = updateSequenceId;
    }

    /**
     * Constructs a <code>Repository</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Repository} obj Optional instance to populate.
     * @return {module:model/Repository} The populated <code>Repository</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Repository();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('forkOf')) {
                obj['forkOf'] = ApiClient.convertToType(data['forkOf'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('commits')) {
                obj['commits'] = ApiClient.convertToType(data['commits'], [Commit]);
            }
            if (data.hasOwnProperty('branches')) {
                obj['branches'] = ApiClient.convertToType(data['branches'], [Branch]);
            }
            if (data.hasOwnProperty('pullRequests')) {
                obj['pullRequests'] = ApiClient.convertToType(data['pullRequests'], [PullRequest]);
            }
            if (data.hasOwnProperty('avatar')) {
                obj['avatar'] = ApiClient.convertToType(data['avatar'], 'String');
            }
            if (data.hasOwnProperty('avatarDescription')) {
                obj['avatarDescription'] = ApiClient.convertToType(data['avatarDescription'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('updateSequenceId')) {
                obj['updateSequenceId'] = ApiClient.convertToType(data['updateSequenceId'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Repository</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Repository</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Repository.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['forkOf'] && !(typeof data['forkOf'] === 'string' || data['forkOf'] instanceof String)) {
            throw new Error("Expected the field `forkOf` to be a primitive type in the JSON string but got " + data['forkOf']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        if (data['commits']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['commits'])) {
                throw new Error("Expected the field `commits` to be an array in the JSON data but got " + data['commits']);
            }
            // validate the optional field `commits` (array)
            for (const item of data['commits']) {
                Commit.validateJSON(item);
            };
        }
        if (data['branches']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['branches'])) {
                throw new Error("Expected the field `branches` to be an array in the JSON data but got " + data['branches']);
            }
            // validate the optional field `branches` (array)
            for (const item of data['branches']) {
                Branch.validateJSON(item);
            };
        }
        if (data['pullRequests']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['pullRequests'])) {
                throw new Error("Expected the field `pullRequests` to be an array in the JSON data but got " + data['pullRequests']);
            }
            // validate the optional field `pullRequests` (array)
            for (const item of data['pullRequests']) {
                PullRequest.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['avatar'] && !(typeof data['avatar'] === 'string' || data['avatar'] instanceof String)) {
            throw new Error("Expected the field `avatar` to be a primitive type in the JSON string but got " + data['avatar']);
        }
        // ensure the json data is a string
        if (data['avatarDescription'] && !(typeof data['avatarDescription'] === 'string' || data['avatarDescription'] instanceof String)) {
            throw new Error("Expected the field `avatarDescription` to be a primitive type in the JSON string but got " + data['avatarDescription']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }

        return true;
    }


}

Repository.RequiredProperties = ["name", "url", "id", "updateSequenceId"];

/**
 * The name of this repository. Max length is 255 characters.
 * @member {String} name
 */
Repository.prototype['name'] = undefined;

/**
 * Description of this repository. Max length is 1024 characters.
 * @member {String} description
 */
Repository.prototype['description'] = undefined;

/**
 * The ID of the repository this repository was forked from, if it's a fork. Max length is 1024 characters.
 * @member {String} forkOf
 */
Repository.prototype['forkOf'] = undefined;

/**
 * The URL of this repository. Max length is 2000 characters.
 * @member {String} url
 */
Repository.prototype['url'] = undefined;

/**
 * List of commits to update in this repository. Must not contain duplicate entity IDs. Maximum number of commits is 400
 * @member {Array.<module:model/Commit>} commits
 */
Repository.prototype['commits'] = undefined;

/**
 * List of branches to update in this repository. Must not contain duplicate entity IDs. Maximum number of branches is 400.
 * @member {Array.<module:model/Branch>} branches
 */
Repository.prototype['branches'] = undefined;

/**
 * List of pull requests to update in this repository. Must not contain duplicate entity IDs. Maximum number of pull requests is 400
 * @member {Array.<module:model/PullRequest>} pullRequests
 */
Repository.prototype['pullRequests'] = undefined;

/**
 * The URL of the avatar for this repository. Max length is 2000 characters.
 * @member {String} avatar
 */
Repository.prototype['avatar'] = undefined;

/**
 * Description of the avatar for this repository. Max length is 1024 characters.
 * @member {String} avatarDescription
 */
Repository.prototype['avatarDescription'] = undefined;

/**
 * The ID of this entity. Will be used for cross entity linking. Must be unique by entity type within a repository, i.e., only one commit can have ID 'X' in repository 'Y'. But adding, e.g., a branch with ID 'X' to repository 'Y' is acceptable. Only alphanumeric characters, and '~.-_', are allowed. Max length is 1024 characters.
 * @member {String} id
 */
Repository.prototype['id'] = undefined;

/**
 *  An ID used to apply an ordering to updates for this entity in the case of out-of-order receipt of update requests. This can be any monotonically increasing number. A suggested implementation is to use epoch millis from the provider system, but other alternatives are valid (e.g. a provider could store a counter against each entity and increment that on each update to Jira). Updates for an entity that are received with an updateSqeuenceId lower than what is currently stored will be ignored.
 * @member {Number} updateSequenceId
 */
Repository.prototype['updateSequenceId'] = undefined;






export default Repository;

