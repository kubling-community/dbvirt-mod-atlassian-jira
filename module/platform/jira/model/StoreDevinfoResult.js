/**
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import StoreDevinfoResultAcceptedDevinfoEntitiesValue from './StoreDevinfoResultAcceptedDevinfoEntitiesValue';
import StoreDevinfoResultFailedDevinfoEntitiesValue from './StoreDevinfoResultFailedDevinfoEntitiesValue';

/**
 * The StoreDevinfoResult model module.
 * @module model/StoreDevinfoResult
 * @version 1001.0.0
 */
class StoreDevinfoResult {
    /**
     * Constructs a new <code>StoreDevinfoResult</code>.
     * The result of a successful store development information request
     * @alias module:model/StoreDevinfoResult
     */
    constructor() { 
        
        StoreDevinfoResult.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StoreDevinfoResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StoreDevinfoResult} obj Optional instance to populate.
     * @return {module:model/StoreDevinfoResult} The populated <code>StoreDevinfoResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StoreDevinfoResult();

            if (data.hasOwnProperty('acceptedDevinfoEntities')) {
                obj['acceptedDevinfoEntities'] = ApiClient.convertToType(data['acceptedDevinfoEntities'], {'String': StoreDevinfoResultAcceptedDevinfoEntitiesValue});
            }
            if (data.hasOwnProperty('failedDevinfoEntities')) {
                obj['failedDevinfoEntities'] = ApiClient.convertToType(data['failedDevinfoEntities'], {'String': StoreDevinfoResultFailedDevinfoEntitiesValue});
            }
            if (data.hasOwnProperty('unknownIssueKeys')) {
                obj['unknownIssueKeys'] = ApiClient.convertToType(data['unknownIssueKeys'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StoreDevinfoResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StoreDevinfoResult</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['unknownIssueKeys'])) {
            throw new Error("Expected the field `unknownIssueKeys` to be an array in the JSON data but got " + data['unknownIssueKeys']);
        }

        return true;
    }


}



/**
 * The IDs of devinfo entities that have been accepted for submission grouped by their repository IDs. Note that a devinfo entity that isn't updated due to it's updateSequenceId being out of order is not considered a failed submission.
 * @member {Object.<String, module:model/StoreDevinfoResultAcceptedDevinfoEntitiesValue>} acceptedDevinfoEntities
 */
StoreDevinfoResult.prototype['acceptedDevinfoEntities'] = undefined;

/**
 * IDs of devinfo entities that have not been accepted for submission and caused error descriptions, usually due to a problem with the request data. The entities (if present) will be grouped by their repository id and type. Entity IDs are listed with errors associated with that devinfo entity that have prevented it being submitted. 
 * @member {Object.<String, module:model/StoreDevinfoResultFailedDevinfoEntitiesValue>} failedDevinfoEntities
 */
StoreDevinfoResult.prototype['failedDevinfoEntities'] = undefined;

/**
 * Issue keys that are not known on this Jira instance (if any). These may be invalid keys (e.g. `UTF-8` is sometimes incorrectly identified as a Jira issue key), or they may be for projects that no longer exist. If a devinfo entity has been associated with issue keys other than those in this array it will still be stored against those valid keys. 
 * @member {Array.<String>} unknownIssueKeys
 */
StoreDevinfoResult.prototype['unknownIssueKeys'] = undefined;






export default StoreDevinfoResult;

