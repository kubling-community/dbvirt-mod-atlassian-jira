/**
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Reviewer model module.
 * @module model/Reviewer
 * @version 1001.0.0
 */
class Reviewer {
    /**
     * Constructs a new <code>Reviewer</code>.
     * The reviewer of a pull request
     * @alias module:model/Reviewer
     */
    constructor() { 
        
        Reviewer.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Reviewer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Reviewer} obj Optional instance to populate.
     * @return {module:model/Reviewer} The populated <code>Reviewer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Reviewer();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('approvalStatus')) {
                obj['approvalStatus'] = ApiClient.convertToType(data['approvalStatus'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('avatar')) {
                obj['avatar'] = ApiClient.convertToType(data['avatar'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Reviewer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Reviewer</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['approvalStatus'] && !(typeof data['approvalStatus'] === 'string' || data['approvalStatus'] instanceof String)) {
            throw new Error("Expected the field `approvalStatus` to be a primitive type in the JSON string but got " + data['approvalStatus']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['avatar'] && !(typeof data['avatar'] === 'string' || data['avatar'] instanceof String)) {
            throw new Error("Expected the field `avatar` to be a primitive type in the JSON string but got " + data['avatar']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['accountId'] && !(typeof data['accountId'] === 'string' || data['accountId'] instanceof String)) {
            throw new Error("Expected the field `accountId` to be a primitive type in the JSON string but got " + data['accountId']);
        }

        return true;
    }


}



/**
 * Deprecated. The name of this reviewer. Max length is 255 characters.
 * @member {String} name
 */
Reviewer.prototype['name'] = undefined;

/**
 * The approval status of this reviewer, default is UNAPPROVED.
 * @member {module:model/Reviewer.ApprovalStatusEnum} approvalStatus
 */
Reviewer.prototype['approvalStatus'] = undefined;

/**
 * Deprecated. The URL of the profile for this reviewer. Max length is 2000 characters.
 * @member {String} url
 */
Reviewer.prototype['url'] = undefined;

/**
 * Deprecated. The URL of the avatar for this reviewer. Max length is 2000 characters.
 * @member {String} avatar
 */
Reviewer.prototype['avatar'] = undefined;

/**
 * The email address of this reviewer. Max length is 254 characters.
 * @member {String} email
 */
Reviewer.prototype['email'] = undefined;

/**
 * The Atlassian Account ID (AAID) of this reviewer. Max length is 128 characters.
 * @member {String} accountId
 */
Reviewer.prototype['accountId'] = undefined;





/**
 * Allowed values for the <code>approvalStatus</code> property.
 * @enum {String}
 * @readonly
 */
Reviewer['ApprovalStatusEnum'] = {

    /**
     * value: "APPROVED"
     * @const
     */
    "APPROVED": "APPROVED",

    /**
     * value: "UNAPPROVED"
     * @const
     */
    "UNAPPROVED": "UNAPPROVED"
};



export default Reviewer;

