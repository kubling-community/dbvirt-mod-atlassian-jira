/**
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FeatureFlagRollout from './FeatureFlagRollout';

/**
 * The FeatureFlagStatus model module.
 * @module model/FeatureFlagStatus
 * @version 1001.0.0
 */
class FeatureFlagStatus {
    /**
     * Constructs a new <code>FeatureFlagStatus</code>.
     * Status information about a single Feature Flag. 
     * @alias module:model/FeatureFlagStatus
     * @param enabled {Boolean} Whether the Feature Flag is enabled in the given environment (or in summary).  Enabled may imply a partial rollout, which can be described using the 'rollout' field. 
     */
    constructor(enabled) { 
        
        FeatureFlagStatus.initialize(this, enabled);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, enabled) { 
        obj['enabled'] = enabled;
    }

    /**
     * Constructs a <code>FeatureFlagStatus</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FeatureFlagStatus} obj Optional instance to populate.
     * @return {module:model/FeatureFlagStatus} The populated <code>FeatureFlagStatus</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FeatureFlagStatus();

            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('defaultValue')) {
                obj['defaultValue'] = ApiClient.convertToType(data['defaultValue'], 'String');
            }
            if (data.hasOwnProperty('rollout')) {
                obj['rollout'] = FeatureFlagRollout.constructFromObject(data['rollout']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FeatureFlagStatus</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FeatureFlagStatus</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FeatureFlagStatus.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['defaultValue'] && !(typeof data['defaultValue'] === 'string' || data['defaultValue'] instanceof String)) {
            throw new Error("Expected the field `defaultValue` to be a primitive type in the JSON string but got " + data['defaultValue']);
        }
        // validate the optional field `rollout`
        if (data['rollout']) { // data not null
          FeatureFlagRollout.validateJSON(data['rollout']);
        }

        return true;
    }


}

FeatureFlagStatus.RequiredProperties = ["enabled"];

/**
 * Whether the Feature Flag is enabled in the given environment (or in summary).  Enabled may imply a partial rollout, which can be described using the 'rollout' field. 
 * @member {Boolean} enabled
 */
FeatureFlagStatus.prototype['enabled'] = undefined;

/**
 * The value served by this Feature Flag when it is disabled. This could be the actual value or an alias, as appropriate.  This value may be presented to the user in the UI. 
 * @member {String} defaultValue
 */
FeatureFlagStatus.prototype['defaultValue'] = undefined;

/**
 * @member {module:model/FeatureFlagRollout} rollout
 */
FeatureFlagStatus.prototype['rollout'] = undefined;






export default FeatureFlagStatus;

