/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-122db9bd6b089919e6465ce52fdce319d5a9dfb4
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The VersionApprover model module.
 * @module model/VersionApprover
 * @version 1001.0.0-SNAPSHOT-122db9bd6b089919e6465ce52fdce319d5a9dfb4
 */
class VersionApprover {
    /**
     * Constructs a new <code>VersionApprover</code>.
     * Contains details about a version approver.
     * @alias module:model/VersionApprover
     * @extends Object
     */
    constructor() { 
        
        VersionApprover.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VersionApprover</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VersionApprover} obj Optional instance to populate.
     * @return {module:model/VersionApprover} The populated <code>VersionApprover</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VersionApprover();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'String');
            }
            if (data.hasOwnProperty('declineReason')) {
                obj['declineReason'] = ApiClient.convertToType(data['declineReason'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VersionApprover</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VersionApprover</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accountId'] && !(typeof data['accountId'] === 'string' || data['accountId'] instanceof String)) {
            throw new Error("Expected the field `accountId` to be a primitive type in the JSON string but got " + data['accountId']);
        }
        // ensure the json data is a string
        if (data['declineReason'] && !(typeof data['declineReason'] === 'string' || data['declineReason'] instanceof String)) {
            throw new Error("Expected the field `declineReason` to be a primitive type in the JSON string but got " + data['declineReason']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * The Atlassian account ID of the approver.
 * @member {String} accountId
 */
VersionApprover.prototype['accountId'] = undefined;

/**
 * A description of why the user is declining the approval.
 * @member {String} declineReason
 */
VersionApprover.prototype['declineReason'] = undefined;

/**
 * A description of what the user is approving within the specified version.
 * @member {String} description
 */
VersionApprover.prototype['description'] = undefined;

/**
 * The status of the approval, which can be *PENDING*, *APPROVED*, or *DECLINED*
 * @member {String} status
 */
VersionApprover.prototype['status'] = undefined;






export default VersionApprover;

