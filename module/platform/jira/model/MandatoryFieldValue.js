/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-122db9bd6b089919e6465ce52fdce319d5a9dfb4
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MandatoryFieldValue model module.
 * @module model/MandatoryFieldValue
 * @version 1001.0.0-SNAPSHOT-122db9bd6b089919e6465ce52fdce319d5a9dfb4
 */
class MandatoryFieldValue {
    /**
     * Constructs a new <code>MandatoryFieldValue</code>.
     * List of string of inputs
     * @alias module:model/MandatoryFieldValue
     * @param value {Array.<String>} Value for each field. Provide a `list of strings` for non-ADF fields.
     */
    constructor(value) { 
        
        MandatoryFieldValue.initialize(this, value);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, value) { 
        obj['value'] = value;
    }

    /**
     * Constructs a <code>MandatoryFieldValue</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MandatoryFieldValue} obj Optional instance to populate.
     * @return {module:model/MandatoryFieldValue} The populated <code>MandatoryFieldValue</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MandatoryFieldValue();

            if (data.hasOwnProperty('retain')) {
                obj['retain'] = ApiClient.convertToType(data['retain'], 'Boolean');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MandatoryFieldValue</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MandatoryFieldValue</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MandatoryFieldValue.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['value'])) {
            throw new Error("Expected the field `value` to be an array in the JSON data but got " + data['value']);
        }

        return true;
    }


}

MandatoryFieldValue.RequiredProperties = ["value"];

/**
 * If `true`, will try to retain original non-null issue field values on move.
 * @member {Boolean} retain
 * @default true
 */
MandatoryFieldValue.prototype['retain'] = true;

/**
 * Will treat as `MandatoryFieldValue` if type is `raw` or `empty`
 * @member {module:model/MandatoryFieldValue.TypeEnum} type
 * @default 'raw'
 */
MandatoryFieldValue.prototype['type'] = 'raw';

/**
 * Value for each field. Provide a `list of strings` for non-ADF fields.
 * @member {Array.<String>} value
 */
MandatoryFieldValue.prototype['value'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
MandatoryFieldValue['TypeEnum'] = {

    /**
     * value: "adf"
     * @const
     */
    "adf": "adf",

    /**
     * value: "raw"
     * @const
     */
    "raw": "raw"
};



export default MandatoryFieldValue;

