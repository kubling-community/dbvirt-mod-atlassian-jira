/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-122db9bd6b089919e6465ce52fdce319d5a9dfb4
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import JiraCascadingSelectField from './JiraCascadingSelectField';
import JiraColorField from './JiraColorField';
import JiraDateField from './JiraDateField';
import JiraDateTimeField from './JiraDateTimeField';
import JiraIssueTypeField from './JiraIssueTypeField';
import JiraLabelsField from './JiraLabelsField';
import JiraMultiSelectComponentField from './JiraMultiSelectComponentField';
import JiraMultipleGroupPickerField from './JiraMultipleGroupPickerField';
import JiraMultipleSelectField from './JiraMultipleSelectField';
import JiraMultipleSelectUserPickerField from './JiraMultipleSelectUserPickerField';
import JiraMultipleVersionPickerField from './JiraMultipleVersionPickerField';
import JiraNumberField from './JiraNumberField';
import JiraPriorityField from './JiraPriorityField';
import JiraRichTextField from './JiraRichTextField';
import JiraSingleGroupPickerField from './JiraSingleGroupPickerField';
import JiraSingleLineTextField from './JiraSingleLineTextField';
import JiraSingleSelectField from './JiraSingleSelectField';
import JiraSingleSelectUserPickerField from './JiraSingleSelectUserPickerField';
import JiraSingleVersionPickerField from './JiraSingleVersionPickerField';
import JiraUrlField from './JiraUrlField';

/**
 * The JiraIssueFields model module.
 * @module model/JiraIssueFields
 * @version 1001.0.0-SNAPSHOT-122db9bd6b089919e6465ce52fdce319d5a9dfb4
 */
class JiraIssueFields {
    /**
     * Constructs a new <code>JiraIssueFields</code>.
     * @alias module:model/JiraIssueFields
     */
    constructor() { 
        
        JiraIssueFields.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>JiraIssueFields</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JiraIssueFields} obj Optional instance to populate.
     * @return {module:model/JiraIssueFields} The populated <code>JiraIssueFields</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JiraIssueFields();

            if (data.hasOwnProperty('cascadingSelectFields')) {
                obj['cascadingSelectFields'] = ApiClient.convertToType(data['cascadingSelectFields'], [JiraCascadingSelectField]);
            }
            if (data.hasOwnProperty('clearableNumberFields')) {
                obj['clearableNumberFields'] = ApiClient.convertToType(data['clearableNumberFields'], [JiraNumberField]);
            }
            if (data.hasOwnProperty('colorFields')) {
                obj['colorFields'] = ApiClient.convertToType(data['colorFields'], [JiraColorField]);
            }
            if (data.hasOwnProperty('datePickerFields')) {
                obj['datePickerFields'] = ApiClient.convertToType(data['datePickerFields'], [JiraDateField]);
            }
            if (data.hasOwnProperty('dateTimePickerFields')) {
                obj['dateTimePickerFields'] = ApiClient.convertToType(data['dateTimePickerFields'], [JiraDateTimeField]);
            }
            if (data.hasOwnProperty('issueType')) {
                obj['issueType'] = ApiClient.convertToType(data['issueType'], JiraIssueTypeField);
            }
            if (data.hasOwnProperty('labelsFields')) {
                obj['labelsFields'] = ApiClient.convertToType(data['labelsFields'], [JiraLabelsField]);
            }
            if (data.hasOwnProperty('multipleGroupPickerFields')) {
                obj['multipleGroupPickerFields'] = ApiClient.convertToType(data['multipleGroupPickerFields'], [JiraMultipleGroupPickerField]);
            }
            if (data.hasOwnProperty('multipleSelectClearableUserPickerFields')) {
                obj['multipleSelectClearableUserPickerFields'] = ApiClient.convertToType(data['multipleSelectClearableUserPickerFields'], [JiraMultipleSelectUserPickerField]);
            }
            if (data.hasOwnProperty('multipleSelectFields')) {
                obj['multipleSelectFields'] = ApiClient.convertToType(data['multipleSelectFields'], [JiraMultipleSelectField]);
            }
            if (data.hasOwnProperty('multipleVersionPickerFields')) {
                obj['multipleVersionPickerFields'] = ApiClient.convertToType(data['multipleVersionPickerFields'], [JiraMultipleVersionPickerField]);
            }
            if (data.hasOwnProperty('multiselectComponents')) {
                obj['multiselectComponents'] = ApiClient.convertToType(data['multiselectComponents'], JiraMultiSelectComponentField);
            }
            if (data.hasOwnProperty('priority')) {
                obj['priority'] = ApiClient.convertToType(data['priority'], JiraPriorityField);
            }
            if (data.hasOwnProperty('richTextFields')) {
                obj['richTextFields'] = ApiClient.convertToType(data['richTextFields'], [JiraRichTextField]);
            }
            if (data.hasOwnProperty('singleGroupPickerFields')) {
                obj['singleGroupPickerFields'] = ApiClient.convertToType(data['singleGroupPickerFields'], [JiraSingleGroupPickerField]);
            }
            if (data.hasOwnProperty('singleLineTextFields')) {
                obj['singleLineTextFields'] = ApiClient.convertToType(data['singleLineTextFields'], [JiraSingleLineTextField]);
            }
            if (data.hasOwnProperty('singleSelectClearableUserPickerFields')) {
                obj['singleSelectClearableUserPickerFields'] = ApiClient.convertToType(data['singleSelectClearableUserPickerFields'], [JiraSingleSelectUserPickerField]);
            }
            if (data.hasOwnProperty('singleSelectFields')) {
                obj['singleSelectFields'] = ApiClient.convertToType(data['singleSelectFields'], [JiraSingleSelectField]);
            }
            if (data.hasOwnProperty('singleVersionPickerFields')) {
                obj['singleVersionPickerFields'] = ApiClient.convertToType(data['singleVersionPickerFields'], [JiraSingleVersionPickerField]);
            }
            if (data.hasOwnProperty('urlFields')) {
                obj['urlFields'] = ApiClient.convertToType(data['urlFields'], [JiraUrlField]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JiraIssueFields</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JiraIssueFields</code>.
     */
    static validateJSON(data) {
        if (data['cascadingSelectFields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['cascadingSelectFields'])) {
                throw new Error("Expected the field `cascadingSelectFields` to be an array in the JSON data but got " + data['cascadingSelectFields']);
            }
            // validate the optional field `cascadingSelectFields` (array)
            for (const item of data['cascadingSelectFields']) {
                JiraCascadingSelectField.validateJSON(item);
            };
        }
        if (data['clearableNumberFields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['clearableNumberFields'])) {
                throw new Error("Expected the field `clearableNumberFields` to be an array in the JSON data but got " + data['clearableNumberFields']);
            }
            // validate the optional field `clearableNumberFields` (array)
            for (const item of data['clearableNumberFields']) {
                JiraNumberField.validateJSON(item);
            };
        }
        if (data['colorFields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['colorFields'])) {
                throw new Error("Expected the field `colorFields` to be an array in the JSON data but got " + data['colorFields']);
            }
            // validate the optional field `colorFields` (array)
            for (const item of data['colorFields']) {
                JiraColorField.validateJSON(item);
            };
        }
        if (data['datePickerFields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['datePickerFields'])) {
                throw new Error("Expected the field `datePickerFields` to be an array in the JSON data but got " + data['datePickerFields']);
            }
            // validate the optional field `datePickerFields` (array)
            for (const item of data['datePickerFields']) {
                JiraDateField.validateJSON(item);
            };
        }
        if (data['dateTimePickerFields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dateTimePickerFields'])) {
                throw new Error("Expected the field `dateTimePickerFields` to be an array in the JSON data but got " + data['dateTimePickerFields']);
            }
            // validate the optional field `dateTimePickerFields` (array)
            for (const item of data['dateTimePickerFields']) {
                JiraDateTimeField.validateJSON(item);
            };
        }
        // validate the optional field `issueType`
        if (data['issueType']) { // data not null
          JiraIssueTypeField.validateJSON(data['issueType']);
        }
        if (data['labelsFields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['labelsFields'])) {
                throw new Error("Expected the field `labelsFields` to be an array in the JSON data but got " + data['labelsFields']);
            }
            // validate the optional field `labelsFields` (array)
            for (const item of data['labelsFields']) {
                JiraLabelsField.validateJSON(item);
            };
        }
        if (data['multipleGroupPickerFields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['multipleGroupPickerFields'])) {
                throw new Error("Expected the field `multipleGroupPickerFields` to be an array in the JSON data but got " + data['multipleGroupPickerFields']);
            }
            // validate the optional field `multipleGroupPickerFields` (array)
            for (const item of data['multipleGroupPickerFields']) {
                JiraMultipleGroupPickerField.validateJSON(item);
            };
        }
        if (data['multipleSelectClearableUserPickerFields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['multipleSelectClearableUserPickerFields'])) {
                throw new Error("Expected the field `multipleSelectClearableUserPickerFields` to be an array in the JSON data but got " + data['multipleSelectClearableUserPickerFields']);
            }
            // validate the optional field `multipleSelectClearableUserPickerFields` (array)
            for (const item of data['multipleSelectClearableUserPickerFields']) {
                JiraMultipleSelectUserPickerField.validateJSON(item);
            };
        }
        if (data['multipleSelectFields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['multipleSelectFields'])) {
                throw new Error("Expected the field `multipleSelectFields` to be an array in the JSON data but got " + data['multipleSelectFields']);
            }
            // validate the optional field `multipleSelectFields` (array)
            for (const item of data['multipleSelectFields']) {
                JiraMultipleSelectField.validateJSON(item);
            };
        }
        if (data['multipleVersionPickerFields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['multipleVersionPickerFields'])) {
                throw new Error("Expected the field `multipleVersionPickerFields` to be an array in the JSON data but got " + data['multipleVersionPickerFields']);
            }
            // validate the optional field `multipleVersionPickerFields` (array)
            for (const item of data['multipleVersionPickerFields']) {
                JiraMultipleVersionPickerField.validateJSON(item);
            };
        }
        // validate the optional field `multiselectComponents`
        if (data['multiselectComponents']) { // data not null
          JiraMultiSelectComponentField.validateJSON(data['multiselectComponents']);
        }
        // validate the optional field `priority`
        if (data['priority']) { // data not null
          JiraPriorityField.validateJSON(data['priority']);
        }
        if (data['richTextFields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['richTextFields'])) {
                throw new Error("Expected the field `richTextFields` to be an array in the JSON data but got " + data['richTextFields']);
            }
            // validate the optional field `richTextFields` (array)
            for (const item of data['richTextFields']) {
                JiraRichTextField.validateJSON(item);
            };
        }
        if (data['singleGroupPickerFields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['singleGroupPickerFields'])) {
                throw new Error("Expected the field `singleGroupPickerFields` to be an array in the JSON data but got " + data['singleGroupPickerFields']);
            }
            // validate the optional field `singleGroupPickerFields` (array)
            for (const item of data['singleGroupPickerFields']) {
                JiraSingleGroupPickerField.validateJSON(item);
            };
        }
        if (data['singleLineTextFields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['singleLineTextFields'])) {
                throw new Error("Expected the field `singleLineTextFields` to be an array in the JSON data but got " + data['singleLineTextFields']);
            }
            // validate the optional field `singleLineTextFields` (array)
            for (const item of data['singleLineTextFields']) {
                JiraSingleLineTextField.validateJSON(item);
            };
        }
        if (data['singleSelectClearableUserPickerFields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['singleSelectClearableUserPickerFields'])) {
                throw new Error("Expected the field `singleSelectClearableUserPickerFields` to be an array in the JSON data but got " + data['singleSelectClearableUserPickerFields']);
            }
            // validate the optional field `singleSelectClearableUserPickerFields` (array)
            for (const item of data['singleSelectClearableUserPickerFields']) {
                JiraSingleSelectUserPickerField.validateJSON(item);
            };
        }
        if (data['singleSelectFields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['singleSelectFields'])) {
                throw new Error("Expected the field `singleSelectFields` to be an array in the JSON data but got " + data['singleSelectFields']);
            }
            // validate the optional field `singleSelectFields` (array)
            for (const item of data['singleSelectFields']) {
                JiraSingleSelectField.validateJSON(item);
            };
        }
        if (data['singleVersionPickerFields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['singleVersionPickerFields'])) {
                throw new Error("Expected the field `singleVersionPickerFields` to be an array in the JSON data but got " + data['singleVersionPickerFields']);
            }
            // validate the optional field `singleVersionPickerFields` (array)
            for (const item of data['singleVersionPickerFields']) {
                JiraSingleVersionPickerField.validateJSON(item);
            };
        }
        if (data['urlFields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['urlFields'])) {
                throw new Error("Expected the field `urlFields` to be an array in the JSON data but got " + data['urlFields']);
            }
            // validate the optional field `urlFields` (array)
            for (const item of data['urlFields']) {
                JiraUrlField.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Add or clear a cascading select field:   *  To add, specify `optionId` for both parent and child.  *  To clear the child, set its `optionId` to null.  *  To clear both, set the parent's `optionId` to null.
 * @member {Array.<module:model/JiraCascadingSelectField>} cascadingSelectFields
 */
JiraIssueFields.prototype['cascadingSelectFields'] = undefined;

/**
 * Add or clear a number field:   *  To add, specify a numeric `value`.  *  To clear, set `value` to `null`.
 * @member {Array.<module:model/JiraNumberField>} clearableNumberFields
 */
JiraIssueFields.prototype['clearableNumberFields'] = undefined;

/**
 * Add or clear a color field:   *  To add, specify the color `name`. Available colors are: `purple`, `blue`, `green`, `teal`, `yellow`, `orange`, `grey`, `dark purple`, `dark blue`, `dark green`, `dark teal`, `dark yellow`, `dark orange`, `dark grey`.  *  To clear, set the color `name` to an empty string.
 * @member {Array.<module:model/JiraColorField>} colorFields
 */
JiraIssueFields.prototype['colorFields'] = undefined;

/**
 * Add or clear a date picker field:   *  To add, specify the date in `d/mmm/yy` format or ISO format `dd-mm-yyyy`.  *  To clear, set `formattedDate` to an empty string.
 * @member {Array.<module:model/JiraDateField>} datePickerFields
 */
JiraIssueFields.prototype['datePickerFields'] = undefined;

/**
 * Add or clear the planned start date and time:   *  To add, specify the date and time in ISO format for `formattedDateTime`.  *  To clear, provide an empty string for `formattedDateTime`.
 * @member {Array.<module:model/JiraDateTimeField>} dateTimePickerFields
 */
JiraIssueFields.prototype['dateTimePickerFields'] = undefined;

/**
 * Set the issue type field by providing an `issueTypeId`.
 * @member {module:model/JiraIssueTypeField} issueType
 */
JiraIssueFields.prototype['issueType'] = undefined;

/**
 * Edit a labels field:   *  Options include `ADD`, `REPLACE`, `REMOVE`, or `REMOVE_ALL` for bulk edits.  *  To clear labels, use the `REMOVE_ALL` option with an empty `labels` array.
 * @member {Array.<module:model/JiraLabelsField>} labelsFields
 */
JiraIssueFields.prototype['labelsFields'] = undefined;

/**
 * Add or clear a multi-group picker field:   *  To add groups, provide an array of groups with `groupName`s.  *  To clear all groups, use an empty `groups` array.
 * @member {Array.<module:model/JiraMultipleGroupPickerField>} multipleGroupPickerFields
 */
JiraIssueFields.prototype['multipleGroupPickerFields'] = undefined;

/**
 * Assign or unassign multiple users to/from a field:   *  To assign, provide an array of user `accountId`s.  *  To clear, set `users` to `null`.
 * @member {Array.<module:model/JiraMultipleSelectUserPickerField>} multipleSelectClearableUserPickerFields
 */
JiraIssueFields.prototype['multipleSelectClearableUserPickerFields'] = undefined;

/**
 * Add or clear a multi-select field:   *  To add, provide an array of options with `optionId`s.  *  To clear, use an empty `options` array.
 * @member {Array.<module:model/JiraMultipleSelectField>} multipleSelectFields
 */
JiraIssueFields.prototype['multipleSelectFields'] = undefined;

/**
 * Edit a multi-version picker field like Fix Versions/Affects Versions:   *  Options include `ADD`, `REPLACE`, `REMOVE`, or `REMOVE_ALL` for bulk edits.  *  To clear the field, use the `REMOVE_ALL` option with an empty `versions` array.
 * @member {Array.<module:model/JiraMultipleVersionPickerField>} multipleVersionPickerFields
 */
JiraIssueFields.prototype['multipleVersionPickerFields'] = undefined;

/**
 * Edit a multi select components field:   *  Options include `ADD`, `REPLACE`, `REMOVE`, or `REMOVE_ALL` for bulk edits.  *  To clear, use the `REMOVE_ALL` option with an empty `components` array.
 * @member {module:model/JiraMultiSelectComponentField} multiselectComponents
 */
JiraIssueFields.prototype['multiselectComponents'] = undefined;

/**
 * Set the priority of an issue by specifying a `priorityId`.
 * @member {module:model/JiraPriorityField} priority
 */
JiraIssueFields.prototype['priority'] = undefined;

/**
 * Add or clear a rich text field:   *  To add, provide `adfValue`. Note that rich text fields only support ADF values.  *  To clear, use an empty `richText` object.  For ADF format details, refer to: [Atlassian Document Format](https://developer.atlassian.com/cloud/jira/platform/apis/document/structure).
 * @member {Array.<module:model/JiraRichTextField>} richTextFields
 */
JiraIssueFields.prototype['richTextFields'] = undefined;

/**
 * Add or clear a single group picker field:   *  To add, specify the group with `groupName`.  *  To clear, set `groupName` to an empty string.
 * @member {Array.<module:model/JiraSingleGroupPickerField>} singleGroupPickerFields
 */
JiraIssueFields.prototype['singleGroupPickerFields'] = undefined;

/**
 * Add or clear a single line text field:   *  To add, provide the `text` value.  *  To clear, set `text` to an empty string.
 * @member {Array.<module:model/JiraSingleLineTextField>} singleLineTextFields
 */
JiraIssueFields.prototype['singleLineTextFields'] = undefined;

/**
 * Edit assignment for single select user picker fields like Assignee/Reporter:   *  To assign an issue, specify the user's `accountId`.  *  To unassign an issue, set `user` to `null`.  *  For automatic assignment, set `accountId` to `-1`.
 * @member {Array.<module:model/JiraSingleSelectUserPickerField>} singleSelectClearableUserPickerFields
 */
JiraIssueFields.prototype['singleSelectClearableUserPickerFields'] = undefined;

/**
 * Add or clear a single select field:   *  To add, specify the option with an `optionId`.  *  To clear, pass an option with `optionId` as `-1`.
 * @member {Array.<module:model/JiraSingleSelectField>} singleSelectFields
 */
JiraIssueFields.prototype['singleSelectFields'] = undefined;

/**
 * Add or clear a single version picker field:   *  To add, specify the version with a `versionId`.  *  To clear, set `versionId` to `-1`.
 * @member {Array.<module:model/JiraSingleVersionPickerField>} singleVersionPickerFields
 */
JiraIssueFields.prototype['singleVersionPickerFields'] = undefined;

/**
 * Add or clear a URL field:   *  To add, provide the `url` with the desired URL value.  *  To clear, set `url` to an empty string.
 * @member {Array.<module:model/JiraUrlField>} urlFields
 */
JiraIssueFields.prototype['urlFields'] = undefined;






export default JiraIssueFields;

