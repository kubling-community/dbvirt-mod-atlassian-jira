/**
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BuildKey model module.
 * @module model/BuildKey
 * @version 1001.0.0
 */
class BuildKey {
    /**
     * Constructs a new <code>BuildKey</code>.
     * Fields that uniquely reference a build. 
     * @alias module:model/BuildKey
     * @param pipelineId {String} An ID that relates a sequence of builds. Depending on your system this might be a project ID, pipeline ID, plan key etc. - whatever logical unit you use to group a sequence of builds.  The combination of `pipelineId` and `buildNumber` must uniquely identify the build. 
     * @param buildNumber {Number} Identifies a build within the sequence of builds identified by the build `pipelineId`.  Used to identify the 'most recent' build in that sequence of builds.  The combination of `pipelineId` and `buildNumber` must uniquely identify the build. 
     */
    constructor(pipelineId, buildNumber) { 
        
        BuildKey.initialize(this, pipelineId, buildNumber);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, pipelineId, buildNumber) { 
        obj['pipelineId'] = pipelineId;
        obj['buildNumber'] = buildNumber;
    }

    /**
     * Constructs a <code>BuildKey</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BuildKey} obj Optional instance to populate.
     * @return {module:model/BuildKey} The populated <code>BuildKey</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BuildKey();

            if (data.hasOwnProperty('pipelineId')) {
                obj['pipelineId'] = ApiClient.convertToType(data['pipelineId'], 'String');
            }
            if (data.hasOwnProperty('buildNumber')) {
                obj['buildNumber'] = ApiClient.convertToType(data['buildNumber'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BuildKey</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BuildKey</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BuildKey.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['pipelineId'] && !(typeof data['pipelineId'] === 'string' || data['pipelineId'] instanceof String)) {
            throw new Error("Expected the field `pipelineId` to be a primitive type in the JSON string but got " + data['pipelineId']);
        }

        return true;
    }


}

BuildKey.RequiredProperties = ["pipelineId", "buildNumber"];

/**
 * An ID that relates a sequence of builds. Depending on your system this might be a project ID, pipeline ID, plan key etc. - whatever logical unit you use to group a sequence of builds.  The combination of `pipelineId` and `buildNumber` must uniquely identify the build. 
 * @member {String} pipelineId
 */
BuildKey.prototype['pipelineId'] = undefined;

/**
 * Identifies a build within the sequence of builds identified by the build `pipelineId`.  Used to identify the 'most recent' build in that sequence of builds.  The combination of `pipelineId` and `buildNumber` must uniquely identify the build. 
 * @member {Number} buildNumber
 */
BuildKey.prototype['buildNumber'] = undefined;






export default BuildKey;

