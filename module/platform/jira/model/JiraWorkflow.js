/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-122db9bd6b089919e6465ce52fdce319d5a9dfb4
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DocumentVersion from './DocumentVersion';
import ProjectIssueTypes from './ProjectIssueTypes';
import WorkflowLayout from './WorkflowLayout';
import WorkflowReferenceStatus from './WorkflowReferenceStatus';
import WorkflowScope from './WorkflowScope';
import WorkflowTransitions from './WorkflowTransitions';

/**
 * The JiraWorkflow model module.
 * @module model/JiraWorkflow
 * @version 1001.0.0-SNAPSHOT-122db9bd6b089919e6465ce52fdce319d5a9dfb4
 */
class JiraWorkflow {
    /**
     * Constructs a new <code>JiraWorkflow</code>.
     * Details of a workflow.
     * @alias module:model/JiraWorkflow
     */
    constructor() { 
        
        JiraWorkflow.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>JiraWorkflow</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JiraWorkflow} obj Optional instance to populate.
     * @return {module:model/JiraWorkflow} The populated <code>JiraWorkflow</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JiraWorkflow();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('isEditable')) {
                obj['isEditable'] = ApiClient.convertToType(data['isEditable'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('scope')) {
                obj['scope'] = WorkflowScope.constructFromObject(data['scope']);
            }
            if (data.hasOwnProperty('startPointLayout')) {
                obj['startPointLayout'] = WorkflowLayout.constructFromObject(data['startPointLayout']);
            }
            if (data.hasOwnProperty('statuses')) {
                obj['statuses'] = ApiClient.convertToType(data['statuses'], [WorkflowReferenceStatus]);
            }
            if (data.hasOwnProperty('taskId')) {
                obj['taskId'] = ApiClient.convertToType(data['taskId'], 'String');
            }
            if (data.hasOwnProperty('transitions')) {
                obj['transitions'] = ApiClient.convertToType(data['transitions'], [WorkflowTransitions]);
            }
            if (data.hasOwnProperty('usages')) {
                obj['usages'] = ApiClient.convertToType(data['usages'], [ProjectIssueTypes]);
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = DocumentVersion.constructFromObject(data['version']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JiraWorkflow</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JiraWorkflow</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `scope`
        if (data['scope']) { // data not null
          WorkflowScope.validateJSON(data['scope']);
        }
        // validate the optional field `startPointLayout`
        if (data['startPointLayout']) { // data not null
          WorkflowLayout.validateJSON(data['startPointLayout']);
        }
        if (data['statuses']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['statuses'])) {
                throw new Error("Expected the field `statuses` to be an array in the JSON data but got " + data['statuses']);
            }
            // validate the optional field `statuses` (array)
            for (const item of data['statuses']) {
                WorkflowReferenceStatus.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['taskId'] && !(typeof data['taskId'] === 'string' || data['taskId'] instanceof String)) {
            throw new Error("Expected the field `taskId` to be a primitive type in the JSON string but got " + data['taskId']);
        }
        if (data['transitions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['transitions'])) {
                throw new Error("Expected the field `transitions` to be an array in the JSON data but got " + data['transitions']);
            }
            // validate the optional field `transitions` (array)
            for (const item of data['transitions']) {
                WorkflowTransitions.validateJSON(item);
            };
        }
        if (data['usages']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['usages'])) {
                throw new Error("Expected the field `usages` to be an array in the JSON data but got " + data['usages']);
            }
            // validate the optional field `usages` (array)
            for (const item of data['usages']) {
                ProjectIssueTypes.validateJSON(item);
            };
        }
        // validate the optional field `version`
        if (data['version']) { // data not null
          DocumentVersion.validateJSON(data['version']);
        }

        return true;
    }


}



/**
 * The description of the workflow.
 * @member {String} description
 */
JiraWorkflow.prototype['description'] = undefined;

/**
 * The ID of the workflow.
 * @member {String} id
 */
JiraWorkflow.prototype['id'] = undefined;

/**
 * Indicates if the workflow can be edited.
 * @member {Boolean} isEditable
 */
JiraWorkflow.prototype['isEditable'] = undefined;

/**
 * The name of the workflow.
 * @member {String} name
 */
JiraWorkflow.prototype['name'] = undefined;

/**
 * @member {module:model/WorkflowScope} scope
 */
JiraWorkflow.prototype['scope'] = undefined;

/**
 * @member {module:model/WorkflowLayout} startPointLayout
 */
JiraWorkflow.prototype['startPointLayout'] = undefined;

/**
 * The statuses referenced in this workflow.
 * @member {Array.<module:model/WorkflowReferenceStatus>} statuses
 */
JiraWorkflow.prototype['statuses'] = undefined;

/**
 * If there is a current [asynchronous task](#async-operations) operation for this workflow.
 * @member {String} taskId
 */
JiraWorkflow.prototype['taskId'] = undefined;

/**
 * The transitions of the workflow. Note that a transition can have either the deprecated `to`/`from` fields or the `toStatusReference`/`links` fields, but never both nor a combination.
 * @member {Array.<module:model/WorkflowTransitions>} transitions
 */
JiraWorkflow.prototype['transitions'] = undefined;

/**
 * Use the optional `workflows.usages` expand to get additional information about the projects and issue types associated with the requested workflows.
 * @member {Array.<module:model/ProjectIssueTypes>} usages
 */
JiraWorkflow.prototype['usages'] = undefined;

/**
 * @member {module:model/DocumentVersion} version
 */
JiraWorkflow.prototype['version'] = undefined;






export default JiraWorkflow;

