/**
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FeatureFlagDetails from './FeatureFlagDetails';
import FeatureFlagSummary from './FeatureFlagSummary';

/**
 * The FeatureFlagData model module.
 * @module model/FeatureFlagData
 * @version 1001.0.0
 */
class FeatureFlagData {
    /**
     * Constructs a new <code>FeatureFlagData</code>.
     * Data related to a single Feature Flag, across any Environment that the flag is present in. 
     * @alias module:model/FeatureFlagData
     * @param id {String} The identifier for the Feature Flag. Must be unique for a given Provider. 
     * @param key {String} The identifier that users would use to reference the Feature Flag in their source code etc.  Will be made available via the UI for users to copy into their source code etc. 
     * @param updateSequenceId {Number} An ID used to apply an ordering to updates for this Feature Flag in the case of out-of-order receipt of update requests.  This can be any monotonically increasing number. A suggested implementation is to use epoch millis from the Provider system, but other alternatives are valid (e.g. a Provider could store a counter against each Feature Flag and increment that on each update to Jira).  Updates for a Feature Flag that are received with an updateSqeuenceId lower than what is currently stored will be ignored. 
     * @param issueKeys {Array.<String>} The Jira issue keys to associate the Feature Flag information with. 
     * @param summary {module:model/FeatureFlagSummary} 
     * @param details {Array.<module:model/FeatureFlagDetails>} Detail information for this Feature Flag.  This may be information for each environment the Feature Flag is defined in or a selection of environments made by the user, as appropriate. 
     */
    constructor(id, key, updateSequenceId, issueKeys, summary, details) { 
        
        FeatureFlagData.initialize(this, id, key, updateSequenceId, issueKeys, summary, details);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, key, updateSequenceId, issueKeys, summary, details) { 
        obj['id'] = id;
        obj['key'] = key;
        obj['updateSequenceId'] = updateSequenceId;
        obj['issueKeys'] = issueKeys;
        obj['summary'] = summary;
        obj['details'] = details;
    }

    /**
     * Constructs a <code>FeatureFlagData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FeatureFlagData} obj Optional instance to populate.
     * @return {module:model/FeatureFlagData} The populated <code>FeatureFlagData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FeatureFlagData();

            if (data.hasOwnProperty('schemaVersion')) {
                obj['schemaVersion'] = ApiClient.convertToType(data['schemaVersion'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('updateSequenceId')) {
                obj['updateSequenceId'] = ApiClient.convertToType(data['updateSequenceId'], 'Number');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('issueKeys')) {
                obj['issueKeys'] = ApiClient.convertToType(data['issueKeys'], ['String']);
            }
            if (data.hasOwnProperty('summary')) {
                obj['summary'] = FeatureFlagSummary.constructFromObject(data['summary']);
            }
            if (data.hasOwnProperty('details')) {
                obj['details'] = ApiClient.convertToType(data['details'], [FeatureFlagDetails]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FeatureFlagData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FeatureFlagData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FeatureFlagData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['schemaVersion'] && !(typeof data['schemaVersion'] === 'string' || data['schemaVersion'] instanceof String)) {
            throw new Error("Expected the field `schemaVersion` to be a primitive type in the JSON string but got " + data['schemaVersion']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['issueKeys'])) {
            throw new Error("Expected the field `issueKeys` to be an array in the JSON data but got " + data['issueKeys']);
        }
        // validate the optional field `summary`
        if (data['summary']) { // data not null
          FeatureFlagSummary.validateJSON(data['summary']);
        }
        if (data['details']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['details'])) {
                throw new Error("Expected the field `details` to be an array in the JSON data but got " + data['details']);
            }
            // validate the optional field `details` (array)
            for (const item of data['details']) {
                FeatureFlagDetails.validateJSON(item);
            };
        }

        return true;
    }


}

FeatureFlagData.RequiredProperties = ["id", "key", "updateSequenceId", "issueKeys", "summary", "details"];

/**
 * The FeatureFlagData schema version used for this flag data.   Placeholder to support potential schema changes in the future. 
 * @member {module:model/FeatureFlagData.SchemaVersionEnum} schemaVersion
 * @default '1.0'
 */
FeatureFlagData.prototype['schemaVersion'] = '1.0';

/**
 * The identifier for the Feature Flag. Must be unique for a given Provider. 
 * @member {String} id
 */
FeatureFlagData.prototype['id'] = undefined;

/**
 * The identifier that users would use to reference the Feature Flag in their source code etc.  Will be made available via the UI for users to copy into their source code etc. 
 * @member {String} key
 */
FeatureFlagData.prototype['key'] = undefined;

/**
 * An ID used to apply an ordering to updates for this Feature Flag in the case of out-of-order receipt of update requests.  This can be any monotonically increasing number. A suggested implementation is to use epoch millis from the Provider system, but other alternatives are valid (e.g. a Provider could store a counter against each Feature Flag and increment that on each update to Jira).  Updates for a Feature Flag that are received with an updateSqeuenceId lower than what is currently stored will be ignored. 
 * @member {Number} updateSequenceId
 */
FeatureFlagData.prototype['updateSequenceId'] = undefined;

/**
 * The human-readable name for the Feature Flag. Will be shown in the UI.  If not provided, will use the ID for display. 
 * @member {String} displayName
 */
FeatureFlagData.prototype['displayName'] = undefined;

/**
 * The Jira issue keys to associate the Feature Flag information with. 
 * @member {Array.<String>} issueKeys
 */
FeatureFlagData.prototype['issueKeys'] = undefined;

/**
 * @member {module:model/FeatureFlagSummary} summary
 */
FeatureFlagData.prototype['summary'] = undefined;

/**
 * Detail information for this Feature Flag.  This may be information for each environment the Feature Flag is defined in or a selection of environments made by the user, as appropriate. 
 * @member {Array.<module:model/FeatureFlagDetails>} details
 */
FeatureFlagData.prototype['details'] = undefined;





/**
 * Allowed values for the <code>schemaVersion</code> property.
 * @enum {String}
 * @readonly
 */
FeatureFlagData['SchemaVersionEnum'] = {

    /**
     * value: "1.0"
     * @const
     */
    "1.0": "1.0"
};



export default FeatureFlagData;

