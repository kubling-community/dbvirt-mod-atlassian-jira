/**
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EnvironmentDetails model module.
 * @module model/EnvironmentDetails
 * @version 1001.0.0
 */
class EnvironmentDetails {
    /**
     * Constructs a new <code>EnvironmentDetails</code>.
     * Details of a single environment.  At the simplest this must be the name of the environment.  Ideally there is also type information which may be used to group data from multiple Feature Flags and other entities for visualisation in the UI. 
     * @alias module:model/EnvironmentDetails
     * @param name {String} The name of the environment.
     */
    constructor(name) { 
        
        EnvironmentDetails.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['name'] = name;
    }

    /**
     * Constructs a <code>EnvironmentDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EnvironmentDetails} obj Optional instance to populate.
     * @return {module:model/EnvironmentDetails} The populated <code>EnvironmentDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EnvironmentDetails();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EnvironmentDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EnvironmentDetails</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EnvironmentDetails.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

EnvironmentDetails.RequiredProperties = ["name"];

/**
 * The name of the environment.
 * @member {String} name
 */
EnvironmentDetails.prototype['name'] = undefined;

/**
 * The 'type' or 'category' of environment this environment belongs to.
 * @member {module:model/EnvironmentDetails.TypeEnum} type
 */
EnvironmentDetails.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
EnvironmentDetails['TypeEnum'] = {

    /**
     * value: "development"
     * @const
     */
    "development": "development",

    /**
     * value: "testing"
     * @const
     */
    "testing": "testing",

    /**
     * value: "staging"
     * @const
     */
    "staging": "staging",

    /**
     * value: "production"
     * @const
     */
    "production": "production"
};



export default EnvironmentDetails;

