/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-122db9bd6b089919e6465ce52fdce319d5a9dfb4
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UserAvatarUrls from './UserAvatarUrls';
import UserDetails from './UserDetails';

/**
 * The ChangelogAuthor model module.
 * @module model/ChangelogAuthor
 * @version 1001.0.0-SNAPSHOT-122db9bd6b089919e6465ce52fdce319d5a9dfb4
 */
class ChangelogAuthor {
    /**
     * Constructs a new <code>ChangelogAuthor</code>.
     * The user who made the change.
     * @alias module:model/ChangelogAuthor
     * @implements module:model/UserDetails
     */
    constructor() { 
        UserDetails.initialize(this);
        ChangelogAuthor.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ChangelogAuthor</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChangelogAuthor} obj Optional instance to populate.
     * @return {module:model/ChangelogAuthor} The populated <code>ChangelogAuthor</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChangelogAuthor();
            UserDetails.constructFromObject(data, obj);

            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'String');
            }
            if (data.hasOwnProperty('accountType')) {
                obj['accountType'] = ApiClient.convertToType(data['accountType'], 'String');
            }
            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('avatarUrls')) {
                obj['avatarUrls'] = UserAvatarUrls.constructFromObject(data['avatarUrls']);
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('emailAddress')) {
                obj['emailAddress'] = ApiClient.convertToType(data['emailAddress'], 'String');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('self')) {
                obj['self'] = ApiClient.convertToType(data['self'], 'String');
            }
            if (data.hasOwnProperty('timeZone')) {
                obj['timeZone'] = ApiClient.convertToType(data['timeZone'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChangelogAuthor</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChangelogAuthor</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accountId'] && !(typeof data['accountId'] === 'string' || data['accountId'] instanceof String)) {
            throw new Error("Expected the field `accountId` to be a primitive type in the JSON string but got " + data['accountId']);
        }
        // ensure the json data is a string
        if (data['accountType'] && !(typeof data['accountType'] === 'string' || data['accountType'] instanceof String)) {
            throw new Error("Expected the field `accountType` to be a primitive type in the JSON string but got " + data['accountType']);
        }
        // validate the optional field `avatarUrls`
        if (data['avatarUrls']) { // data not null
          UserAvatarUrls.validateJSON(data['avatarUrls']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['emailAddress'] && !(typeof data['emailAddress'] === 'string' || data['emailAddress'] instanceof String)) {
            throw new Error("Expected the field `emailAddress` to be a primitive type in the JSON string but got " + data['emailAddress']);
        }
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['self'] && !(typeof data['self'] === 'string' || data['self'] instanceof String)) {
            throw new Error("Expected the field `self` to be a primitive type in the JSON string but got " + data['self']);
        }
        // ensure the json data is a string
        if (data['timeZone'] && !(typeof data['timeZone'] === 'string' || data['timeZone'] instanceof String)) {
            throw new Error("Expected the field `timeZone` to be a primitive type in the JSON string but got " + data['timeZone']);
        }

        return true;
    }


}



/**
 * The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
 * @member {String} accountId
 */
ChangelogAuthor.prototype['accountId'] = undefined;

/**
 * The type of account represented by this user. This will be one of 'atlassian' (normal users), 'app' (application user) or 'customer' (Jira Service Desk customer user)
 * @member {String} accountType
 */
ChangelogAuthor.prototype['accountType'] = undefined;

/**
 * Whether the user is active.
 * @member {Boolean} active
 */
ChangelogAuthor.prototype['active'] = undefined;

/**
 * @member {module:model/UserAvatarUrls} avatarUrls
 */
ChangelogAuthor.prototype['avatarUrls'] = undefined;

/**
 * The display name of the user. Depending on the user’s privacy settings, this may return an alternative value.
 * @member {String} displayName
 */
ChangelogAuthor.prototype['displayName'] = undefined;

/**
 * The email address of the user. Depending on the user’s privacy settings, this may be returned as null.
 * @member {String} emailAddress
 */
ChangelogAuthor.prototype['emailAddress'] = undefined;

/**
 * This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
 * @member {String} key
 */
ChangelogAuthor.prototype['key'] = undefined;

/**
 * This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
 * @member {String} name
 */
ChangelogAuthor.prototype['name'] = undefined;

/**
 * The URL of the user.
 * @member {String} self
 */
ChangelogAuthor.prototype['self'] = undefined;

/**
 * The time zone specified in the user's profile. Depending on the user’s privacy settings, this may be returned as null.
 * @member {String} timeZone
 */
ChangelogAuthor.prototype['timeZone'] = undefined;


// Implement UserDetails interface:
/**
 * The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
 * @member {String} accountId
 */
UserDetails.prototype['accountId'] = undefined;
/**
 * The type of account represented by this user. This will be one of 'atlassian' (normal users), 'app' (application user) or 'customer' (Jira Service Desk customer user)
 * @member {String} accountType
 */
UserDetails.prototype['accountType'] = undefined;
/**
 * Whether the user is active.
 * @member {Boolean} active
 */
UserDetails.prototype['active'] = undefined;
/**
 * @member {module:model/UserAvatarUrls} avatarUrls
 */
UserDetails.prototype['avatarUrls'] = undefined;
/**
 * The display name of the user. Depending on the user’s privacy settings, this may return an alternative value.
 * @member {String} displayName
 */
UserDetails.prototype['displayName'] = undefined;
/**
 * The email address of the user. Depending on the user’s privacy settings, this may be returned as null.
 * @member {String} emailAddress
 */
UserDetails.prototype['emailAddress'] = undefined;
/**
 * This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
 * @member {String} key
 */
UserDetails.prototype['key'] = undefined;
/**
 * This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
 * @member {String} name
 */
UserDetails.prototype['name'] = undefined;
/**
 * The URL of the user.
 * @member {String} self
 */
UserDetails.prototype['self'] = undefined;
/**
 * The time zone specified in the user's profile. Depending on the user’s privacy settings, this may be returned as null.
 * @member {String} timeZone
 */
UserDetails.prototype['timeZone'] = undefined;




export default ChangelogAuthor;

