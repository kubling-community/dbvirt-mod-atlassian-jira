/**
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Environment model module.
 * @module model/Environment
 * @version 1001.0.0
 */
class Environment {
    /**
     * Constructs a new <code>Environment</code>.
     * The environment that the deployment is present in. 
     * @alias module:model/Environment
     * @param id {String} The identifier of this environment, must be unique for the provider so that it can be shared across pipelines. 
     * @param displayName {String} The name of the environment to present to the user. 
     * @param type {module:model/Environment.TypeEnum} The type of the environment. 
     */
    constructor(id, displayName, type) { 
        
        Environment.initialize(this, id, displayName, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, displayName, type) { 
        obj['id'] = id;
        obj['displayName'] = displayName;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>Environment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Environment} obj Optional instance to populate.
     * @return {module:model/Environment} The populated <code>Environment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Environment();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Environment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Environment</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Environment.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

Environment.RequiredProperties = ["id", "displayName", "type"];

/**
 * The identifier of this environment, must be unique for the provider so that it can be shared across pipelines. 
 * @member {String} id
 */
Environment.prototype['id'] = undefined;

/**
 * The name of the environment to present to the user. 
 * @member {String} displayName
 */
Environment.prototype['displayName'] = undefined;

/**
 * The type of the environment. 
 * @member {module:model/Environment.TypeEnum} type
 */
Environment.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Environment['TypeEnum'] = {

    /**
     * value: "unmapped"
     * @const
     */
    "unmapped": "unmapped",

    /**
     * value: "development"
     * @const
     */
    "development": "development",

    /**
     * value: "testing"
     * @const
     */
    "testing": "testing",

    /**
     * value: "staging"
     * @const
     */
    "staging": "staging",

    /**
     * value: "production"
     * @const
     */
    "production": "production"
};



export default Environment;

