/**
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Author from './Author';

/**
 * The Commit model module.
 * @module model/Commit
 * @version 1001.0.0
 */
class Commit {
    /**
     * Constructs a new <code>Commit</code>.
     * Represents a commit in the version control system.
     * @alias module:model/Commit
     * @param id {String} The identifier or hash of the commit. Will be used for cross entity linking. Must be unique for all commits within a repository, i.e., only one commit can have ID 'X' in repository 'Y'. But adding, e.g., a branch with ID 'X' to repository 'Y' is acceptable. Only alphanumeric characters, and '~.-_', are allowed. Max length is 1024 characters
     * @param issueKeys {Array.<String>} List of issues keys that this entity is associated with. They must be valid Jira issue keys.
     * @param updateSequenceId {Number} An ID used to apply an ordering to updates for this entity in the case of out-of-order receipt of update requests. This can be any monotonically increasing number. A suggested implementation is to use epoch millis from the provider system, but other alternatives are valid (e.g. a provider could store a counter against each entity and increment that on each update to Jira). Updates for an entity that are received with an updateSqeuenceId lower than what is currently stored will be ignored.
     * @param message {String} The commit message. Max length is 1024 characters. If anything longer is supplied, it will be truncated down to 1024 characters.
     * @param author {module:model/Author} 
     * @param fileCount {Number} The total number of files added, removed, or modified by this commit
     * @param url {String} The URL of this commit. Max length is 2000 characters.
     * @param authorTimestamp {String} The author timestamp of this commit. Formatted as a UTC ISO 8601 date time format.
     * @param displayId {String} Shortened identifier for this commit, used for display. Max length is 255 characters.
     */
    constructor(id, issueKeys, updateSequenceId, message, author, fileCount, url, authorTimestamp, displayId) { 
        
        Commit.initialize(this, id, issueKeys, updateSequenceId, message, author, fileCount, url, authorTimestamp, displayId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, issueKeys, updateSequenceId, message, author, fileCount, url, authorTimestamp, displayId) { 
        obj['id'] = id;
        obj['issueKeys'] = issueKeys;
        obj['updateSequenceId'] = updateSequenceId;
        obj['message'] = message;
        obj['author'] = author;
        obj['fileCount'] = fileCount;
        obj['url'] = url;
        obj['authorTimestamp'] = authorTimestamp;
        obj['displayId'] = displayId;
    }

    /**
     * Constructs a <code>Commit</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Commit} obj Optional instance to populate.
     * @return {module:model/Commit} The populated <code>Commit</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Commit();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('issueKeys')) {
                obj['issueKeys'] = ApiClient.convertToType(data['issueKeys'], ['String']);
            }
            if (data.hasOwnProperty('updateSequenceId')) {
                obj['updateSequenceId'] = ApiClient.convertToType(data['updateSequenceId'], 'Number');
            }
            if (data.hasOwnProperty('hash')) {
                obj['hash'] = ApiClient.convertToType(data['hash'], 'String');
            }
            if (data.hasOwnProperty('flags')) {
                obj['flags'] = ApiClient.convertToType(data['flags'], ['String']);
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('author')) {
                obj['author'] = Author.constructFromObject(data['author']);
            }
            if (data.hasOwnProperty('fileCount')) {
                obj['fileCount'] = ApiClient.convertToType(data['fileCount'], 'Number');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('files')) {
                obj['files'] = ApiClient.convertToType(data['files'], [File]);
            }
            if (data.hasOwnProperty('authorTimestamp')) {
                obj['authorTimestamp'] = ApiClient.convertToType(data['authorTimestamp'], 'String');
            }
            if (data.hasOwnProperty('displayId')) {
                obj['displayId'] = ApiClient.convertToType(data['displayId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Commit</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Commit</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Commit.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['issueKeys'])) {
            throw new Error("Expected the field `issueKeys` to be an array in the JSON data but got " + data['issueKeys']);
        }
        // ensure the json data is a string
        if (data['hash'] && !(typeof data['hash'] === 'string' || data['hash'] instanceof String)) {
            throw new Error("Expected the field `hash` to be a primitive type in the JSON string but got " + data['hash']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['flags'])) {
            throw new Error("Expected the field `flags` to be an array in the JSON data but got " + data['flags']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // validate the optional field `author`
        if (data['author']) { // data not null
          Author.validateJSON(data['author']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        if (data['files']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['files'])) {
                throw new Error("Expected the field `files` to be an array in the JSON data but got " + data['files']);
            }
            // validate the optional field `files` (array)
            for (const item of data['files']) {
                File.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['authorTimestamp'] && !(typeof data['authorTimestamp'] === 'string' || data['authorTimestamp'] instanceof String)) {
            throw new Error("Expected the field `authorTimestamp` to be a primitive type in the JSON string but got " + data['authorTimestamp']);
        }
        // ensure the json data is a string
        if (data['displayId'] && !(typeof data['displayId'] === 'string' || data['displayId'] instanceof String)) {
            throw new Error("Expected the field `displayId` to be a primitive type in the JSON string but got " + data['displayId']);
        }

        return true;
    }


}

Commit.RequiredProperties = ["id", "issueKeys", "updateSequenceId", "message", "author", "fileCount", "url", "authorTimestamp", "displayId"];

/**
 * The identifier or hash of the commit. Will be used for cross entity linking. Must be unique for all commits within a repository, i.e., only one commit can have ID 'X' in repository 'Y'. But adding, e.g., a branch with ID 'X' to repository 'Y' is acceptable. Only alphanumeric characters, and '~.-_', are allowed. Max length is 1024 characters
 * @member {String} id
 */
Commit.prototype['id'] = undefined;

/**
 * List of issues keys that this entity is associated with. They must be valid Jira issue keys.
 * @member {Array.<String>} issueKeys
 */
Commit.prototype['issueKeys'] = undefined;

/**
 * An ID used to apply an ordering to updates for this entity in the case of out-of-order receipt of update requests. This can be any monotonically increasing number. A suggested implementation is to use epoch millis from the provider system, but other alternatives are valid (e.g. a provider could store a counter against each entity and increment that on each update to Jira). Updates for an entity that are received with an updateSqeuenceId lower than what is currently stored will be ignored.
 * @member {Number} updateSequenceId
 */
Commit.prototype['updateSequenceId'] = undefined;

/**
 * Deprecated. Use the id field instead.
 * @member {String} hash
 */
Commit.prototype['hash'] = undefined;

/**
 * The set of flags for this commit
 * @member {Array.<module:model/Commit.FlagsEnum>} flags
 */
Commit.prototype['flags'] = undefined;

/**
 * The commit message. Max length is 1024 characters. If anything longer is supplied, it will be truncated down to 1024 characters.
 * @member {String} message
 */
Commit.prototype['message'] = undefined;

/**
 * @member {module:model/Author} author
 */
Commit.prototype['author'] = undefined;

/**
 * The total number of files added, removed, or modified by this commit
 * @member {Number} fileCount
 */
Commit.prototype['fileCount'] = undefined;

/**
 * The URL of this commit. Max length is 2000 characters.
 * @member {String} url
 */
Commit.prototype['url'] = undefined;

/**
 * List of file changes. Max number of files is 10. Currently, only the first 5 files are shown (sorted by path) in the UI. This UI behavior may change without notice.
 * @member {Array.<File>} files
 */
Commit.prototype['files'] = undefined;

/**
 * The author timestamp of this commit. Formatted as a UTC ISO 8601 date time format.
 * @member {String} authorTimestamp
 */
Commit.prototype['authorTimestamp'] = undefined;

/**
 * Shortened identifier for this commit, used for display. Max length is 255 characters.
 * @member {String} displayId
 */
Commit.prototype['displayId'] = undefined;





/**
 * Allowed values for the <code>flags</code> property.
 * @enum {String}
 * @readonly
 */
Commit['FlagsEnum'] = {

    /**
     * value: "MERGE_COMMIT"
     * @const
     */
    "MERGE_COMMIT": "MERGE_COMMIT"
};



export default Commit;

