/**
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ProviderMetadata5 from './ProviderMetadata5';
import VulnerabilityDetails from './VulnerabilityDetails';

/**
 * The SubmitVulnerabilitiesRequest model module.
 * @module model/SubmitVulnerabilitiesRequest
 * @version 1001.0.0
 */
class SubmitVulnerabilitiesRequest {
    /**
     * Constructs a new <code>SubmitVulnerabilitiesRequest</code>.
     * The payload used to submit (update / insert) Vulnerability data.
     * @alias module:model/SubmitVulnerabilitiesRequest
     * @param vulnerabilities {Array.<module:model/VulnerabilityDetails>} 
     */
    constructor(vulnerabilities) { 
        
        SubmitVulnerabilitiesRequest.initialize(this, vulnerabilities);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, vulnerabilities) { 
        obj['vulnerabilities'] = vulnerabilities;
    }

    /**
     * Constructs a <code>SubmitVulnerabilitiesRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SubmitVulnerabilitiesRequest} obj Optional instance to populate.
     * @return {module:model/SubmitVulnerabilitiesRequest} The populated <code>SubmitVulnerabilitiesRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SubmitVulnerabilitiesRequest();

            if (data.hasOwnProperty('operationType')) {
                obj['operationType'] = ApiClient.convertToType(data['operationType'], 'String');
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = ApiClient.convertToType(data['properties'], {'String': 'String'});
            }
            if (data.hasOwnProperty('vulnerabilities')) {
                obj['vulnerabilities'] = ApiClient.convertToType(data['vulnerabilities'], [VulnerabilityDetails]);
            }
            if (data.hasOwnProperty('providerMetadata')) {
                obj['providerMetadata'] = ProviderMetadata5.constructFromObject(data['providerMetadata']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SubmitVulnerabilitiesRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SubmitVulnerabilitiesRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SubmitVulnerabilitiesRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['operationType'] && !(typeof data['operationType'] === 'string' || data['operationType'] instanceof String)) {
            throw new Error("Expected the field `operationType` to be a primitive type in the JSON string but got " + data['operationType']);
        }
        if (data['vulnerabilities']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['vulnerabilities'])) {
                throw new Error("Expected the field `vulnerabilities` to be an array in the JSON data but got " + data['vulnerabilities']);
            }
            // validate the optional field `vulnerabilities` (array)
            for (const item of data['vulnerabilities']) {
                VulnerabilityDetails.validateJSON(item);
            };
        }
        // validate the optional field `providerMetadata`
        if (data['providerMetadata']) { // data not null
          ProviderMetadata5.validateJSON(data['providerMetadata']);
        }

        return true;
    }


}

SubmitVulnerabilitiesRequest.RequiredProperties = ["vulnerabilities"];

/**
 * Indicates the operation being performed by the provider system when sending this data. \"NORMAL\" - Data received during real-time, user-triggered actions (e.g. user closed or updated a vulnerability). \"SCAN\" - Data sent through some automated process (e.g. some periodically scheduled repository scan). \"BACKFILL\" - Data received while backfilling existing data (e.g. pushing historical vulnerabilities when re-connect a workspace). Default is \"NORMAL\". \"NORMAL\" traffic has higher priority but tighter rate limits, \"SCAN\" traffic has medium priority and looser limits, \"BACKFILL\" has lower priority and much looser limits 
 * @member {module:model/SubmitVulnerabilitiesRequest.OperationTypeEnum} operationType
 */
SubmitVulnerabilitiesRequest.prototype['operationType'] = undefined;

/**
 * Properties assigned to vulnerability data that can then be used for delete / query operations.  Examples might be an account or user ID that can then be used to clean up data if an account is removed from the Provider system.  Properties are supplied as key/value pairs, and a maximum of 5 properties can be supplied, keys cannot contain ':' or start with '_'. 
 * @member {Object.<String, String>} properties
 */
SubmitVulnerabilitiesRequest.prototype['properties'] = undefined;

/**
 * @member {Array.<module:model/VulnerabilityDetails>} vulnerabilities
 */
SubmitVulnerabilitiesRequest.prototype['vulnerabilities'] = undefined;

/**
 * @member {module:model/ProviderMetadata5} providerMetadata
 */
SubmitVulnerabilitiesRequest.prototype['providerMetadata'] = undefined;





/**
 * Allowed values for the <code>operationType</code> property.
 * @enum {String}
 * @readonly
 */
SubmitVulnerabilitiesRequest['OperationTypeEnum'] = {

    /**
     * value: "NORMAL"
     * @const
     */
    "NORMAL": "NORMAL",

    /**
     * value: "SCAN"
     * @const
     */
    "SCAN": "SCAN",

    /**
     * value: "BACKFILL"
     * @const
     */
    "BACKFILL": "BACKFILL"
};



export default SubmitVulnerabilitiesRequest;

