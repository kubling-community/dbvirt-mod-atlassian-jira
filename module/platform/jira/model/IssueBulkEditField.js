/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-122db9bd6b089919e6465ce52fdce319d5a9dfb4
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The IssueBulkEditField model module.
 * @module model/IssueBulkEditField
 * @version 1001.0.0-SNAPSHOT-122db9bd6b089919e6465ce52fdce319d5a9dfb4
 */
class IssueBulkEditField {
    /**
     * Constructs a new <code>IssueBulkEditField</code>.
     * @alias module:model/IssueBulkEditField
     */
    constructor() { 
        
        IssueBulkEditField.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IssueBulkEditField</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IssueBulkEditField} obj Optional instance to populate.
     * @return {module:model/IssueBulkEditField} The populated <code>IssueBulkEditField</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IssueBulkEditField();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('fieldOptions')) {
                obj['fieldOptions'] = ApiClient.convertToType(data['fieldOptions'], [Object]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('isRequired')) {
                obj['isRequired'] = ApiClient.convertToType(data['isRequired'], 'Boolean');
            }
            if (data.hasOwnProperty('multiSelectFieldOptions')) {
                obj['multiSelectFieldOptions'] = ApiClient.convertToType(data['multiSelectFieldOptions'], ['String']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('searchUrl')) {
                obj['searchUrl'] = ApiClient.convertToType(data['searchUrl'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('unavailableMessage')) {
                obj['unavailableMessage'] = ApiClient.convertToType(data['unavailableMessage'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IssueBulkEditField</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IssueBulkEditField</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['fieldOptions'])) {
            throw new Error("Expected the field `fieldOptions` to be an array in the JSON data but got " + data['fieldOptions']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['multiSelectFieldOptions'])) {
            throw new Error("Expected the field `multiSelectFieldOptions` to be an array in the JSON data but got " + data['multiSelectFieldOptions']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['searchUrl'] && !(typeof data['searchUrl'] === 'string' || data['searchUrl'] instanceof String)) {
            throw new Error("Expected the field `searchUrl` to be a primitive type in the JSON string but got " + data['searchUrl']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['unavailableMessage'] && !(typeof data['unavailableMessage'] === 'string' || data['unavailableMessage'] instanceof String)) {
            throw new Error("Expected the field `unavailableMessage` to be a primitive type in the JSON string but got " + data['unavailableMessage']);
        }

        return true;
    }


}



/**
 * Description of the field.
 * @member {String} description
 */
IssueBulkEditField.prototype['description'] = undefined;

/**
 * A list of options related to the field, applicable in contexts where multiple selections are allowed.
 * @member {Array.<Object>} fieldOptions
 */
IssueBulkEditField.prototype['fieldOptions'] = undefined;

/**
 * The unique ID of the field.
 * @member {String} id
 */
IssueBulkEditField.prototype['id'] = undefined;

/**
 * Indicates whether the field is mandatory for the operation.
 * @member {Boolean} isRequired
 */
IssueBulkEditField.prototype['isRequired'] = undefined;

/**
 * Specifies supported actions (like add, replace, remove) on multi-select fields via an enum.
 * @member {Array.<module:model/IssueBulkEditField.MultiSelectFieldOptionsEnum>} multiSelectFieldOptions
 */
IssueBulkEditField.prototype['multiSelectFieldOptions'] = undefined;

/**
 * The display name of the field.
 * @member {String} name
 */
IssueBulkEditField.prototype['name'] = undefined;

/**
 * A URL to fetch additional data for the field
 * @member {String} searchUrl
 */
IssueBulkEditField.prototype['searchUrl'] = undefined;

/**
 * The type of the field.
 * @member {String} type
 */
IssueBulkEditField.prototype['type'] = undefined;

/**
 * A message indicating why the field is unavailable for editing.
 * @member {String} unavailableMessage
 */
IssueBulkEditField.prototype['unavailableMessage'] = undefined;





/**
 * Allowed values for the <code>multiSelectFieldOptions</code> property.
 * @enum {String}
 * @readonly
 */
IssueBulkEditField['MultiSelectFieldOptionsEnum'] = {

    /**
     * value: "ADD"
     * @const
     */
    "ADD": "ADD",

    /**
     * value: "REMOVE"
     * @const
     */
    "REMOVE": "REMOVE",

    /**
     * value: "REPLACE"
     * @const
     */
    "REPLACE": "REPLACE",

    /**
     * value: "REMOVE_ALL"
     * @const
     */
    "REMOVE_ALL": "REMOVE_ALL"
};



export default IssueBulkEditField;

