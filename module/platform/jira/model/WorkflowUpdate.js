/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-122db9bd6b089919e6465ce52fdce319d5a9dfb4
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DocumentVersion from './DocumentVersion';
import StatusLayoutUpdate from './StatusLayoutUpdate';
import StatusMappingDTO from './StatusMappingDTO';
import StatusMigration from './StatusMigration';
import TransitionUpdateDTO from './TransitionUpdateDTO';
import WorkflowLayout from './WorkflowLayout';

/**
 * The WorkflowUpdate model module.
 * @module model/WorkflowUpdate
 * @version 1001.0.0-SNAPSHOT-122db9bd6b089919e6465ce52fdce319d5a9dfb4
 */
class WorkflowUpdate {
    /**
     * Constructs a new <code>WorkflowUpdate</code>.
     * The details of the workflows to update.
     * @alias module:model/WorkflowUpdate
     * @extends Object
     * @param id {String} The ID of this workflow.
     * @param statuses {Array.<module:model/StatusLayoutUpdate>} The statuses associated with this workflow.
     * @param transitions {Array.<module:model/TransitionUpdateDTO>} The transitions of this workflow.
     * @param version {module:model/DocumentVersion} 
     */
    constructor(id, statuses, transitions, version) { 
        
        WorkflowUpdate.initialize(this, id, statuses, transitions, version);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, statuses, transitions, version) { 
        obj['id'] = id;
        obj['statuses'] = statuses;
        obj['transitions'] = transitions;
        obj['version'] = version;
    }

    /**
     * Constructs a <code>WorkflowUpdate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WorkflowUpdate} obj Optional instance to populate.
     * @return {module:model/WorkflowUpdate} The populated <code>WorkflowUpdate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WorkflowUpdate();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('defaultStatusMappings')) {
                obj['defaultStatusMappings'] = ApiClient.convertToType(data['defaultStatusMappings'], [StatusMigration]);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('startPointLayout')) {
                obj['startPointLayout'] = WorkflowLayout.constructFromObject(data['startPointLayout']);
            }
            if (data.hasOwnProperty('statusMappings')) {
                obj['statusMappings'] = ApiClient.convertToType(data['statusMappings'], [StatusMappingDTO]);
            }
            if (data.hasOwnProperty('statuses')) {
                obj['statuses'] = ApiClient.convertToType(data['statuses'], [StatusLayoutUpdate]);
            }
            if (data.hasOwnProperty('transitions')) {
                obj['transitions'] = ApiClient.convertToType(data['transitions'], [TransitionUpdateDTO]);
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = DocumentVersion.constructFromObject(data['version']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WorkflowUpdate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WorkflowUpdate</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WorkflowUpdate.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['defaultStatusMappings'])) {
            throw new Error("Expected the field `defaultStatusMappings` to be an array in the JSON data but got " + data['defaultStatusMappings']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `startPointLayout`
        if (data['startPointLayout']) { // data not null
          WorkflowLayout.validateJSON(data['startPointLayout']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['statusMappings'])) {
            throw new Error("Expected the field `statusMappings` to be an array in the JSON data but got " + data['statusMappings']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['statuses'])) {
            throw new Error("Expected the field `statuses` to be an array in the JSON data but got " + data['statuses']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['transitions'])) {
            throw new Error("Expected the field `transitions` to be an array in the JSON data but got " + data['transitions']);
        }
        // validate the optional field `version`
        if (data['version']) { // data not null
          DocumentVersion.validateJSON(data['version']);
        }

        return true;
    }


}

WorkflowUpdate.RequiredProperties = ["id", "statuses", "transitions", "version"];

/**
 * The mapping of old to new status ID.
 * @member {Array.<module:model/StatusMigration>} defaultStatusMappings
 */
WorkflowUpdate.prototype['defaultStatusMappings'] = undefined;

/**
 * The new description for this workflow.
 * @member {String} description
 */
WorkflowUpdate.prototype['description'] = undefined;

/**
 * The ID of this workflow.
 * @member {String} id
 */
WorkflowUpdate.prototype['id'] = undefined;

/**
 * @member {module:model/WorkflowLayout} startPointLayout
 */
WorkflowUpdate.prototype['startPointLayout'] = undefined;

/**
 * The mapping of old to new status ID for a specific project and issue type.
 * @member {Array.<module:model/StatusMappingDTO>} statusMappings
 */
WorkflowUpdate.prototype['statusMappings'] = undefined;

/**
 * The statuses associated with this workflow.
 * @member {Array.<module:model/StatusLayoutUpdate>} statuses
 */
WorkflowUpdate.prototype['statuses'] = undefined;

/**
 * The transitions of this workflow.
 * @member {Array.<module:model/TransitionUpdateDTO>} transitions
 */
WorkflowUpdate.prototype['transitions'] = undefined;

/**
 * @member {module:model/DocumentVersion} version
 */
WorkflowUpdate.prototype['version'] = undefined;






export default WorkflowUpdate;

