/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-122db9bd6b089919e6465ce52fdce319d5a9dfb4
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IssueTypeDetails from './IssueTypeDetails';
import IssueTypeDetailsScope from './IssueTypeDetailsScope';

/**
 * The FieldsIssueType model module.
 * @module model/FieldsIssueType
 * @version 1001.0.0-SNAPSHOT-122db9bd6b089919e6465ce52fdce319d5a9dfb4
 */
class FieldsIssueType {
    /**
     * Constructs a new <code>FieldsIssueType</code>.
     * The type of the linked issue.
     * @alias module:model/FieldsIssueType
     * @implements module:model/IssueTypeDetails
     */
    constructor() { 
        IssueTypeDetails.initialize(this);
        FieldsIssueType.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FieldsIssueType</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FieldsIssueType} obj Optional instance to populate.
     * @return {module:model/FieldsIssueType} The populated <code>FieldsIssueType</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FieldsIssueType();
            IssueTypeDetails.constructFromObject(data, obj);

            if (data.hasOwnProperty('avatarId')) {
                obj['avatarId'] = ApiClient.convertToType(data['avatarId'], 'Number');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('entityId')) {
                obj['entityId'] = ApiClient.convertToType(data['entityId'], 'String');
            }
            if (data.hasOwnProperty('hierarchyLevel')) {
                obj['hierarchyLevel'] = ApiClient.convertToType(data['hierarchyLevel'], 'Number');
            }
            if (data.hasOwnProperty('iconUrl')) {
                obj['iconUrl'] = ApiClient.convertToType(data['iconUrl'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('scope')) {
                obj['scope'] = IssueTypeDetailsScope.constructFromObject(data['scope']);
            }
            if (data.hasOwnProperty('self')) {
                obj['self'] = ApiClient.convertToType(data['self'], 'String');
            }
            if (data.hasOwnProperty('subtask')) {
                obj['subtask'] = ApiClient.convertToType(data['subtask'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FieldsIssueType</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FieldsIssueType</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['entityId'] && !(typeof data['entityId'] === 'string' || data['entityId'] instanceof String)) {
            throw new Error("Expected the field `entityId` to be a primitive type in the JSON string but got " + data['entityId']);
        }
        // ensure the json data is a string
        if (data['iconUrl'] && !(typeof data['iconUrl'] === 'string' || data['iconUrl'] instanceof String)) {
            throw new Error("Expected the field `iconUrl` to be a primitive type in the JSON string but got " + data['iconUrl']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `scope`
        if (data['scope']) { // data not null
          IssueTypeDetailsScope.validateJSON(data['scope']);
        }
        // ensure the json data is a string
        if (data['self'] && !(typeof data['self'] === 'string' || data['self'] instanceof String)) {
            throw new Error("Expected the field `self` to be a primitive type in the JSON string but got " + data['self']);
        }

        return true;
    }


}



/**
 * The ID of the issue type's avatar.
 * @member {Number} avatarId
 */
FieldsIssueType.prototype['avatarId'] = undefined;

/**
 * The description of the issue type.
 * @member {String} description
 */
FieldsIssueType.prototype['description'] = undefined;

/**
 * Unique ID for next-gen projects.
 * @member {String} entityId
 */
FieldsIssueType.prototype['entityId'] = undefined;

/**
 * Hierarchy level of the issue type.
 * @member {Number} hierarchyLevel
 */
FieldsIssueType.prototype['hierarchyLevel'] = undefined;

/**
 * The URL of the issue type's avatar.
 * @member {String} iconUrl
 */
FieldsIssueType.prototype['iconUrl'] = undefined;

/**
 * The ID of the issue type.
 * @member {String} id
 */
FieldsIssueType.prototype['id'] = undefined;

/**
 * The name of the issue type.
 * @member {String} name
 */
FieldsIssueType.prototype['name'] = undefined;

/**
 * @member {module:model/IssueTypeDetailsScope} scope
 */
FieldsIssueType.prototype['scope'] = undefined;

/**
 * The URL of these issue type details.
 * @member {String} self
 */
FieldsIssueType.prototype['self'] = undefined;

/**
 * Whether this issue type is used to create subtasks.
 * @member {Boolean} subtask
 */
FieldsIssueType.prototype['subtask'] = undefined;


// Implement IssueTypeDetails interface:
/**
 * The ID of the issue type's avatar.
 * @member {Number} avatarId
 */
IssueTypeDetails.prototype['avatarId'] = undefined;
/**
 * The description of the issue type.
 * @member {String} description
 */
IssueTypeDetails.prototype['description'] = undefined;
/**
 * Unique ID for next-gen projects.
 * @member {String} entityId
 */
IssueTypeDetails.prototype['entityId'] = undefined;
/**
 * Hierarchy level of the issue type.
 * @member {Number} hierarchyLevel
 */
IssueTypeDetails.prototype['hierarchyLevel'] = undefined;
/**
 * The URL of the issue type's avatar.
 * @member {String} iconUrl
 */
IssueTypeDetails.prototype['iconUrl'] = undefined;
/**
 * The ID of the issue type.
 * @member {String} id
 */
IssueTypeDetails.prototype['id'] = undefined;
/**
 * The name of the issue type.
 * @member {String} name
 */
IssueTypeDetails.prototype['name'] = undefined;
/**
 * @member {module:model/IssueTypeDetailsScope} scope
 */
IssueTypeDetails.prototype['scope'] = undefined;
/**
 * The URL of these issue type details.
 * @member {String} self
 */
IssueTypeDetails.prototype['self'] = undefined;
/**
 * Whether this issue type is used to create subtasks.
 * @member {Boolean} subtask
 */
IssueTypeDetails.prototype['subtask'] = undefined;




export default FieldsIssueType;

