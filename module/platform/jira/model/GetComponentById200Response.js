/**
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GetComponentById200Response model module.
 * @module model/GetComponentById200Response
 * @version 1001.0.0
 */
class GetComponentById200Response {
    /**
     * Constructs a new <code>GetComponentById200Response</code>.
     * Data related to a specific component in a specific workspace that is affected by incidents. 
     * @alias module:model/GetComponentById200Response
     * @param schemaVersion {module:model/GetComponentById200Response.SchemaVersionEnum} The DevOpsComponentData schema version used for this devops component data.  Placeholder to support potential schema changes in the future. 
     * @param id {String} The identifier for the DevOps Component. Must be unique for a given Provider. 
     * @param updateSequenceNumber {Number} An ID used to apply an ordering to updates for this DevOps Component in the case of out-of-order receipt of update requests.  This can be any monotonically increasing number. A suggested implementation is to use epoch millis from the Provider system, but other alternatives are valid (e.g. a Provider could store a counter against each DevOps Component and increment that on each update to Jira).  Updates for a DevOps Component that are received with an updateSqeuenceId lower than what is currently stored will be ignored. 
     * @param name {String} The human-readable name for the DevOps Component. Will be shown in the UI. 
     * @param description {String} A description of the DevOps Component in Markdown format. Will be shown in the UI. 
     * @param url {String} A URL users can use to link to a summary view of this devops component, if appropriate.  This could be any location that makes sense in the Provider system (e.g. if the summary information comes from a specific project, it might make sense to link the user to the component in that project). 
     * @param avatarUrl {String} A URL to display a logo representing this devops component, if available. 
     * @param tier {module:model/GetComponentById200Response.TierEnum} The tier of the component. Will be shown in the UI. 
     * @param componentType {module:model/GetComponentById200Response.ComponentTypeEnum} The type of the component. Will be shown in the UI. 
     * @param lastUpdated {Date} The last-updated timestamp to present to the user the last time the DevOps Component was updated.  Expected format is an RFC3339 formatted string. 
     */
    constructor(schemaVersion, id, updateSequenceNumber, name, description, url, avatarUrl, tier, componentType, lastUpdated) { 
        
        GetComponentById200Response.initialize(this, schemaVersion, id, updateSequenceNumber, name, description, url, avatarUrl, tier, componentType, lastUpdated);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, schemaVersion, id, updateSequenceNumber, name, description, url, avatarUrl, tier, componentType, lastUpdated) { 
        obj['schemaVersion'] = schemaVersion || '1.0';
        obj['id'] = id;
        obj['updateSequenceNumber'] = updateSequenceNumber;
        obj['name'] = name;
        obj['description'] = description;
        obj['url'] = url;
        obj['avatarUrl'] = avatarUrl;
        obj['tier'] = tier;
        obj['componentType'] = componentType;
        obj['lastUpdated'] = lastUpdated;
    }

    /**
     * Constructs a <code>GetComponentById200Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetComponentById200Response} obj Optional instance to populate.
     * @return {module:model/GetComponentById200Response} The populated <code>GetComponentById200Response</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetComponentById200Response();

            if (data.hasOwnProperty('schemaVersion')) {
                obj['schemaVersion'] = ApiClient.convertToType(data['schemaVersion'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('updateSequenceNumber')) {
                obj['updateSequenceNumber'] = ApiClient.convertToType(data['updateSequenceNumber'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('providerName')) {
                obj['providerName'] = ApiClient.convertToType(data['providerName'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('avatarUrl')) {
                obj['avatarUrl'] = ApiClient.convertToType(data['avatarUrl'], 'String');
            }
            if (data.hasOwnProperty('tier')) {
                obj['tier'] = ApiClient.convertToType(data['tier'], 'String');
            }
            if (data.hasOwnProperty('componentType')) {
                obj['componentType'] = ApiClient.convertToType(data['componentType'], 'String');
            }
            if (data.hasOwnProperty('lastUpdated')) {
                obj['lastUpdated'] = ApiClient.convertToType(data['lastUpdated'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetComponentById200Response</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetComponentById200Response</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GetComponentById200Response.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['schemaVersion'] && !(typeof data['schemaVersion'] === 'string' || data['schemaVersion'] instanceof String)) {
            throw new Error("Expected the field `schemaVersion` to be a primitive type in the JSON string but got " + data['schemaVersion']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['providerName'] && !(typeof data['providerName'] === 'string' || data['providerName'] instanceof String)) {
            throw new Error("Expected the field `providerName` to be a primitive type in the JSON string but got " + data['providerName']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['avatarUrl'] && !(typeof data['avatarUrl'] === 'string' || data['avatarUrl'] instanceof String)) {
            throw new Error("Expected the field `avatarUrl` to be a primitive type in the JSON string but got " + data['avatarUrl']);
        }
        // ensure the json data is a string
        if (data['tier'] && !(typeof data['tier'] === 'string' || data['tier'] instanceof String)) {
            throw new Error("Expected the field `tier` to be a primitive type in the JSON string but got " + data['tier']);
        }
        // ensure the json data is a string
        if (data['componentType'] && !(typeof data['componentType'] === 'string' || data['componentType'] instanceof String)) {
            throw new Error("Expected the field `componentType` to be a primitive type in the JSON string but got " + data['componentType']);
        }

        return true;
    }


}

GetComponentById200Response.RequiredProperties = ["schemaVersion", "id", "updateSequenceNumber", "name", "description", "url", "avatarUrl", "tier", "componentType", "lastUpdated"];

/**
 * The DevOpsComponentData schema version used for this devops component data.  Placeholder to support potential schema changes in the future. 
 * @member {module:model/GetComponentById200Response.SchemaVersionEnum} schemaVersion
 * @default '1.0'
 */
GetComponentById200Response.prototype['schemaVersion'] = '1.0';

/**
 * The identifier for the DevOps Component. Must be unique for a given Provider. 
 * @member {String} id
 */
GetComponentById200Response.prototype['id'] = undefined;

/**
 * An ID used to apply an ordering to updates for this DevOps Component in the case of out-of-order receipt of update requests.  This can be any monotonically increasing number. A suggested implementation is to use epoch millis from the Provider system, but other alternatives are valid (e.g. a Provider could store a counter against each DevOps Component and increment that on each update to Jira).  Updates for a DevOps Component that are received with an updateSqeuenceId lower than what is currently stored will be ignored. 
 * @member {Number} updateSequenceNumber
 */
GetComponentById200Response.prototype['updateSequenceNumber'] = undefined;

/**
 * The human-readable name for the DevOps Component. Will be shown in the UI. 
 * @member {String} name
 */
GetComponentById200Response.prototype['name'] = undefined;

/**
 * The human-readable name for the Provider that owns this DevOps Component. Will be shown in the UI. 
 * @member {String} providerName
 */
GetComponentById200Response.prototype['providerName'] = undefined;

/**
 * A description of the DevOps Component in Markdown format. Will be shown in the UI. 
 * @member {String} description
 */
GetComponentById200Response.prototype['description'] = undefined;

/**
 * A URL users can use to link to a summary view of this devops component, if appropriate.  This could be any location that makes sense in the Provider system (e.g. if the summary information comes from a specific project, it might make sense to link the user to the component in that project). 
 * @member {String} url
 */
GetComponentById200Response.prototype['url'] = undefined;

/**
 * A URL to display a logo representing this devops component, if available. 
 * @member {String} avatarUrl
 */
GetComponentById200Response.prototype['avatarUrl'] = undefined;

/**
 * The tier of the component. Will be shown in the UI. 
 * @member {module:model/GetComponentById200Response.TierEnum} tier
 */
GetComponentById200Response.prototype['tier'] = undefined;

/**
 * The type of the component. Will be shown in the UI. 
 * @member {module:model/GetComponentById200Response.ComponentTypeEnum} componentType
 */
GetComponentById200Response.prototype['componentType'] = undefined;

/**
 * The last-updated timestamp to present to the user the last time the DevOps Component was updated.  Expected format is an RFC3339 formatted string. 
 * @member {Date} lastUpdated
 */
GetComponentById200Response.prototype['lastUpdated'] = undefined;





/**
 * Allowed values for the <code>schemaVersion</code> property.
 * @enum {String}
 * @readonly
 */
GetComponentById200Response['SchemaVersionEnum'] = {

    /**
     * value: "1.0"
     * @const
     */
    "1.0": "1.0"
};


/**
 * Allowed values for the <code>tier</code> property.
 * @enum {String}
 * @readonly
 */
GetComponentById200Response['TierEnum'] = {

    /**
     * value: "Tier 1"
     * @const
     */
    "1": "Tier 1",

    /**
     * value: "Tier 2"
     * @const
     */
    "2": "Tier 2",

    /**
     * value: "Tier 3"
     * @const
     */
    "3": "Tier 3",

    /**
     * value: "Tier 4"
     * @const
     */
    "4": "Tier 4"
};


/**
 * Allowed values for the <code>componentType</code> property.
 * @enum {String}
 * @readonly
 */
GetComponentById200Response['ComponentTypeEnum'] = {

    /**
     * value: "Service"
     * @const
     */
    "Service": "Service",

    /**
     * value: "Application"
     * @const
     */
    "Application": "Application",

    /**
     * value: "Library"
     * @const
     */
    "Library": "Library",

    /**
     * value: "Capability"
     * @const
     */
    "Capability": "Capability",

    /**
     * value: "Cloud resource"
     * @const
     */
    "Cloud resource": "Cloud resource",

    /**
     * value: "Data pipeline"
     * @const
     */
    "Data pipeline": "Data pipeline",

    /**
     * value: "Machine learning model"
     * @const
     */
    "Machine learning model": "Machine learning model",

    /**
     * value: "UI element"
     * @const
     */
    "UI element": "UI element",

    /**
     * value: "Website"
     * @const
     */
    "Website": "Website",

    /**
     * value: "Other"
     * @const
     */
    "Other": "Other"
};



export default GetComponentById200Response;

