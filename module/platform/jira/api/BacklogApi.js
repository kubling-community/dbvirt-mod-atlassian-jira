/**
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Backlog service.
* @module api/BacklogApi
* @version 1001.0.0
*/
export default class BacklogApi {

    /**
    * Constructs a new BacklogApi. 
    * @alias module:api/BacklogApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the moveIssuesToBacklog operation.
     * @callback module:api/BacklogApi~moveIssuesToBacklogCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Move issues to backlog
     * Move issues to the backlog.   This operation is equivalent to remove future and active sprints from a given set of issues. At most 50 issues may be moved at once.
     * @param {module:model/MoveIssuesToBacklogRequest} moveIssuesToBacklogRequest 
     * @param {module:api/BacklogApi~moveIssuesToBacklogCallback} callback The callback function, accepting three arguments: error, data, response
     */
    moveIssuesToBacklog(moveIssuesToBacklogRequest, callback) {
      let postBody = moveIssuesToBacklogRequest;
      // verify the required parameter 'moveIssuesToBacklogRequest' is set
      if (moveIssuesToBacklogRequest === undefined || moveIssuesToBacklogRequest === null) {
        throw new Error("Missing the required parameter 'moveIssuesToBacklogRequest' when calling moveIssuesToBacklog");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/agile/1.0/backlog/issue', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the moveIssuesToBacklogForBoard operation.
     * @callback module:api/BacklogApi~moveIssuesToBacklogForBoardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Move issues to backlog for board
     * Move issues to the backlog of a particular board (if they are already on that board).   This operation is equivalent to remove future and active sprints from a given set of issues if the board has sprints If the board does not have sprints this will put the issues back into the backlog from the board. At most 50 issues may be moved at once.
     * @param {Number} boardId 
     * @param {module:model/MoveIssuesToBacklogForBoardRequest} moveIssuesToBacklogForBoardRequest 
     * @param {module:api/BacklogApi~moveIssuesToBacklogForBoardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    moveIssuesToBacklogForBoard(boardId, moveIssuesToBacklogForBoardRequest, callback) {
      let postBody = moveIssuesToBacklogForBoardRequest;
      // verify the required parameter 'boardId' is set
      if (boardId === undefined || boardId === null) {
        throw new Error("Missing the required parameter 'boardId' when calling moveIssuesToBacklogForBoard");
      }
      // verify the required parameter 'moveIssuesToBacklogForBoardRequest' is set
      if (moveIssuesToBacklogForBoardRequest === undefined || moveIssuesToBacklogForBoardRequest === null) {
        throw new Error("Missing the required parameter 'moveIssuesToBacklogForBoardRequest' when calling moveIssuesToBacklogForBoard");
      }

      let pathParams = {
        'boardId': boardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/agile/1.0/backlog/{boardId}/issue', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
