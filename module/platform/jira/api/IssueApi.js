/**
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Issue service.
* @module api/IssueApi
* @version 1001.0.0
*/
export default class IssueApi {

    /**
    * Constructs a new IssueApi. 
    * @alias module:api/IssueApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the estimateIssueForBoard operation.
     * @callback module:api/IssueApi~estimateIssueForBoardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Estimate issue for board
     * Updates the estimation of the issue. boardId param is required. This param determines which field will be updated on a issue.  Note that this resource changes the estimation field of the issue regardless of appearance the field on the screen.  Original time tracking estimation field accepts estimation in formats like \"1w\", \"2d\", \"3h\", \"20m\" or number which represent number of minutes. However, internally the field stores and returns the estimation as a number of seconds.  The field used for estimation on the given board can be obtained from [board configuration resource](#agile/1.0/board-getConfiguration). More information about the field are returned by [edit meta resource](#api-rest-api-3-issue-issueIdOrKey-editmeta-get) or [field resource](#api-rest-api-3-field-get).
     * @param {String} issueIdOrKey The ID or key of the requested issue.
     * @param {module:model/EstimateIssueForBoardRequest} estimateIssueForBoardRequest bean that contains value of a new estimation.
     * @param {Object} opts Optional parameters
     * @param {Number} [boardId] The ID of the board required to determine which field is used for estimation.
     * @param {module:api/IssueApi~estimateIssueForBoardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    estimateIssueForBoard(issueIdOrKey, estimateIssueForBoardRequest, opts, callback) {
      opts = opts || {};
      let postBody = estimateIssueForBoardRequest;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling estimateIssueForBoard");
      }
      // verify the required parameter 'estimateIssueForBoardRequest' is set
      if (estimateIssueForBoardRequest === undefined || estimateIssueForBoardRequest === null) {
        throw new Error("Missing the required parameter 'estimateIssueForBoardRequest' when calling estimateIssueForBoard");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
        'boardId': opts['boardId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/agile/1.0/issue/{issueIdOrKey}/estimation', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIssue operation.
     * @callback module:api/IssueApi~getIssueCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get issue
     * Returns a single issue, for a given issue ID or issue key. Issues returned from this resource include Agile fields, like sprint, closedSprints, flagged, and epic.
     * @param {String} issueIdOrKey The ID or key of the requested issue.
     * @param {Object} opts Optional parameters
     * @param {Array.<Object>} [fields] The list of fields to return for each issue. By default, all navigable and Agile fields are returned.
     * @param {String} [expand] A comma-separated list of the parameters to expand.
     * @param {Boolean} [updateHistory] A boolean indicating whether the issue retrieved by this method should be added to the current user's issue history
     * @param {module:api/IssueApi~getIssueCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getIssue(issueIdOrKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling getIssue");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'expand': opts['expand'],
        'updateHistory': opts['updateHistory']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/agile/1.0/issue/{issueIdOrKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIssueEstimationForBoard operation.
     * @callback module:api/IssueApi~getIssueEstimationForBoardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get issue estimation for board
     * Returns the estimation of the issue and a fieldId of the field that is used for it. `boardId` param is required. This param determines which field will be updated on a issue.  Original time internally stores and returns the estimation as a number of seconds.  The field used for estimation on the given board can be obtained from [board configuration resource](#agile/1.0/board-getConfiguration). More information about the field are returned by [edit meta resource](#api-rest-api-3-issue-getEditIssueMeta) or [field resource](#api-rest-api-3-field-get).
     * @param {String} issueIdOrKey The ID or key of the requested issue.
     * @param {Object} opts Optional parameters
     * @param {Number} [boardId] The ID of the board required to determine which field is used for estimation.
     * @param {module:api/IssueApi~getIssueEstimationForBoardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getIssueEstimationForBoard(issueIdOrKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling getIssueEstimationForBoard");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
        'boardId': opts['boardId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/agile/1.0/issue/{issueIdOrKey}/estimation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rankIssues operation.
     * @callback module:api/IssueApi~rankIssuesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rank issues
     * Moves (ranks) issues before or after a given issue. At most 50 issues may be ranked at once.  This operation may fail for some issues, although this will be rare. In that case the 207 status code is returned for the whole response and detailed information regarding each issue is available in the response body.  If rankCustomFieldId is not defined, the default rank field will be used.
     * @param {module:model/MoveIssuesToBacklogForBoardRequest} moveIssuesToBacklogForBoardRequest bean which contains list of issues to rank and information where it should be ranked.
     * @param {module:api/IssueApi~rankIssuesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    rankIssues(moveIssuesToBacklogForBoardRequest, callback) {
      let postBody = moveIssuesToBacklogForBoardRequest;
      // verify the required parameter 'moveIssuesToBacklogForBoardRequest' is set
      if (moveIssuesToBacklogForBoardRequest === undefined || moveIssuesToBacklogForBoardRequest === null) {
        throw new Error("Missing the required parameter 'moveIssuesToBacklogForBoardRequest' when calling rankIssues");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/agile/1.0/issue/rank', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
