/**
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ExistsForPropertiesResponse from '../model/ExistsForPropertiesResponse';
import Repository from '../model/Repository';
import StoreDevinfoResult from '../model/StoreDevinfoResult';

/**
* DevelopmentInformation service.
* @module api/DevelopmentInformationApi
* @version 1001.0.0
*/
export default class DevelopmentInformationApi {

    /**
    * Constructs a new DevelopmentInformationApi. 
    * @alias module:api/DevelopmentInformationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteByProperties operation.
     * @callback module:api/DevelopmentInformationApi~deleteByPropertiesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete development information by properties
     * Deletes development information entities which have all the provided properties. Repositories which have properties that match ALL of the properties (i.e. treated as an AND), and all their related development information (such as commits, branches and pull requests), will be deleted. For example if request is `DELETE bulk?accountId=123&projectId=ABC` entities which have properties `accountId=123` and `projectId=ABC` will be deleted. Optional param `_updateSequenceId` is no longer supported. Deletion is performed asynchronously: specified entities will eventually be removed from Jira. 
     * @param {String} authorization All requests must be signed with either a Connect JWT token or OAuth token for an on-premise integration that corresponds to an app installed in Jira. If the JWT token corresponds to a Connect app that does not define the jiraDevelopmentTool module it will be rejected with a 403. See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations.
     * @param {Object} opts Optional parameters
     * @param {Number} [updateSequenceId] An optional property to use to control deletion. Only stored data with an updateSequenceId less than or equal to that provided will be deleted. This can be used to help ensure submit/delete requests are applied correctly if they are issued close together. 
     * @param {module:api/DevelopmentInformationApi~deleteByPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteByProperties(authorization, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteByProperties");
      }

      let pathParams = {
      };
      let queryParams = {
        '_updateSequenceId': opts['updateSequenceId']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/devinfo/0.10/bulkByProperties', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEntity operation.
     * @callback module:api/DevelopmentInformationApi~deleteEntityCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete development information entity
     * Deletes particular development information entity. Deletion is performed asynchronously.
     * @param {String} repositoryId 
     * @param {module:model/String} entityType 
     * @param {String} entityId 
     * @param {String} authorization All requests must be signed with either a Connect JWT token or OAuth token for an on-premise integration that corresponds to an app installed in Jira. If the JWT token corresponds to a Connect app that does not define the jiraDevelopmentTool module it will be rejected with a 403. See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations.
     * @param {Object} opts Optional parameters
     * @param {Number} [updateSequenceId] An optional property to use to control deletion. Only stored data with an updateSequenceId less than or equal to that provided will be deleted. This can be used to help ensure submit/delete requests are applied correctly if they are issued close together. 
     * @param {module:api/DevelopmentInformationApi~deleteEntityCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteEntity(repositoryId, entityType, entityId, authorization, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'repositoryId' is set
      if (repositoryId === undefined || repositoryId === null) {
        throw new Error("Missing the required parameter 'repositoryId' when calling deleteEntity");
      }
      // verify the required parameter 'entityType' is set
      if (entityType === undefined || entityType === null) {
        throw new Error("Missing the required parameter 'entityType' when calling deleteEntity");
      }
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling deleteEntity");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteEntity");
      }

      let pathParams = {
        'repositoryId': repositoryId,
        'entityType': entityType,
        'entityId': entityId
      };
      let queryParams = {
        '_updateSequenceId': opts['updateSequenceId']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/devinfo/0.10/repository/{repositoryId}/{entityType}/{entityId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRepository operation.
     * @callback module:api/DevelopmentInformationApi~deleteRepositoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete repository
     * Deletes the repository data stored by the given ID and all related development information entities. Deletion is performed asynchronously.
     * @param {String} repositoryId The ID of repository to delete
     * @param {String} authorization All requests must be signed with either a Connect JWT token or OAuth token for an on-premise integration that corresponds to an app installed in Jira. If the JWT token corresponds to a Connect app that does not define the jiraDevelopmentTool module it will be rejected with a 403. See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations.
     * @param {Object} opts Optional parameters
     * @param {Number} [updateSequenceId] An optional property to use to control deletion. Only stored data with an updateSequenceId less than or equal to that provided will be deleted. This can be used to help ensure submit/delete requests are applied correctly if they are issued close together. 
     * @param {module:api/DevelopmentInformationApi~deleteRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRepository(repositoryId, authorization, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'repositoryId' is set
      if (repositoryId === undefined || repositoryId === null) {
        throw new Error("Missing the required parameter 'repositoryId' when calling deleteRepository");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteRepository");
      }

      let pathParams = {
        'repositoryId': repositoryId
      };
      let queryParams = {
        '_updateSequenceId': opts['updateSequenceId']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/devinfo/0.10/repository/{repositoryId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the existsByProperties operation.
     * @callback module:api/DevelopmentInformationApi~existsByPropertiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExistsForPropertiesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if data exists for the supplied properties
     * Checks if repositories which have all the provided properties exists. For example, if request is `GET existsByProperties?accountId=123&projectId=ABC` then result will be positive only if there is at least one repository with both properties `accountId=123` and `projectId=ABC`. Special property `_updateSequenceId` can be used to filter all entities with updateSequenceId less or equal than the value specified. In addition to the optional `_updateSequenceId`, one or more query params must be supplied to specify properties to search by. 
     * @param {String} authorization All requests must be signed with either a Connect JWT token or OAuth token for an on-premise integration that corresponds to an app installed in Jira. If the JWT token corresponds to a Connect app that does not define the jiraDevelopmentTool module it will be rejected with a 403. See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations.
     * @param {Object} opts Optional parameters
     * @param {Number} [updateSequenceId] An optional property. Filters out entities and repositories which have updateSequenceId greater than specified. 
     * @param {module:api/DevelopmentInformationApi~existsByPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExistsForPropertiesResponse}
     */
    existsByProperties(authorization, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling existsByProperties");
      }

      let pathParams = {
      };
      let queryParams = {
        '_updateSequenceId': opts['updateSequenceId']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExistsForPropertiesResponse;
      return this.apiClient.callApi(
        '/rest/devinfo/0.10/existsByProperties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRepository operation.
     * @callback module:api/DevelopmentInformationApi~getRepositoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Repository} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get repository
     * For the specified repository ID, retrieves the repository and the most recent 400 development information entities. The result will be what is currently stored, ignoring any pending updates or deletes.
     * @param {String} repositoryId The ID of repository to fetch
     * @param {String} authorization All requests must be signed with either a Connect JWT token or OAuth token for an on-premise integration that corresponds to an app installed in Jira. If the JWT token corresponds to a Connect app that does not define the jiraDevelopmentTool module it will be rejected with a 403. See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations.
     * @param {module:api/DevelopmentInformationApi~getRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Repository}
     */
    getRepository(repositoryId, authorization, callback) {
      let postBody = null;
      // verify the required parameter 'repositoryId' is set
      if (repositoryId === undefined || repositoryId === null) {
        throw new Error("Missing the required parameter 'repositoryId' when calling getRepository");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getRepository");
      }

      let pathParams = {
        'repositoryId': repositoryId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Repository;
      return this.apiClient.callApi(
        '/rest/devinfo/0.10/repository/{repositoryId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storeDevelopmentInformation operation.
     * @callback module:api/DevelopmentInformationApi~storeDevelopmentInformationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StoreDevinfoResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Store development information
     * Stores development information provided in the request to make it available when viewing issues in Jira. Existing repository and entity data for the same ID will be replaced if the updateSequenceId of existing data is less than the incoming data. Submissions are performed asynchronously. Submitted data will eventually be available in Jira; most updates are available within a short period of time, but may take some time during peak load and/or maintenance times.
     * @param {String} authorization All requests must be signed with either a Connect JWT token or OAuth token for an on-premise integration that corresponds to an app installed in Jira. If the JWT token corresponds to a Connect app that does not define the jiraDevelopmentTool module it will be rejected with a 403. See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations.
     * @param {module:model/DevInformation} devInformation Request object, which contains development information
     * @param {module:api/DevelopmentInformationApi~storeDevelopmentInformationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StoreDevinfoResult}
     */
    storeDevelopmentInformation(authorization, devInformation, callback) {
      let postBody = devInformation;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling storeDevelopmentInformation");
      }
      // verify the required parameter 'devInformation' is set
      if (devInformation === undefined || devInformation === null) {
        throw new Error("Missing the required parameter 'devInformation' when calling storeDevelopmentInformation");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StoreDevinfoResult;
      return this.apiClient.callApi(
        '/rest/devinfo/0.10/bulk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
