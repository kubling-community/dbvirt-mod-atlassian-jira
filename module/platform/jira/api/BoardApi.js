/**
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetAllBoards200Response from '../model/GetAllBoards200Response';
import GetAllBoards200ResponseValuesInner from '../model/GetAllBoards200ResponseValuesInner';
import GetAllQuickFilters200Response from '../model/GetAllQuickFilters200Response';
import GetAllQuickFilters200ResponseValuesInner from '../model/GetAllQuickFilters200ResponseValuesInner';
import GetBoardByFilterId200Response from '../model/GetBoardByFilterId200Response';
import GetConfiguration200Response from '../model/GetConfiguration200Response';
import GetFeaturesForBoard200Response from '../model/GetFeaturesForBoard200Response';
import GetReportsForBoard200Response from '../model/GetReportsForBoard200Response';
import SearchResults from '../model/SearchResults';

/**
* Board service.
* @module api/BoardApi
* @version 1001.0.0
*/
export default class BoardApi {

    /**
    * Constructs a new BoardApi. 
    * @alias module:api/BoardApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createBoard operation.
     * @callback module:api/BoardApi~createBoardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAllBoards200ResponseValuesInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create board
     * Creates a new board. Board name, type and filter ID is required.   *  `name` \\- Must be less than 255 characters.  *  `type` \\- Valid values: scrum, kanban  *  `filterId` \\- ID of a filter that the user has permissions to view. Note, if the user does not have the 'Create shared objects' permission and tries to create a shared board, a private board will be created instead (remember that board sharing depends on the filter sharing).  *  `location` \\- The container that the board will be located in. `location` must include the `type` property (Valid values: project, user). If choosing 'project', then a project must be specified by a `projectKeyOrId` property in `location`. If choosing 'user', the current user is chosen by default. The `projectKeyOrId` property should not be provided.  Note:   *  If you want to create a new project with an associated board, use the [Jira platform REST API](https://docs.atlassian.com/jira/REST/latest). For more information, see the [Create project](#api-rest-api-3-project-post) method. The `projectTypeKey` for software boards must be 'software' and the `projectTemplateKey` must be either `com.pyxis.greenhopper.jira:gh-kanban-template` or `com.pyxis.greenhopper.jira:gh-scrum-template`.  *  You can create a filter using the [Jira REST API](https://docs.atlassian.com/jira/REST/latest). For more information, see the [Create filter](#api-rest-api-3-filter-post) method.  *  If you do not ORDER BY the Rank field for the filter of your board, you will not be able to reorder issues on the board.
     * @param {module:model/CreateBoardRequest} createBoardRequest 
     * @param {module:api/BoardApi~createBoardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAllBoards200ResponseValuesInner}
     */
    createBoard(createBoardRequest, callback) {
      let postBody = createBoardRequest;
      // verify the required parameter 'createBoardRequest' is set
      if (createBoardRequest === undefined || createBoardRequest === null) {
        throw new Error("Missing the required parameter 'createBoardRequest' when calling createBoard");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetAllBoards200ResponseValuesInner;
      return this.apiClient.callApi(
        '/rest/agile/1.0/board', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBoard operation.
     * @callback module:api/BoardApi~deleteBoardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete board
     * Deletes the board. Admin without the view permission can still remove the board.
     * @param {Number} boardId ID of the board to be deleted
     * @param {module:api/BoardApi~deleteBoardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBoard(boardId, callback) {
      let postBody = null;
      // verify the required parameter 'boardId' is set
      if (boardId === undefined || boardId === null) {
        throw new Error("Missing the required parameter 'boardId' when calling deleteBoard");
      }

      let pathParams = {
        'boardId': boardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/agile/1.0/board/{boardId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBoardProperty operation.
     * @callback module:api/BoardApi~deleteBoardPropertyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete board property
     * Removes the property from the board identified by the id. Ths user removing the property is required to have permissions to modify the board.
     * @param {String} boardId the id of the board from which the property will be removed.
     * @param {String} propertyKey the key of the property to remove.
     * @param {module:api/BoardApi~deleteBoardPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBoardProperty(boardId, propertyKey, callback) {
      let postBody = null;
      // verify the required parameter 'boardId' is set
      if (boardId === undefined || boardId === null) {
        throw new Error("Missing the required parameter 'boardId' when calling deleteBoardProperty");
      }
      // verify the required parameter 'propertyKey' is set
      if (propertyKey === undefined || propertyKey === null) {
        throw new Error("Missing the required parameter 'propertyKey' when calling deleteBoardProperty");
      }

      let pathParams = {
        'boardId': boardId,
        'propertyKey': propertyKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/agile/1.0/board/{boardId}/properties/{propertyKey}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllBoards operation.
     * @callback module:api/BoardApi~getAllBoardsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAllBoards200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all boards
     * Returns all boards. This only includes boards that the user has permission to view.  **Deprecation notice:** The required OAuth 2.0 scopes will be updated on February 15, 2024.   *  `read:board-scope:jira-software`, `read:project:jira`
     * @param {Object} opts Optional parameters
     * @param {Number} [startAt = 0)] The starting index of the returned boards. Base index: 0. See the 'Pagination' section at the top of this page for more details.
     * @param {Number} [maxResults = 50)] The maximum number of boards to return per page. See the 'Pagination' section at the top of this page for more details.
     * @param {Object.<String, Object>} [type] Filters results to boards of the specified types. Valid values: scrum, kanban, simple.
     * @param {String} [name] Filters results to boards that match or partially match the specified name.
     * @param {String} [projectKeyOrId] Filters results to boards that are relevant to a project. Relevance means that the jql filter defined in board contains a reference to a project.
     * @param {String} [accountIdLocation] 
     * @param {String} [projectLocation] 
     * @param {Boolean} [includePrivate] Appends private boards to the end of the list. The name and type fields are excluded for security reasons.
     * @param {Boolean} [negateLocationFiltering] If set to true, negate filters used for querying by location. By default false.
     * @param {module:model/String} [orderBy] Ordering of the results by a given field. If not provided, values will not be sorted. Valid values: name.
     * @param {String} [expand] List of fields to expand for each board. Valid values: admins, permissions.
     * @param {Array.<String>} [projectTypeLocation] Filters results to boards that are relevant to a project types. Support Jira Software, Jira Service Management. Valid values: software, service\\_desk. By default software.
     * @param {Number} [filterId] Filters results to boards that are relevant to a filter. Not supported for next-gen boards.
     * @param {module:api/BoardApi~getAllBoardsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAllBoards200Response}
     */
    getAllBoards(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults'],
        'type': opts['type'],
        'name': opts['name'],
        'projectKeyOrId': opts['projectKeyOrId'],
        'accountIdLocation': opts['accountIdLocation'],
        'projectLocation': opts['projectLocation'],
        'includePrivate': opts['includePrivate'],
        'negateLocationFiltering': opts['negateLocationFiltering'],
        'orderBy': opts['orderBy'],
        'expand': opts['expand'],
        'projectTypeLocation': this.apiClient.buildCollectionParam(opts['projectTypeLocation'], 'multi'),
        'filterId': opts['filterId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAllBoards200Response;
      return this.apiClient.callApi(
        '/rest/agile/1.0/board', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllQuickFilters operation.
     * @callback module:api/BoardApi~getAllQuickFiltersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAllQuickFilters200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all quick filters
     * Returns all quick filters from a board, for a given board ID.
     * @param {Number} boardId The ID of the board that contains the requested quick filters.
     * @param {Object} opts Optional parameters
     * @param {Number} [startAt] The starting index of the returned quick filters. Base index: 0. See the 'Pagination' section at the top of this page for more details.
     * @param {Number} [maxResults] The maximum number of sprints to return per page. See the 'Pagination' section at the top of this page for more details.
     * @param {module:api/BoardApi~getAllQuickFiltersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAllQuickFilters200Response}
     */
    getAllQuickFilters(boardId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'boardId' is set
      if (boardId === undefined || boardId === null) {
        throw new Error("Missing the required parameter 'boardId' when calling getAllQuickFilters");
      }

      let pathParams = {
        'boardId': boardId
      };
      let queryParams = {
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAllQuickFilters200Response;
      return this.apiClient.callApi(
        '/rest/agile/1.0/board/{boardId}/quickfilter', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllSprints operation.
     * @callback module:api/BoardApi~getAllSprintsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all sprints
     * Returns all sprints from a board, for a given board ID. This only includes sprints that the user has permission to view.
     * @param {Number} boardId The ID of the board that contains the requested sprints.
     * @param {Object} opts Optional parameters
     * @param {Number} [startAt] The starting index of the returned sprints. Base index: 0. See the 'Pagination' section at the top of this page for more details.
     * @param {Number} [maxResults] The maximum number of sprints to return per page. See the 'Pagination' section at the top of this page for more details.
     * @param {Object.<String, Object>} [state] Filters results to sprints in specified states. Valid values: future, active, closed. You can define multiple states separated by commas, e.g. state=active,closed
     * @param {module:api/BoardApi~getAllSprintsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAllSprints(boardId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'boardId' is set
      if (boardId === undefined || boardId === null) {
        throw new Error("Missing the required parameter 'boardId' when calling getAllSprints");
      }

      let pathParams = {
        'boardId': boardId
      };
      let queryParams = {
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults'],
        'state': opts['state']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/agile/1.0/board/{boardId}/sprint', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllVersions operation.
     * @callback module:api/BoardApi~getAllVersionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all versions
     * Returns all versions from a board, for a given board ID. This only includes versions that the user has permission to view. Note, if the user does not have permission to view the board, no versions will be returned at all. Returned versions are ordered by the name of the project from which they belong and then by sequence defined by user.
     * @param {Number} boardId The ID of the board that contains the requested versions.
     * @param {Object} opts Optional parameters
     * @param {Number} [startAt] The starting index of the returned versions. Base index: 0. See the 'Pagination' section at the top of this page for more details.
     * @param {Number} [maxResults] The maximum number of versions to return per page. See the 'Pagination' section at the top of this page for more details.
     * @param {String} [released] Filters results to versions that are either released or unreleased. Valid values: true, false.
     * @param {module:api/BoardApi~getAllVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAllVersions(boardId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'boardId' is set
      if (boardId === undefined || boardId === null) {
        throw new Error("Missing the required parameter 'boardId' when calling getAllVersions");
      }

      let pathParams = {
        'boardId': boardId
      };
      let queryParams = {
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults'],
        'released': opts['released']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/agile/1.0/board/{boardId}/version', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBoard operation.
     * @callback module:api/BoardApi~getBoardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAllBoards200ResponseValuesInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get board
     * Returns the board for the given board ID. This board will only be returned if the user has permission to view it. Admins without the view permission will see the board as a private one, so will see only a subset of the board's data (board location for instance).
     * @param {Number} boardId The ID of the requested board.
     * @param {module:api/BoardApi~getBoardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAllBoards200ResponseValuesInner}
     */
    getBoard(boardId, callback) {
      let postBody = null;
      // verify the required parameter 'boardId' is set
      if (boardId === undefined || boardId === null) {
        throw new Error("Missing the required parameter 'boardId' when calling getBoard");
      }

      let pathParams = {
        'boardId': boardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAllBoards200ResponseValuesInner;
      return this.apiClient.callApi(
        '/rest/agile/1.0/board/{boardId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBoardByFilterId operation.
     * @callback module:api/BoardApi~getBoardByFilterIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBoardByFilterId200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get board by filter id
     * Returns any boards which use the provided filter id. This method can be executed by users without a valid software license in order to find which boards are using a particular filter.
     * @param {Number} filterId Filters results to boards that are relevant to a filter. Not supported for next-gen boards.
     * @param {Object} opts Optional parameters
     * @param {Number} [startAt] The starting index of the returned boards. Base index: 0. See the 'Pagination' section at the top of this page for more details.
     * @param {Number} [maxResults] The maximum number of boards to return per page. Default: 50. See the 'Pagination' section at the top of this page for more details.
     * @param {module:api/BoardApi~getBoardByFilterIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBoardByFilterId200Response}
     */
    getBoardByFilterId(filterId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'filterId' is set
      if (filterId === undefined || filterId === null) {
        throw new Error("Missing the required parameter 'filterId' when calling getBoardByFilterId");
      }

      let pathParams = {
        'filterId': filterId
      };
      let queryParams = {
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetBoardByFilterId200Response;
      return this.apiClient.callApi(
        '/rest/agile/1.0/board/filter/{filterId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBoardIssuesForEpic operation.
     * @callback module:api/BoardApi~getBoardIssuesForEpicCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get board issues for epic
     * Returns all issues that belong to an epic on the board, for the given epic ID and the board ID. This only includes issues that the user has permission to view. Issues returned from this resource include Agile fields, like sprint, closedSprints, flagged, and epic. By default, the returned issues are ordered by rank.
     * @param {Number} boardId The ID of the board that contains the requested issues.
     * @param {Number} epicId The ID of the epic that contains the requested issues.
     * @param {Object} opts Optional parameters
     * @param {Number} [startAt] The starting index of the returned issues. Base index: 0. See the 'Pagination' section at the top of this page for more details.
     * @param {Number} [maxResults] The maximum number of issues to return per page. Default: 50. See the 'Pagination' section at the top of this page for more details. Note, the total number of issues returned is limited by the property 'jira.search.views.default.max' in your Jira instance. If you exceed this limit, your results will be truncated.
     * @param {String} [jql] Filters results using a JQL query. If you define an order in your JQL query, it will override the default order of the returned issues.
     * @param {Boolean} [validateQuery] Specifies whether to validate the JQL query or not. Default: true.
     * @param {Array.<Object>} [fields] The list of fields to return for each issue. By default, all navigable and Agile fields are returned.
     * @param {String} [expand] A comma-separated list of the parameters to expand.
     * @param {module:api/BoardApi~getBoardIssuesForEpicCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBoardIssuesForEpic(boardId, epicId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'boardId' is set
      if (boardId === undefined || boardId === null) {
        throw new Error("Missing the required parameter 'boardId' when calling getBoardIssuesForEpic");
      }
      // verify the required parameter 'epicId' is set
      if (epicId === undefined || epicId === null) {
        throw new Error("Missing the required parameter 'epicId' when calling getBoardIssuesForEpic");
      }

      let pathParams = {
        'boardId': boardId,
        'epicId': epicId
      };
      let queryParams = {
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults'],
        'jql': opts['jql'],
        'validateQuery': opts['validateQuery'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/agile/1.0/board/{boardId}/epic/{epicId}/issue', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBoardIssuesForSprint operation.
     * @callback module:api/BoardApi~getBoardIssuesForSprintCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get board issues for sprint
     * Get all issues you have access to that belong to the sprint from the board. Issue returned from this resource contains additional fields like: sprint, closedSprints, flagged and epic. Issues are returned ordered by rank. JQL order has higher priority than default rank.
     * @param {Number} boardId The ID of the board that contains requested issues.
     * @param {Number} sprintId The ID of the sprint that contains requested issues.
     * @param {Object} opts Optional parameters
     * @param {Number} [startAt] The starting index of the returned issues. Base index: 0. See the 'Pagination' section at the top of this page for more details.
     * @param {Number} [maxResults] The maximum number of issues to return per page. See the 'Pagination' section at the top of this page for more details. Note, the total number of issues returned is limited by the property 'jira.search.views.default.max' in your Jira instance. If you exceed this limit, your results will be truncated.
     * @param {String} [jql] Filters results using a JQL query. If you define an order in your JQL query, it will override the default order of the returned issues.   Note that `username` and `userkey` can't be used as search terms for this parameter due to privacy reasons. Use `accountId` instead.
     * @param {Boolean} [validateQuery] Specifies whether to validate the JQL query or not. Default: true.
     * @param {Array.<Object>} [fields] The list of fields to return for each issue. By default, all navigable and Agile fields are returned.
     * @param {String} [expand] A comma-separated list of the parameters to expand.
     * @param {module:api/BoardApi~getBoardIssuesForSprintCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBoardIssuesForSprint(boardId, sprintId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'boardId' is set
      if (boardId === undefined || boardId === null) {
        throw new Error("Missing the required parameter 'boardId' when calling getBoardIssuesForSprint");
      }
      // verify the required parameter 'sprintId' is set
      if (sprintId === undefined || sprintId === null) {
        throw new Error("Missing the required parameter 'sprintId' when calling getBoardIssuesForSprint");
      }

      let pathParams = {
        'boardId': boardId,
        'sprintId': sprintId
      };
      let queryParams = {
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults'],
        'jql': opts['jql'],
        'validateQuery': opts['validateQuery'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/agile/1.0/board/{boardId}/sprint/{sprintId}/issue', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBoardProperty operation.
     * @callback module:api/BoardApi~getBoardPropertyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get board property
     * Returns the value of the property with a given key from the board identified by the provided id. The user who retrieves the property is required to have permissions to view the board.
     * @param {String} boardId the ID of the board from which the property will be returned.
     * @param {String} propertyKey the key of the property to return.
     * @param {module:api/BoardApi~getBoardPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBoardProperty(boardId, propertyKey, callback) {
      let postBody = null;
      // verify the required parameter 'boardId' is set
      if (boardId === undefined || boardId === null) {
        throw new Error("Missing the required parameter 'boardId' when calling getBoardProperty");
      }
      // verify the required parameter 'propertyKey' is set
      if (propertyKey === undefined || propertyKey === null) {
        throw new Error("Missing the required parameter 'propertyKey' when calling getBoardProperty");
      }

      let pathParams = {
        'boardId': boardId,
        'propertyKey': propertyKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/agile/1.0/board/{boardId}/properties/{propertyKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBoardPropertyKeys operation.
     * @callback module:api/BoardApi~getBoardPropertyKeysCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get board property keys
     * Returns the keys of all properties for the board identified by the id. The user who retrieves the property keys is required to have permissions to view the board.
     * @param {String} boardId the ID of the board from which property keys will be returned.
     * @param {module:api/BoardApi~getBoardPropertyKeysCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBoardPropertyKeys(boardId, callback) {
      let postBody = null;
      // verify the required parameter 'boardId' is set
      if (boardId === undefined || boardId === null) {
        throw new Error("Missing the required parameter 'boardId' when calling getBoardPropertyKeys");
      }

      let pathParams = {
        'boardId': boardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/agile/1.0/board/{boardId}/properties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConfiguration operation.
     * @callback module:api/BoardApi~getConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetConfiguration200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get configuration
     * Get the board configuration. The response contains the following fields:   *  `id` \\- ID of the board.  *  `name` \\- Name of the board.  *  `filter` \\- Reference to the filter used by the given board.  *  `location` \\- Reference to the container that the board is located in. Includes the container type (Valid values: project, user).  *  `subQuery` (Kanban only) - JQL subquery used by the given board.  *  `columnConfig` \\- The column configuration lists the columns for the board, in the order defined in the column configuration. For each column, it shows the issue status mapping as well as the constraint type (Valid values: none, issueCount, issueCountExclSubs) for the min/max number of issues. Note, the last column with statuses mapped to it is treated as the \"Done\" column, which means that issues in that column will be marked as already completed.  *  `estimation` (Scrum only) - Contains information about type of estimation used for the board. Valid values: none, issueCount, field. If the estimation type is \"field\", the ID and display name of the field used for estimation is also returned. Note, estimates for an issue can be updated by a PUT /rest/api/3/issue/\\{issueIdOrKey\\} request, however the fields must be on the screen. \"timeoriginalestimate\" field will never be on the screen, so in order to update it \"originalEstimate\" in \"timetracking\" field should be updated.  *  `ranking` \\- Contains information about custom field used for ranking in the given board.
     * @param {Number} boardId The ID of the board for which configuration is requested.
     * @param {module:api/BoardApi~getConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetConfiguration200Response}
     */
    getConfiguration(boardId, callback) {
      let postBody = null;
      // verify the required parameter 'boardId' is set
      if (boardId === undefined || boardId === null) {
        throw new Error("Missing the required parameter 'boardId' when calling getConfiguration");
      }

      let pathParams = {
        'boardId': boardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetConfiguration200Response;
      return this.apiClient.callApi(
        '/rest/agile/1.0/board/{boardId}/configuration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEpics operation.
     * @callback module:api/BoardApi~getEpicsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get epics
     * Returns all epics from the board, for the given board ID. This only includes epics that the user has permission to view. Note, if the user does not have permission to view the board, no epics will be returned at all.
     * @param {Number} boardId The ID of the board that contains the requested epics.
     * @param {Object} opts Optional parameters
     * @param {Number} [startAt] The starting index of the returned epics. Base index: 0. See the 'Pagination' section at the top of this page for more details.
     * @param {Number} [maxResults] The maximum number of epics to return per page. See the 'Pagination' section at the top of this page for more details.
     * @param {String} [done] Filters results to epics that are either done or not done. Valid values: true, false.
     * @param {module:api/BoardApi~getEpicsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getEpics(boardId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'boardId' is set
      if (boardId === undefined || boardId === null) {
        throw new Error("Missing the required parameter 'boardId' when calling getEpics");
      }

      let pathParams = {
        'boardId': boardId
      };
      let queryParams = {
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults'],
        'done': opts['done']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/agile/1.0/board/{boardId}/epic', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFeaturesForBoard operation.
     * @callback module:api/BoardApi~getFeaturesForBoardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetFeaturesForBoard200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get features for board
     * 
     * @param {Number} boardId 
     * @param {module:api/BoardApi~getFeaturesForBoardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetFeaturesForBoard200Response}
     */
    getFeaturesForBoard(boardId, callback) {
      let postBody = null;
      // verify the required parameter 'boardId' is set
      if (boardId === undefined || boardId === null) {
        throw new Error("Missing the required parameter 'boardId' when calling getFeaturesForBoard");
      }

      let pathParams = {
        'boardId': boardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetFeaturesForBoard200Response;
      return this.apiClient.callApi(
        '/rest/agile/1.0/board/{boardId}/features', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIssuesForBacklog operation.
     * @callback module:api/BoardApi~getIssuesForBacklogCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get issues for backlog
     * Returns all issues from the board's backlog, for the given board ID. This only includes issues that the user has permission to view. The backlog contains incomplete issues that are not assigned to any future or active sprint. Note, if the user does not have permission to view the board, no issues will be returned at all. Issues returned from this resource include Agile fields, like sprint, closedSprints, flagged, and epic. By default, the returned issues are ordered by rank.
     * @param {Number} boardId The ID of the board that has the backlog containing the requested issues.
     * @param {Object} opts Optional parameters
     * @param {Number} [startAt] The starting index of the returned issues. Base index: 0. See the 'Pagination' section at the top of this page for more details.
     * @param {Number} [maxResults] The maximum number of issues to return per page. Default: 50. See the 'Pagination' section at the top of this page for more details. Note, the total number of issues returned is limited by the property 'jira.search.views.default.max' in your Jira instance. If you exceed this limit, your results will be truncated.
     * @param {String} [jql] Filters results using a JQL query. If you define an order in your JQL query, it will override the default order of the returned issues.   Note that `username` and `userkey` can't be used as search terms for this parameter due to privacy reasons. Use `accountId` instead.
     * @param {Boolean} [validateQuery] Specifies whether to validate the JQL query or not. Default: true.
     * @param {Array.<Object>} [fields] The list of fields to return for each issue. By default, all navigable and Agile fields are returned.
     * @param {String} [expand] This parameter is currently not used.
     * @param {module:api/BoardApi~getIssuesForBacklogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchResults}
     */
    getIssuesForBacklog(boardId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'boardId' is set
      if (boardId === undefined || boardId === null) {
        throw new Error("Missing the required parameter 'boardId' when calling getIssuesForBacklog");
      }

      let pathParams = {
        'boardId': boardId
      };
      let queryParams = {
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults'],
        'jql': opts['jql'],
        'validateQuery': opts['validateQuery'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SearchResults;
      return this.apiClient.callApi(
        '/rest/agile/1.0/board/{boardId}/backlog', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIssuesForBoard operation.
     * @callback module:api/BoardApi~getIssuesForBoardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get issues for board
     * Returns all issues from a board, for a given board ID. This only includes issues that the user has permission to view. An issue belongs to the board if its status is mapped to the board's column. Epic issues do not belongs to the scrum boards. Note, if the user does not have permission to view the board, no issues will be returned at all. Issues returned from this resource include Agile fields, like sprint, closedSprints, flagged, and epic. By default, the returned issues are ordered by rank.
     * @param {Number} boardId The ID of the board that contains the requested issues.
     * @param {Object} opts Optional parameters
     * @param {Number} [startAt] The starting index of the returned issues. Base index: 0. See the 'Pagination' section at the top of this page for more details.
     * @param {Number} [maxResults] The maximum number of issues to return per page. See the 'Pagination' section at the top of this page for more details. Note, the total number of issues returned is limited by the property 'jira.search.views.default.max' in your Jira instance. If you exceed this limit, your results will be truncated.
     * @param {String} [jql] Filters results using a JQL query. If you define an order in your JQL query, it will override the default order of the returned issues.   Note that `username` and `userkey` can't be used as search terms for this parameter due to privacy reasons. Use `accountId` instead.
     * @param {Boolean} [validateQuery] Specifies whether to validate the JQL query or not. Default: true.
     * @param {Array.<Object>} [fields] The list of fields to return for each issue. By default, all navigable and Agile fields are returned.
     * @param {String} [expand] This parameter is currently not used.
     * @param {module:api/BoardApi~getIssuesForBoardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchResults}
     */
    getIssuesForBoard(boardId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'boardId' is set
      if (boardId === undefined || boardId === null) {
        throw new Error("Missing the required parameter 'boardId' when calling getIssuesForBoard");
      }

      let pathParams = {
        'boardId': boardId
      };
      let queryParams = {
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults'],
        'jql': opts['jql'],
        'validateQuery': opts['validateQuery'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SearchResults;
      return this.apiClient.callApi(
        '/rest/agile/1.0/board/{boardId}/issue', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIssuesWithoutEpicForBoard operation.
     * @callback module:api/BoardApi~getIssuesWithoutEpicForBoardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get issues without epic for board
     * Returns all issues that do not belong to any epic on a board, for a given board ID. This only includes issues that the user has permission to view. Issues returned from this resource include Agile fields, like sprint, closedSprints, flagged, and epic. By default, the returned issues are ordered by rank.
     * @param {Number} boardId The ID of the board that contains the requested issues.
     * @param {Object} opts Optional parameters
     * @param {Number} [startAt] The starting index of the returned issues. Base index: 0. See the 'Pagination' section at the top of this page for more details.
     * @param {Number} [maxResults] The maximum number of issues to return per page. See the 'Pagination' section at the top of this page for more details. Note, the total number of issues returned is limited by the property 'jira.search.views.default.max' in your Jira instance. If you exceed this limit, your results will be truncated.
     * @param {String} [jql] Filters results using a JQL query. If you define an order in your JQL query, it will override the default order of the returned issues.   Note that `username` and `userkey` can't be used as search terms for this parameter due to privacy reasons. Use `accountId` instead.
     * @param {Boolean} [validateQuery] Specifies whether to validate the JQL query or not. Default: true.
     * @param {Array.<Object>} [fields] The list of fields to return for each issue. By default, all navigable and Agile fields are returned.
     * @param {String} [expand] A comma-separated list of the parameters to expand.
     * @param {module:api/BoardApi~getIssuesWithoutEpicForBoardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getIssuesWithoutEpicForBoard(boardId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'boardId' is set
      if (boardId === undefined || boardId === null) {
        throw new Error("Missing the required parameter 'boardId' when calling getIssuesWithoutEpicForBoard");
      }

      let pathParams = {
        'boardId': boardId
      };
      let queryParams = {
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults'],
        'jql': opts['jql'],
        'validateQuery': opts['validateQuery'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/agile/1.0/board/{boardId}/epic/none/issue', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjects operation.
     * @callback module:api/BoardApi~getProjectsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get projects
     * Returns all projects that are associated with the board, for the given board ID. If the user does not have permission to view the board, no projects will be returned at all. Returned projects are ordered by the name.  A project is associated with a board if the board filter contains reference the project or there is an issue from the project that belongs to the board.  The board filter contains reference the project only if JQL query guarantees that returned issues will be returned from the project set defined in JQL. For instance the query `project in (ABC, BCD) AND reporter = admin` have reference to ABC and BCD projects but query `project in (ABC, BCD) OR reporter = admin` doesn't have reference to any project.  An issue belongs to the board if its status is mapped to the board's column. Epic issues do not belongs to the scrum boards.
     * @param {Number} boardId The ID of the board that contains returned projects.
     * @param {Object} opts Optional parameters
     * @param {Number} [startAt] The starting index of the returned projects. Base index: 0. See the 'Pagination' section at the top of this page for more details.
     * @param {Number} [maxResults] The maximum number of projects to return per page. See the 'Pagination' section at the top of this page for more details.
     * @param {module:api/BoardApi~getProjectsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getProjects(boardId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'boardId' is set
      if (boardId === undefined || boardId === null) {
        throw new Error("Missing the required parameter 'boardId' when calling getProjects");
      }

      let pathParams = {
        'boardId': boardId
      };
      let queryParams = {
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/agile/1.0/board/{boardId}/project', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectsFull operation.
     * @callback module:api/BoardApi~getProjectsFullCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get projects full
     * Returns all projects that are statically associated with the board, for the given board ID. Returned projects are ordered by the name.  A project is associated with a board if the board filter contains reference the project.  The board filter contains reference the project only if JQL query guarantees that returned issues will be returned from the project set defined in JQL. For instance the query `project in (ABC, BCD) AND reporter = admin` have reference to ABC and BCD projects but query `project in (ABC, BCD) OR reporter = admin` doesn't have reference to any project.
     * @param {Number} boardId The ID of the board that contains returned projects.
     * @param {module:api/BoardApi~getProjectsFullCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getProjectsFull(boardId, callback) {
      let postBody = null;
      // verify the required parameter 'boardId' is set
      if (boardId === undefined || boardId === null) {
        throw new Error("Missing the required parameter 'boardId' when calling getProjectsFull");
      }

      let pathParams = {
        'boardId': boardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/agile/1.0/board/{boardId}/project/full', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getQuickFilter operation.
     * @callback module:api/BoardApi~getQuickFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAllQuickFilters200ResponseValuesInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get quick filter
     * Returns the quick filter for a given quick filter ID. The quick filter will only be returned if the user can view the board that the quick filter belongs to.
     * @param {Number} boardId 
     * @param {Number} quickFilterId The ID of the requested quick filter.
     * @param {module:api/BoardApi~getQuickFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAllQuickFilters200ResponseValuesInner}
     */
    getQuickFilter(boardId, quickFilterId, callback) {
      let postBody = null;
      // verify the required parameter 'boardId' is set
      if (boardId === undefined || boardId === null) {
        throw new Error("Missing the required parameter 'boardId' when calling getQuickFilter");
      }
      // verify the required parameter 'quickFilterId' is set
      if (quickFilterId === undefined || quickFilterId === null) {
        throw new Error("Missing the required parameter 'quickFilterId' when calling getQuickFilter");
      }

      let pathParams = {
        'boardId': boardId,
        'quickFilterId': quickFilterId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAllQuickFilters200ResponseValuesInner;
      return this.apiClient.callApi(
        '/rest/agile/1.0/board/{boardId}/quickfilter/{quickFilterId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportsForBoard operation.
     * @callback module:api/BoardApi~getReportsForBoardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetReportsForBoard200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get reports for board
     * 
     * @param {Number} boardId 
     * @param {module:api/BoardApi~getReportsForBoardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetReportsForBoard200Response}
     */
    getReportsForBoard(boardId, callback) {
      let postBody = null;
      // verify the required parameter 'boardId' is set
      if (boardId === undefined || boardId === null) {
        throw new Error("Missing the required parameter 'boardId' when calling getReportsForBoard");
      }

      let pathParams = {
        'boardId': boardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetReportsForBoard200Response;
      return this.apiClient.callApi(
        '/rest/agile/1.0/board/{boardId}/reports', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the moveIssuesToBoard operation.
     * @callback module:api/BoardApi~moveIssuesToBoardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Move issues to board
     * Move issues from the backog to the board (if they are already in the backlog of that board).   This operation either moves an issue(s) onto a board from the backlog (by adding it to the issueList for the board) Or transitions the issue(s) to the first column for a kanban board with backlog. At most 50 issues may be moved at once.
     * @param {Number} boardId 
     * @param {module:model/MoveIssuesToBacklogForBoardRequest} moveIssuesToBacklogForBoardRequest 
     * @param {module:api/BoardApi~moveIssuesToBoardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    moveIssuesToBoard(boardId, moveIssuesToBacklogForBoardRequest, callback) {
      let postBody = moveIssuesToBacklogForBoardRequest;
      // verify the required parameter 'boardId' is set
      if (boardId === undefined || boardId === null) {
        throw new Error("Missing the required parameter 'boardId' when calling moveIssuesToBoard");
      }
      // verify the required parameter 'moveIssuesToBacklogForBoardRequest' is set
      if (moveIssuesToBacklogForBoardRequest === undefined || moveIssuesToBacklogForBoardRequest === null) {
        throw new Error("Missing the required parameter 'moveIssuesToBacklogForBoardRequest' when calling moveIssuesToBoard");
      }

      let pathParams = {
        'boardId': boardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/agile/1.0/board/{boardId}/issue', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setBoardProperty operation.
     * @callback module:api/BoardApi~setBoardPropertyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set board property
     * Sets the value of the specified board's property.  You can use this resource to store a custom data against the board identified by the id. The user who stores the data is required to have permissions to modify the board.
     * @param {String} boardId the ID of the board on which the property will be set.
     * @param {String} propertyKey the key of the board's property. The maximum length of the key is 255 bytes.
     * @param {Object} body The value of the property. The value has to be a valid, non-empty [JSON](https://tools.ietf.org/html/rfc4627) value. The maximum length of the property value is 32768 bytes.
     * @param {module:api/BoardApi~setBoardPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    setBoardProperty(boardId, propertyKey, body, callback) {
      let postBody = body;
      // verify the required parameter 'boardId' is set
      if (boardId === undefined || boardId === null) {
        throw new Error("Missing the required parameter 'boardId' when calling setBoardProperty");
      }
      // verify the required parameter 'propertyKey' is set
      if (propertyKey === undefined || propertyKey === null) {
        throw new Error("Missing the required parameter 'propertyKey' when calling setBoardProperty");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setBoardProperty");
      }

      let pathParams = {
        'boardId': boardId,
        'propertyKey': propertyKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rest/agile/1.0/board/{boardId}/properties/{propertyKey}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the toggleFeatures operation.
     * @callback module:api/BoardApi~toggleFeaturesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetFeaturesForBoard200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Toggle features
     * 
     * @param {Number} boardId 
     * @param {module:model/ToggleFeaturesRequest} toggleFeaturesRequest 
     * @param {module:api/BoardApi~toggleFeaturesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetFeaturesForBoard200Response}
     */
    toggleFeatures(boardId, toggleFeaturesRequest, callback) {
      let postBody = toggleFeaturesRequest;
      // verify the required parameter 'boardId' is set
      if (boardId === undefined || boardId === null) {
        throw new Error("Missing the required parameter 'boardId' when calling toggleFeatures");
      }
      // verify the required parameter 'toggleFeaturesRequest' is set
      if (toggleFeaturesRequest === undefined || toggleFeaturesRequest === null) {
        throw new Error("Missing the required parameter 'toggleFeaturesRequest' when calling toggleFeatures");
      }

      let pathParams = {
        'boardId': boardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetFeaturesForBoard200Response;
      return this.apiClient.callApi(
        '/rest/agile/1.0/board/{boardId}/features', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
