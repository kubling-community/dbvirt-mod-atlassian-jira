/**
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetIncidentById200Response from '../model/GetIncidentById200Response';
import GetReviewById200Response from '../model/GetReviewById200Response';
import OperationsWorkspaceIds from '../model/OperationsWorkspaceIds';
import SubmitIncidentsResponse from '../model/SubmitIncidentsResponse';
import SubmitOperationsWorkspacesResponse from '../model/SubmitOperationsWorkspacesResponse';

/**
* Operations service.
* @module api/OperationsApi
* @version 1001.0.0
*/
export default class OperationsApi {

    /**
    * Constructs a new OperationsApi. 
    * @alias module:api/OperationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteEntityByProperty operation.
     * @callback module:api/OperationsApi~deleteEntityByPropertyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Incidents or Review by Property
     * Bulk delete all Entties that match the given request.  One or more query params must be supplied to specify Properties to delete by. If more than one Property is provided, data will be deleted that matches ALL of the Properties (e.g. treated as an AND). See the documentation for the submitEntity operation for more details.  e.g. DELETE /bulkByProperties?accountId=account-123&createdBy=user-456  Deletion is performed asynchronously. The getIncidentById operation can be used to confirm that data has been deleted successfully (if needed).  Only Connect apps that define the `jiraOperationsInfoProvider` module can access this resource. This resource requires the 'DELETE' scope for Connect apps. 
     * @param {String} authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define Operations Information module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details. 
     * @param {module:api/OperationsApi~deleteEntityByPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteEntityByProperty(authorization, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteEntityByProperty");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/operations/1.0/bulkByProperties', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteIncidentById operation.
     * @callback module:api/OperationsApi~deleteIncidentByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Incident by ID
     * Delete the Incident data currently stored for the given ID.  Deletion is performed asynchronously. The getIncidentById operation can be used to confirm that data has been deleted successfully (if needed).  Only Connect apps that define the `jiraOperationsInfoProvider` module can access this resource. This resource requires the 'DELETE' scope for Connect apps. 
     * @param {String} authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define Operations Information module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details. 
     * @param {String} incidentId The ID of the Incident to delete. 
     * @param {module:api/OperationsApi~deleteIncidentByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteIncidentById(authorization, incidentId, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteIncidentById");
      }
      // verify the required parameter 'incidentId' is set
      if (incidentId === undefined || incidentId === null) {
        throw new Error("Missing the required parameter 'incidentId' when calling deleteIncidentById");
      }

      let pathParams = {
        'incidentId': incidentId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/operations/1.0/incidents/{incidentId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteReviewById operation.
     * @callback module:api/OperationsApi~deleteReviewByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Review by ID
     * Delete the Review data currently stored for the given ID.  Deletion is performed asynchronously. The getReviewById operation can be used to confirm that data has been deleted successfully (if needed).  Only Connect apps that define the `jiraOperationsInfoProvider` module can access this resource. This resource requires the 'DELETE' scope for Connect apps. 
     * @param {String} authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define Operations Information module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details. 
     * @param {String} reviewId The ID of the Review to delete. 
     * @param {module:api/OperationsApi~deleteReviewByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteReviewById(authorization, reviewId, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteReviewById");
      }
      // verify the required parameter 'reviewId' is set
      if (reviewId === undefined || reviewId === null) {
        throw new Error("Missing the required parameter 'reviewId' when calling deleteReviewById");
      }

      let pathParams = {
        'reviewId': reviewId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/operations/1.0/post-incident-reviews/{reviewId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteWorkspaces operation.
     * @callback module:api/OperationsApi~deleteWorkspacesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Operations Workpaces by Id
     * Bulk delete all Operations Workspaces that match the given request.  Only Connect apps that define the `jiraOperationsInfoProvider` module can access this resource. This resource requires the 'DELETE' scope for Connect apps.  e.g. DELETE /bulk?workspaceIds=111-222-333,444-555-666 
     * @param {String} authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define the Operations module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details. 
     * @param {module:api/OperationsApi~deleteWorkspacesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteWorkspaces(authorization, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteWorkspaces");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/operations/1.0/linkedWorkspaces/bulk', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIncidentById operation.
     * @callback module:api/OperationsApi~getIncidentByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetIncidentById200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Incident by ID
     * Retrieve the currently stored Incident data for the given ID.  The result will be what is currently stored, ignoring any pending updates or deletes.  Only Connect apps that define the `jiraOperationsInfoProvider` module can access this resource. This resource requires the 'READ' scope for Connect apps. 
     * @param {String} authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define Operations Information module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details. 
     * @param {String} incidentId The ID of the Incident to fetch. 
     * @param {module:api/OperationsApi~getIncidentByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetIncidentById200Response}
     */
    getIncidentById(authorization, incidentId, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getIncidentById");
      }
      // verify the required parameter 'incidentId' is set
      if (incidentId === undefined || incidentId === null) {
        throw new Error("Missing the required parameter 'incidentId' when calling getIncidentById");
      }

      let pathParams = {
        'incidentId': incidentId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetIncidentById200Response;
      return this.apiClient.callApi(
        '/rest/operations/1.0/incidents/{incidentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReviewById operation.
     * @callback module:api/OperationsApi~getReviewByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetReviewById200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Review by ID
     * Retrieve the currently stored Review data for the given ID.  The result will be what is currently stored, ignoring any pending updates or deletes.  Only Connect apps that define the `jiraOperationsInfoProvider` module can access this resource. This resource requires the 'READ' scope for Connect apps. 
     * @param {String} authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define Operations Information module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details. 
     * @param {String} reviewId The ID of the Review to fetch. 
     * @param {module:api/OperationsApi~getReviewByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetReviewById200Response}
     */
    getReviewById(authorization, reviewId, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getReviewById");
      }
      // verify the required parameter 'reviewId' is set
      if (reviewId === undefined || reviewId === null) {
        throw new Error("Missing the required parameter 'reviewId' when calling getReviewById");
      }

      let pathParams = {
        'reviewId': reviewId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetReviewById200Response;
      return this.apiClient.callApi(
        '/rest/operations/1.0/post-incident-reviews/{reviewId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWorkspaces operation.
     * @callback module:api/OperationsApi~getWorkspacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationsWorkspaceIds} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all Operations Workspace IDs or a specific Operations Workspace by ID
     * Retrieve the either all Operations Workspace IDs associated with the Jira site or a specific Operations Workspace ID for the given ID.  The result will be what is currently stored, ignoring any pending updates or deletes.  e.g. GET /workspace?workspaceId=111-222-333  Only Connect apps that define the `jiraOperationsInfoProvider` module can access this resource. This resource requires the 'READ' scope for Connect apps. 
     * @param {String} authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define the Operations Information module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details. 
     * @param {module:api/OperationsApi~getWorkspacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationsWorkspaceIds}
     */
    getWorkspaces(authorization, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getWorkspaces");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationsWorkspaceIds;
      return this.apiClient.callApi(
        '/rest/operations/1.0/linkedWorkspaces', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitEntity operation.
     * @callback module:api/OperationsApi~submitEntityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubmitIncidentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit Incident or Review data
     * Update / insert Incident or Review data.  Incidents and reviews are identified by their ID, and existing Incident and Review data for the same ID will be replaced if it exists and the updateSequenceNumber of existing data is less than the incoming data.  Submissions are performed asynchronously. Submitted data will eventually be available in Jira; most updates are available within a short period of time, but may take some time during peak load and/or maintenance times. The getIncidentById or getReviewById operation can be used to confirm that data has been stored successfully (if needed).  In the case of multiple Incidents and Reviews being submitted in one request, each is validated individually prior to submission. Details of which entities failed submission (if any) are available in the response object.  A maximum of 1000 incidents can be submitted in one request.  Only Connect apps that define the `jiraOperationsInfoProvider` module can access this resource. This resource requires the 'WRITE' scope for Connect apps. 
     * @param {String} authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define the Operations Information module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details. 
     * @param {module:model/SubmitIncidentsRequest} submitIncidentsRequest Incident data to submit. 
     * @param {module:api/OperationsApi~submitEntityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubmitIncidentsResponse}
     */
    submitEntity(authorization, submitIncidentsRequest, callback) {
      let postBody = submitIncidentsRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling submitEntity");
      }
      // verify the required parameter 'submitIncidentsRequest' is set
      if (submitIncidentsRequest === undefined || submitIncidentsRequest === null) {
        throw new Error("Missing the required parameter 'submitIncidentsRequest' when calling submitEntity");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SubmitIncidentsResponse;
      return this.apiClient.callApi(
        '/rest/operations/1.0/bulk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitOperationsWorkspaces operation.
     * @callback module:api/OperationsApi~submitOperationsWorkspacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubmitOperationsWorkspacesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit Operations Workspace Ids
     * Insert Operations Workspace IDs to establish a relationship between them and the Jira site the app is installed in. If a relationship between the Workspace ID and Jira already exists then the workspace ID will be ignored and Jira will process the rest of the entries.  Only Connect apps that define the `jiraOperationsInfoProvider` module can access this resource. This resource requires the 'WRITE' scope for Connect apps. 
     * @param {String} authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define the Operations module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details. 
     * @param {module:model/SubmitOperationsWorkspacesRequest} submitOperationsWorkspacesRequest Operations Workspace ids to submit. 
     * @param {module:api/OperationsApi~submitOperationsWorkspacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubmitOperationsWorkspacesResponse}
     */
    submitOperationsWorkspaces(authorization, submitOperationsWorkspacesRequest, callback) {
      let postBody = submitOperationsWorkspacesRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling submitOperationsWorkspaces");
      }
      // verify the required parameter 'submitOperationsWorkspacesRequest' is set
      if (submitOperationsWorkspacesRequest === undefined || submitOperationsWorkspacesRequest === null) {
        throw new Error("Missing the required parameter 'submitOperationsWorkspacesRequest' when calling submitOperationsWorkspaces");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SubmitOperationsWorkspacesResponse;
      return this.apiClient.callApi(
        '/rest/operations/1.0/linkedWorkspaces/bulk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
