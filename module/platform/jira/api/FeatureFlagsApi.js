/**
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FeatureFlagData from '../model/FeatureFlagData';
import SubmitFeatureFlagsResponse from '../model/SubmitFeatureFlagsResponse';

/**
* FeatureFlags service.
* @module api/FeatureFlagsApi
* @version 1001.0.0
*/
export default class FeatureFlagsApi {

    /**
    * Constructs a new FeatureFlagsApi. 
    * @alias module:api/FeatureFlagsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteFeatureFlagById operation.
     * @callback module:api/FeatureFlagsApi~deleteFeatureFlagByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Feature Flag by ID
     * Delete the Feature Flag data currently stored for the given ID.  Deletion is performed asynchronously. The getFeatureFlagById operation can be used to confirm that data has been deleted successfully (if needed).  Only Connect apps that define the `jiraFeatureFlagInfoProvider` module can access this resource. This resource requires the 'DELETE' scope for Connect apps. 
     * @param {String} authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define Feature Flags module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details. 
     * @param {String} featureFlagId The ID of the Feature Flag to delete. 
     * @param {Object} opts Optional parameters
     * @param {Number} [updateSequenceId] This parameter usage is no longer supported.  An optional `_updateSequenceId` to use to control deletion.  Only stored data with an `updateSequenceId` less than or equal to that provided will be deleted. This can be used help ensure submit/delete requests are applied correctly if issued close together. 
     * @param {module:api/FeatureFlagsApi~deleteFeatureFlagByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteFeatureFlagById(authorization, featureFlagId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteFeatureFlagById");
      }
      // verify the required parameter 'featureFlagId' is set
      if (featureFlagId === undefined || featureFlagId === null) {
        throw new Error("Missing the required parameter 'featureFlagId' when calling deleteFeatureFlagById");
      }

      let pathParams = {
        'featureFlagId': featureFlagId
      };
      let queryParams = {
        '_updateSequenceId': opts['updateSequenceId']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/featureflags/0.1/flag/{featureFlagId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFeatureFlagsByProperty operation.
     * @callback module:api/FeatureFlagsApi~deleteFeatureFlagsByPropertyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Feature Flags by Property
     * Bulk delete all Feature Flags that match the given request.  One or more query params must be supplied to specify Properties to delete by. Optional param `_updateSequenceId` is no longer supported. If more than one Property is provided, data will be deleted that matches ALL of the Properties (e.g. treated as an AND). See the documentation for the submitFeatureFlags operation for more details.  e.g. DELETE /bulkByProperties?accountId=account-123&createdBy=user-456  Deletion is performed asynchronously. The getFeatureFlagById operation can be used to confirm that data has been deleted successfully (if needed).  Only Connect apps that define the `jiraFeatureFlagInfoProvider` module can access this resource. This resource requires the 'DELETE' scope for Connect apps. 
     * @param {String} authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define Feature Flags module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details. 
     * @param {Object} opts Optional parameters
     * @param {Number} [updateSequenceId] This parameter usage is no longer supported.  An optional `_updateSequenceId` to use to control deletion.  Only stored data with an `updateSequenceId` less than or equal to that provided will be deleted. This can be used help ensure submit/delete requests are applied correctly if issued close together.  If not provided, all stored data that matches the request will be deleted. 
     * @param {module:api/FeatureFlagsApi~deleteFeatureFlagsByPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteFeatureFlagsByProperty(authorization, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteFeatureFlagsByProperty");
      }

      let pathParams = {
      };
      let queryParams = {
        '_updateSequenceId': opts['updateSequenceId']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/featureflags/0.1/bulkByProperties', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFeatureFlagById operation.
     * @callback module:api/FeatureFlagsApi~getFeatureFlagByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FeatureFlagData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Feature Flag by ID
     * Retrieve the currently stored Feature Flag data for the given ID.  The result will be what is currently stored, ignoring any pending updates or deletes.  Only Connect apps that define the `jiraFeatureFlagInfoProvider` module can access this resource. This resource requires the 'READ' scope for Connect apps. 
     * @param {String} authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define Feature Flags module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details. 
     * @param {String} featureFlagId The ID of the Feature Flag to fetch. 
     * @param {module:api/FeatureFlagsApi~getFeatureFlagByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FeatureFlagData}
     */
    getFeatureFlagById(authorization, featureFlagId, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getFeatureFlagById");
      }
      // verify the required parameter 'featureFlagId' is set
      if (featureFlagId === undefined || featureFlagId === null) {
        throw new Error("Missing the required parameter 'featureFlagId' when calling getFeatureFlagById");
      }

      let pathParams = {
        'featureFlagId': featureFlagId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FeatureFlagData;
      return this.apiClient.callApi(
        '/rest/featureflags/0.1/flag/{featureFlagId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitFeatureFlags operation.
     * @callback module:api/FeatureFlagsApi~submitFeatureFlagsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubmitFeatureFlagsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit Feature Flag data
     * Update / insert Feature Flag data.  Feature Flags are identified by their ID, and existing Feature Flag data for the same ID will be replaced if it exists and the updateSequenceId of existing data is less than the incoming data.  Submissions are performed asynchronously. Submitted data will eventually be available in Jira; most updates are available within a short period of time, but may take some time during peak load and/or maintenance times. The getFeatureFlagById operation can be used to confirm that data has been stored successfully (if needed).  In the case of multiple Feature Flags being submitted in one request, each is validated individually prior to submission. Details of which Feature Flags failed submission (if any) are available in the response object.  Only Connect apps that define the `jiraFeatureFlagInfoProvider` module can access this resource. This resource requires the 'WRITE' scope for Connect apps. 
     * @param {String} authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define Feature Flags module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details. 
     * @param {module:model/SubmitFeatureFlagRequest} submitFeatureFlagRequest Feature Flag data to submit. 
     * @param {module:api/FeatureFlagsApi~submitFeatureFlagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubmitFeatureFlagsResponse}
     */
    submitFeatureFlags(authorization, submitFeatureFlagRequest, callback) {
      let postBody = submitFeatureFlagRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling submitFeatureFlags");
      }
      // verify the required parameter 'submitFeatureFlagRequest' is set
      if (submitFeatureFlagRequest === undefined || submitFeatureFlagRequest === null) {
        throw new Error("Missing the required parameter 'submitFeatureFlagRequest' when calling submitFeatureFlags");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SubmitFeatureFlagsResponse;
      return this.apiClient.callApi(
        '/rest/featureflags/0.1/bulk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
