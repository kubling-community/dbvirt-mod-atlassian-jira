/**
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetComponentById200Response from '../model/GetComponentById200Response';
import SubmitDevopsComponentsResponse from '../model/SubmitDevopsComponentsResponse';

/**
* DevOpsComponents service.
* @module api/DevOpsComponentsApi
* @version 1001.0.0
*/
export default class DevOpsComponentsApi {

    /**
    * Constructs a new DevOpsComponentsApi. 
    * @alias module:api/DevOpsComponentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteComponentById operation.
     * @callback module:api/DevOpsComponentsApi~deleteComponentByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Component by ID
     * Delete the Component data currently stored for the given ID.  Deletion is performed asynchronously. The getComponentById operation can be used to confirm that data has been deleted successfully (if needed).  Only Connect apps that define the `jiraDevOpsComponentProvider` module can access this resource. This resource requires the 'DELETE' scope for Connect apps. 
     * @param {String} authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define Operations Information module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details. 
     * @param {String} componentId The ID of the Component to delete. 
     * @param {module:api/DevOpsComponentsApi~deleteComponentByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteComponentById(authorization, componentId, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteComponentById");
      }
      // verify the required parameter 'componentId' is set
      if (componentId === undefined || componentId === null) {
        throw new Error("Missing the required parameter 'componentId' when calling deleteComponentById");
      }

      let pathParams = {
        'componentId': componentId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/devopscomponents/1.0/{componentId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteComponentsByProperty operation.
     * @callback module:api/DevOpsComponentsApi~deleteComponentsByPropertyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete DevOps Components by Property
     * Bulk delete all Components that match the given request.  One or more query params must be supplied to specify Properties to delete by. If more than one Property is provided, data will be deleted that matches ALL of the Properties (e.g. treated as an AND). See the documentation for the submitComponents operation for more details.  e.g. DELETE /bulkByProperties?accountId=account-123&createdBy=user-456  Deletion is performed asynchronously. The getComponentById operation can be used to confirm that data has been deleted successfully (if needed).  Only Connect apps that define the `jiraDevOpsComponentProvider` module can access this resource. This resource requires the 'DELETE' scope for Connect apps. 
     * @param {String} authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define the Operations Information module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details. 
     * @param {module:api/DevOpsComponentsApi~deleteComponentsByPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteComponentsByProperty(authorization, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteComponentsByProperty");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/devopscomponents/1.0/bulkByProperties', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getComponentById operation.
     * @callback module:api/DevOpsComponentsApi~getComponentByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetComponentById200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Component by ID
     * Retrieve the currently stored Component data for the given ID.  The result will be what is currently stored, ignoring any pending updates or deletes.  Only Connect apps that define the `jiraDevOpsComponentProvider` module can access this resource. This resource requires the 'READ' scope for Connect apps. 
     * @param {String} authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define Operations Information module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details. 
     * @param {String} componentId The ID of the Component to fetch. 
     * @param {module:api/DevOpsComponentsApi~getComponentByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetComponentById200Response}
     */
    getComponentById(authorization, componentId, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getComponentById");
      }
      // verify the required parameter 'componentId' is set
      if (componentId === undefined || componentId === null) {
        throw new Error("Missing the required parameter 'componentId' when calling getComponentById");
      }

      let pathParams = {
        'componentId': componentId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetComponentById200Response;
      return this.apiClient.callApi(
        '/rest/devopscomponents/1.0/{componentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitComponents operation.
     * @callback module:api/DevOpsComponentsApi~submitComponentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubmitDevopsComponentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit DevOps Components
     * Update / insert DevOps Component data.  Components are identified by their ID, and existing Component data for the same ID will be replaced if it exists and the updateSequenceNumber of existing data is less than the incoming data.  Submissions are performed asynchronously. Submitted data will eventually be available in Jira; most updates are available within a short period of time, but may take some time during peak load and/or maintenance times. The getComponentById operation can be used to confirm that data has been stored successfully (if needed).  In the case of multiple Components being submitted in one request, each is validated individually prior to submission. Details of which Components failed submission (if any) are available in the response object.  A maximum of 1000 components can be submitted in one request.  Only Connect apps that define the `jiraDevOpsComponentProvider` module can access this resource. This resource requires the 'WRITE' scope for Connect apps. 
     * @param {String} authorization All requests must be signed with a Connect JWT token that corresponds to the Provider app installed in Jira.  If the JWT token corresponds to an app that does not define the DevOps Information module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details. 
     * @param {module:model/SubmitDevopsComponentsRequest} submitDevopsComponentsRequest DevOps Component data to submit. 
     * @param {module:api/DevOpsComponentsApi~submitComponentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubmitDevopsComponentsResponse}
     */
    submitComponents(authorization, submitDevopsComponentsRequest, callback) {
      let postBody = submitDevopsComponentsRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling submitComponents");
      }
      // verify the required parameter 'submitDevopsComponentsRequest' is set
      if (submitDevopsComponentsRequest === undefined || submitDevopsComponentsRequest === null) {
        throw new Error("Missing the required parameter 'submitDevopsComponentsRequest' when calling submitComponents");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SubmitDevopsComponentsResponse;
      return this.apiClient.callApi(
        '/rest/devopscomponents/1.0/bulk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
