/**
 * Jira Software Cloud API
 * Jira Software Cloud REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RemoteLinkData from '../model/RemoteLinkData';
import SubmitRemoteLinks202Response from '../model/SubmitRemoteLinks202Response';

/**
* RemoteLinks service.
* @module api/RemoteLinksApi
* @version 1001.0.0
*/
export default class RemoteLinksApi {

    /**
    * Constructs a new RemoteLinksApi. 
    * @alias module:api/RemoteLinksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteRemoteLinkById operation.
     * @callback module:api/RemoteLinksApi~deleteRemoteLinkByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Remote Link by ID
     * Delete the Remote Link data currently stored for the given ID.  Deletion is performed asynchronously. The `getRemoteLinkById` operation can be used to confirm that data has been deleted successfully (if needed).  Only Connect apps that define the `jiraRemoteLinkInfoProvider` module, and on-premise integrations, can access this resource. This resource requires the 'DELETE' scope for Connect apps. 
     * @param {String} authorization All requests must be signed with either a Connect JWT token or OAuth token for an on-premise integration that corresponds to an app installed in Jira.  If the Connect JWT token corresponds to an app that does not define `jiraRemoteLinkInfoProvider` module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations. 
     * @param {String} remoteLinkId The ID of the Remote Link to fetch. 
     * @param {Object} opts Optional parameters
     * @param {Number} [updateSequenceNumber] This parameter usage is no longer supported.  An optional `_updateSequenceNumber` to use to control deletion.  Only stored data with an `updateSequenceNumber` less than or equal to that provided will be deleted. This can be used help ensure submit/delete requests are applied correctly if issued close together. 
     * @param {module:api/RemoteLinksApi~deleteRemoteLinkByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRemoteLinkById(authorization, remoteLinkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteRemoteLinkById");
      }
      // verify the required parameter 'remoteLinkId' is set
      if (remoteLinkId === undefined || remoteLinkId === null) {
        throw new Error("Missing the required parameter 'remoteLinkId' when calling deleteRemoteLinkById");
      }

      let pathParams = {
        'remoteLinkId': remoteLinkId
      };
      let queryParams = {
        '_updateSequenceNumber': opts['updateSequenceNumber']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/remotelinks/1.0/remotelink/{remoteLinkId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRemoteLinksByProperty operation.
     * @callback module:api/RemoteLinksApi~deleteRemoteLinksByPropertyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Remote Links by Property
     * Bulk delete all Remote Links data that match the given request.  One or more query params must be supplied to specify Properties to delete by. Optional param `_updateSequenceNumber` is no longer supported. If more than one Property is provided, data will be deleted that matches ALL of the Properties (e.g. treated as an AND).  See the documentation for the `submitRemoteLinks` operation for more details.  e.g. DELETE /bulkByProperties?accountId=account-123&repoId=repo-345  Deletion is performed asynchronously. The `getRemoteLinkById` operation can be used to confirm that data has been deleted successfully (if needed).  Only Connect apps that define the `jiraRemoteLinkInfoProvider` module, and on-premise integrations, can access this resource. This resource requires the 'DELETE' scope for Connect apps. 
     * @param {String} authorization All requests must be signed with either a Connect JWT token or OAuth token for an on-premise integration that corresponds to an app installed in Jira.  If the Connect JWT token corresponds to an app that does not define `jiraRemoteLinkInfoProvider` module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations. 
     * @param {Object} opts Optional parameters
     * @param {Number} [updateSequenceNumber] This parameter usage is no longer supported.  An optional `_updateSequenceNumber` to use to control deletion.  Only stored data with an `updateSequenceNumber` less than or equal to that provided will be deleted. This can be used help ensure submit/delete requests are applied correctly if issued close together.  If not provided, all stored data that matches the request will be deleted. 
     * @param {Object.<String, Object>} [params] Free-form query parameters to specify which properties to delete by. Properties refer to the arbitrary information the provider tagged Remote Links with previously.  For example, if the provider previously tagged a remote link with accountId:   \"properties\": {     \"accountId\": \"account-123\"   }  And now they want to delete Remote Links in bulk by that specific accountId as follows: e.g. DELETE /bulkByProperties?accountId=account-123 
     * @param {module:api/RemoteLinksApi~deleteRemoteLinksByPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRemoteLinksByProperty(authorization, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteRemoteLinksByProperty");
      }

      let pathParams = {
      };
      let queryParams = {
        '_updateSequenceNumber': opts['updateSequenceNumber'],
        'params': opts['params']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest/remotelinks/1.0/bulkByProperties', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRemoteLinkById operation.
     * @callback module:api/RemoteLinksApi~getRemoteLinkByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemoteLinkData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Remote Link by ID
     * Retrieve the currently stored Remote Link data for the given ID.  The result will be what is currently stored, ignoring any pending updates or deletes.  Only Connect apps that define the `jiraRemoteLinkInfoProvider` module, and on-premise integrations, can access this resource. This resource requires the 'READ' scope for Connect apps. 
     * @param {String} authorization All requests must be signed with either a Connect JWT token or OAuth token for an on-premise integration that corresponds to an app installed in Jira.  If the Connect JWT token corresponds to an app that does not define `jiraRemoteLinkInfoProvider` module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations. 
     * @param {String} remoteLinkId The ID of the Remote Link to fetch. 
     * @param {module:api/RemoteLinksApi~getRemoteLinkByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemoteLinkData}
     */
    getRemoteLinkById(authorization, remoteLinkId, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getRemoteLinkById");
      }
      // verify the required parameter 'remoteLinkId' is set
      if (remoteLinkId === undefined || remoteLinkId === null) {
        throw new Error("Missing the required parameter 'remoteLinkId' when calling getRemoteLinkById");
      }

      let pathParams = {
        'remoteLinkId': remoteLinkId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RemoteLinkData;
      return this.apiClient.callApi(
        '/rest/remotelinks/1.0/remotelink/{remoteLinkId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitRemoteLinks operation.
     * @callback module:api/RemoteLinksApi~submitRemoteLinksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubmitRemoteLinks202Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit Remote Link data
     * Update / insert Remote Link data.  Remote Links are identified by their ID, existing Remote Link data for the same ID will be replaced if it exists and the updateSequenceId of existing data is less than the incoming data.  Submissions are performed asynchronously. Submitted data will eventually be available in Jira; most updates are available within a short period of time, but may take some time during peak load and/or maintenance times. The `getRemoteLinkById` operation can be used to confirm that data has been stored successfully (if needed).  In the case of multiple Remote Links being submitted in one request, each is validated individually prior to submission. Details of which Remote LInk failed submission (if any) are available in the response object.  Only Connect apps that define the `jiraRemoteLinkInfoProvider` module can access this resource. This resource requires the 'WRITE' scope for Connect apps. 
     * @param {String} authorization All requests must be signed with a Connect JWT token that corresponds to an app installed in Jira.  If the Connect JWT token corresponds to an app that does not define `jiraRemoteLinkInfoProvider` module it will be rejected with a 403.  See https://developer.atlassian.com/blog/2015/01/understanding-jwt/ for more details about Connect JWT tokens. See https://developer.atlassian.com/cloud/jira/software/integrate-jsw-cloud-with-onpremises-tools/ for details about on-premise integrations. 
     * @param {module:model/SubmitRemoteLinksRequest} submitRemoteLinksRequest Remote Links data to submit. 
     * @param {module:api/RemoteLinksApi~submitRemoteLinksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubmitRemoteLinks202Response}
     */
    submitRemoteLinks(authorization, submitRemoteLinksRequest, callback) {
      let postBody = submitRemoteLinksRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling submitRemoteLinks");
      }
      // verify the required parameter 'submitRemoteLinksRequest' is set
      if (submitRemoteLinksRequest === undefined || submitRemoteLinksRequest === null) {
        throw new Error("Missing the required parameter 'submitRemoteLinksRequest' when calling submitRemoteLinks");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SubmitRemoteLinks202Response;
      return this.apiClient.callApi(
        '/rest/remotelinks/1.0/bulk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
